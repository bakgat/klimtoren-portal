!function(){"use strict";angular.module("notosportal",["notosportal.core","notosportal.layout","notosportal.widgets","notosportal.dashboard","notosportal.info","notosportal.media"])}(),angular.module("notosportal.core",["ngAnimate","ngSanitize","ngResource","ui.bootstrap","ncy-angular-breadcrumb","restangular","angular-google-analytics","blocks.exception","blocks.logger","blocks.router"]),function(){"use strict";angular.module("notosportal.dashboard",[])}(),function(){"use strict";angular.module("notosportal.info",[])}(),function(){"use strict";angular.module("notosportal.layout",[])}(),function(){"use strict";angular.module("notosportal.media",[])}(),function(){"use strict";angular.module("notosportal.widgets",[])}(),function(){"use strict";angular.module("blocks.exception",["blocks.logger"])}(),function(){"use strict";angular.module("blocks.logger",[])}(),function(){"use strict";angular.module("blocks.router",["ui.router"])}(),function(){"use strict";function t(){function t(t){var n,e,r,i,a,c="",s="",l="",u=0;do n=t.charCodeAt(u++),e=t.charCodeAt(u++),s=t.charCodeAt(u++),r=n>>2,i=(3&n)<<4|e>>4,a=(15&e)<<2|s>>6,l=63&s,isNaN(e)?a=l=64:isNaN(s)&&(l=64),c=c+o.charAt(r)+o.charAt(i)+o.charAt(a)+o.charAt(l),n=e=s="",r=i=a=l="";while(u<t.length);return c}function n(t){var n,e,r,i,a,c="",s="",l="",u=0,f=/[^A-Za-z0-9\+\/\=]/g;f.exec(t)&&window.alert("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding."),t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"");do r=o.indexOf(t.charAt(u++)),i=o.indexOf(t.charAt(u++)),a=o.indexOf(t.charAt(u++)),l=o.indexOf(t.charAt(u++)),n=r<<2|i>>4,e=(15&i)<<4|a>>2,s=(3&a)<<6|l,c+=String.fromCharCode(n),64!=a&&(c+=String.fromCharCode(e)),64!=l&&(c+=String.fromCharCode(s)),n=e=s="",r=i=a=l="";while(u<t.length);return c}var o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",e={encode:t,decode:n};return e}angular.module("notosportal.core").factory("Base64",t)}(),function(){"use strict";function t(t,n,o,e){function r(){return n.$broadcast.apply(n,arguments)}function i(t){return/^[-]?\d+$/.test(t)}function a(t,n){return t&&-1!==t.toLowerCase().indexOf(n.toLowerCase())}var c={$broadcast:r,$q:t,$timeout:o,isNumber:i,logger:e,textContains:a};return c}angular.module("notosportal.core").factory("common",t),t.$inject=["$q","$rootScope","$timeout","logger"]}(),function(){"use strict";function t(t){t.options.timeOut=4e3,t.options.closeButton=!0,t.options.progressBar=!0,t.options.positionClass="toast-bottom-right"}function n(t,n,o,e,i,a){function c(){o.config.$urlRouterProvider=t,o.config.$stateProvider=n,o.config.title=r.appTitle}function s(){e.setOptions({prefixStateName:"index",template:"bootstrap3",includeAbstract:!0})}function l(){var t="/api";i.setBaseUrl(t)}function u(){a.setAccount("UA-20593426-1"),a.setPageEvent("$stateChangeSuccess")}c(),s(),l(),u()}function o(t){t.$on("$viewContentLoaded",function(){angular.element("html, body").animate({scrollTop:0},200)})}var e=angular.module("notosportal.core");e.config(t),t.$inject=["toastr"];var r={appErrorPrefix:"[Fout] ",appTitle:"VBS De Klimtoren",version:"1.0.0"};e.value("config",r),e.config(n),e.run(o),e.run(["Analytics",function(t){}]),n.$inject=["$urlRouterProvider","$stateProvider","routehelperConfigProvider","$breadcrumbProvider","RestangularProvider","AnalyticsProvider"],o.$inject=["$rootScope"]}(),function(){"use strict";angular.module("notosportal.core").constant("toastr",toastr).constant("moment",moment).constant("gapi",gapi)}(),function(){"use strict";function t(t,n){function o(){FB.init({appId:"466280350201960",channelUrl:"js/modules/core/fb-channel.html",cookie:!0,xfbml:!0,version:"v2.3"})}t.fbAsyncInit=function(){o(),n.$broadcast("fb.init")},function(t){var n,o="facebook-jssdk",e=t.getElementsByTagName("script")[0];t.getElementById(o)||(n=t.createElement("script"),n.id=o,n.async=!0,n.src="//connect.facebook.net/en_US/sdk.js",e.parentNode.insertBefore(n,e))}(document)}angular.module("notosportal.core").run(t),t.$inject=["$window","common"]}(),function(){"use strict";function t(t,n){function o(){e.collections=t.take(4),n.campaigns(3).then(function(t){e.campaigns=t})}var e=this;e.facebookurl="https://www.facebook.com/vbsdeklimtoren",e.collections=[],e.campaigns=[],o()}angular.module("notosportal.dashboard").controller("DashboardController",t),t.$inject=["GPCollections","MailChimp"]}(),function(){"use strict";function t(t){t.configureStates(n())}function n(){return[{state:"index",config:{"abstract":!0,url:"/index",views:{"main@":{templateUrl:"js/modules/layout/main.html"}},title:"start"}},{state:"index.dashboard",config:{url:"/dashboard",views:{"content@index":{templateUrl:"js/modules/dashboard/dashboard.html",controller:"DashboardController",controllerAs:"vm"},"slider@index":{templateUrl:"js/modules/dashboard/slider.html"}},title:"Dashboard"}}]}angular.module("notosportal.dashboard").run(t),t.$inject=["routehelper"]}(),function(){"use strict";function t(t){function n(){function n(t){o.campaigns=t}t.campaigns().then(n),t.mailToSegments().then(function(t){console.log(t)})}var o=this;o.campaigns=[],n()}angular.module("notosportal.info").controller("CampaignsController",t),t.$inject=["MailChimp"]}(),function(){"use strict";function t(t){t.configureStates(n())}function n(){return[{state:"info",config:{"abstract":!0,url:"/info",views:{"main@":{templateUrl:"js/modules/layout/main.html"}},title:"Info"}},{state:"info.contact",config:{url:"/contact",views:{"content@info":{templateUrl:"js/modules/info/contact.html"}},title:"Contact"}},{state:"info.about",config:{url:"/about",views:{"content@info":{templateUrl:"js/modules/info/about.html"}},title:"Over onze school"}},{state:"info.care",config:{url:"/care",views:{"content@info":{templateUrl:"js/modules/info/care.html"}},title:"Zorg op onze school"}},,{state:"info.campaigns",config:{url:"/campaigns",views:{"content@info":{templateUrl:"js/modules/info/campaigns.html",controller:"CampaignsController",controllerAs:"vm"}},title:"Nieuwsbrieven"}}]}angular.module("notosportal.info").run(t),t.$inject=["routehelper"]}(),function(){"use strict";function t(t,n){function o(){t.memberCount().then(function(t){e.campaign_members=t.data.stats.member_count})}var e=this;e.campaign_members=0,o()}angular.module("notosportal.layout").controller("ShellController",t),t.$inject=["MailChimp","$state"]}(),function(){"use strict";function t(){function t(){return e}function n(t){for(var n=[],o=0;t>o&&o<e.length;)n.push(e[o]),o++;return n}var o={get:t,take:n},e=[{name:"2015-2016",href:"https://plus.google.com/b/103406123671942529660/collection/sYLa3",preview:"https://lh3.googleusercontent.com/-G-Qj-TTAW2M/VfbE9gxgSRI/AAAAAAAADZ0/NfJmsesxHIg/w777-h583-no/DSC_0026.JPG"},{name:"2014-2015",href:"https://plus.google.com/b/103406123671942529660/collection/U5aa3",preview:"https://lh3.googleusercontent.com/-WuQRYCenP8w/VelsvrGL-fI/AAAAAAAAAqI/rj6IT0gPJWM/w777-h583-no/DSCN3028.JPG"},{name:"2013-2014",href:"https://plus.google.com/b/103406123671942529660/collection/EoNP2",preview:"https://lh3.googleusercontent.com/-XuNc8zcK6cg/VelygWhfKUI/AAAAAAAAAvQ/8EZzWBFBgdA/w777-h583-no/IMG_2789.JPG"}];return o}angular.module("notosportal.media").factory("GPCollections",t)}(),function(){"use strict";function t(t,n){function o(n){function o(t){var o=[],e=0;return angular.forEach(t.data.campaigns,function(t){t.recipients.segment_opts||(!e||n>e)&&(o.push(t),e++)}),o}return t.get("/api/mailchimp/campaigns").then(o)}function e(){function n(t){var n=[];return angular.forEach(t.data.campaigns,function(t){t.recipients.segment_opts&&(console.log(t.recipients.segment_opts),n.push(t))}),n}return t.get("/api/mailchimp/campaigns").then(n)}function r(){function n(t){return t.data}return t.get("/api/mailchimp/member_count").success(n)}function i(){t.get("/api/mailchimp/lists/"+a+"/categories").then(function(t){console.log(t)})}var a=204325,c={campaigns:o,mailToSegments:e,memberCount:r,interests:i};return c}angular.module("notosportal.media").factory("MailChimp",t),t.$inject=["$http","$q"]}(),function(){"use strict";function t(t){t.configureStates(n())}function n(){return[{state:"media",config:{"abstract":!0,url:"/media",views:{"main@":{templateUrl:"js/modules/layout/main.html"}},title:"in beeld"}},{state:"media.photos",config:{url:"/photos",views:{"content@media":{templateUrl:"js/modules/media/photos.html",controller:"PhotoController",controllerAs:"vm"}},title:"foto's"}}]}angular.module("notosportal.info").run(t),t.$inject=["routehelper"]}(),function(){"use strict";function t(t){function n(){o.collections=t.get()}var o=this;o.collections=[],n()}angular.module("notosportal.media").controller("PhotoController",t),t.$inject=["GPCollections"]}(),function(){"use strict";function t(){function t(t,n,o){function e(){var t=o.appearAnimationDelay||1;t>1&&$(n).css("animation-delay",t+"ms"),$(n).addClass("animated").addClass(o.appearAnimation)}angular.element("body").hasClass("no-csstransitions")||$(n).bind("appear",e)}var n={restrict:"A",link:t};return n}angular.module("notosportal.widgets").directive("appearAnimation",t)}(),function(){"use strict";function t(t){function n(n,o,e){o.addClass("fwb-bg fwb-blur"),t(function(){var n=new Image,r='<div class="blur-box"/>';o.find("canvas").length||(e.image?n.src=e.image:"none"!==o.css("background-image")&&(n.src=o.css("background-image").replace("url(","").replace(")",""),o.css("background-image","none")),n.onload=function(){Pixastic.process(n,"blurfast",{amount:e.amount||2})},o.prepend(r).find(".blur-box").prepend(n)),t(function(){var t=o.find("canvas");t.width()==o.width()?t.css({marginLeft:0,marginTop:-((t.height()-o.height())/2)}):t.css({marginTop:0,marginLeft:-((t.width()-o.width())/2)}),$("body").addClass("blur-load")},50)})}var o={restrict:"A",link:n};return o}angular.module("notosportal.widgets").directive("blur",t),t.$inject=["$timeout"]}(),function(){"use strict";function t(){function t(t,n,o){n.find(".gallery-images, .lightbox").fancybox({nextEffect:"fade",prevEffect:"fade",openEffect:"fade",closeEffect:"fade",helpers:{overlay:{locked:!1},title:{type:"over"}},tpl:{closeBtn:'<a title="Sluiten" class="fancybox-item fancybox-close" href="javascript:;">×</a>',next:'<a title="Volgende" class="fancybox-nav fancybox-next" href="javascript:;">\n						<span><svg x="0" y="0" width="9px" height="16px" viewBox="0 0 9 16" enable-background="new 0 0 9 16" xml:space="preserve"><polygon fill-rule="evenodd" clip-rule="evenodd" fill="#fcfcfc" points="1,0.001 0,1.001 7,8 0,14.999 1,15.999 9,8 "/></svg></span>\n					</a>',prev:'<a title="Vorige" class="fancybox-nav fancybox-prev" href="javascript:;">\n						<span><svg x="0" y="0" width="9px" height="16px" viewBox="0 0 9 16" enable-background="new 0 0 9 16" xml:space="preserve"><polygon fill-rule="evenodd" clip-rule="evenodd" fill="#fcfcfc" points="8,15.999 9,14.999 2,8 9,1.001 8,0.001 0,8 "/></svg></span>\n					</a>'}})}var n={restrict:"A",link:t};return n}angular.module("notosportal.widgets").directive("fancybox",t)}(),function(){"use strict";function t(){function t(t,n){n.addClass("livicon"),n.addLivicon()}var n={restrict:"A",replace:!0,scope:!1,link:t};return n}angular.module("notosportal.widgets").directive("livicon",t)}(),function(){"use strict";function t(t,n){function o(o,e,r){t(function(){function t(){var t=e.offset().top,r=n.pageYOffset;t>r?e.css({backgroundPosition:"50% "+(t-r)/o+"px"}):e.css({backgroundPosition:"50% "+-(t-r)/o+"px"})}e.addClass("fwb-bg fwb-blur");var o=r.speed||3;t(),angular.element(n).bind("scroll",t)})}var e={restrict:"A",link:o};return e}angular.module("notosportal.widgets").directive("paralax",t),t.$inject=["$timeout","$window"]}(),function(){"use strict";function t(t){function n(n,o,e){t(function(){var t=o;if(t.closest(".rs-slider").hasClass("full-width")){var n,e=angular.element("body"),r=(e.width(),0),i=104;angular.element("#top-box").length&&e.hasClass("hidden-top")&&(r=angular.element("#top-box").outerHeight()-32),n=e.width()>=1200?e.height()-(r+i):800,t.revolution({delay:6e3,startwidth:1200,startheight:n,hideThumbs:10,navigationType:"bullet",navigationArrows:"solo",navigationHAlign:"center",navigationVAlign:"top",navigationHOffset:-545,navigationVOffset:30,hideTimerBar:"on"}).parent().parent().removeClass("load")}else t.revolution({delay:6e3,startwidth:1200,startheight:500,hideThumbs:10,navigationType:"none",onHoverStop:"off"}).parent().parent().removeClass("load")})}var o={restrict:"A",link:n};return o}angular.module("notosportal.widgets").directive("rsSlider",t),t.$inject=["$timeout"]}(),function(){"use strict";function t(){this.config={appErrorPrefix:void 0},this.configure=function(t){this.config.appErrorPrefix=t},this.$get=function(){return{config:this.config}}}function n(t){t.decorator("$exceptionHandler",o)}function o(t,n,o){return function(e,r){var i=n.config.appErrorPrefix||"",a={exception:e,cause:r};e.message=i+e.message,t(e,r),o.error(e.message,a)}}angular.module("blocks.exception").provider("exceptionHandler",t).config(n),n.$inject=["$provide"],o.$inject=["$delegate","exceptionHandler","logger"]}(),function(){"use strict";function t(t){function n(n){return function(o){t.error(n,o)}}var o={catcher:n};return o}angular.module("blocks.exception").factory("exception",t),t.$inject=["logger"]}(),function(){"use strict";function t(t,n){function o(o,e,r){n.error(o,r),t.error("Fout: "+o,e)}function e(o,e,r){n.info(o,r),t.info("Info: "+o,e)}function r(o,e,r){n.success(o,r),t.info("Succes: "+o,e)}function i(o,e,r){n.warning(o,r),t.warn("Let op: "+o,e)}function a(o,e,r){n.warning(o,r),t.warn("Verwijderd: "+o,e)}function c(o,e,r){n.success(o,r),t.info("Bewaard: "+o,e)}var s={showToasts:!0,error:o,info:e,success:r,warning:i,removed:a,saved:c,log:t.log};return s}angular.module("blocks.logger").factory("logger",t),t.$inject=["$log","toastr"]}(),function(){"use strict";function t(){this.config={},this.$get=function(){return{config:this.config}}}function n(t,n,o){function e(t){t.forEach(function(t){t.config.title&&(t.config.ncyBreadcrumb={label:t.config.title.toLowerCase()}),l.state(t.state,t.config)})}function r(){return o.get()}function i(t){var n=null;return r().forEach(function(o){o.name===t&&(n=o)}),n}function a(){c(),s.otherwise("/index/dashboard")}function c(){n.$on("$stateChangeSuccess",function(o,e,r){var i=t.config.title+(e.title?" | "+e.title:"");n.title=i,n.$state=e})}var s=t.config.$urlRouterProvider,l=t.config.$stateProvider,u={configureStates:e,states:r,get:i};return a(),u}angular.module("blocks.router").provider("routehelperConfig",t).factory("routehelper",n),n.$inject=["routehelperConfig","$rootScope","$state"]}();
//# sourceMappingURL=data:application/json;base64,