!function(){"use strict";angular.module("notosportal",["notosportal.core","notosportal.layout","notosportal.widgets","notosportal.dashboard","notosportal.info","notosportal.media"])}(),angular.module("notosportal.core",["ngAnimate","ngSanitize","ngResource","ui.bootstrap","ncy-angular-breadcrumb","restangular","angular-google-analytics","blocks.exception","blocks.logger","blocks.router"]),function(){"use strict";angular.module("notosportal.dashboard",[])}(),function(){"use strict";angular.module("notosportal.info",[])}(),function(){"use strict";angular.module("notosportal.layout",[])}(),function(){"use strict";angular.module("notosportal.media",[])}(),function(){"use strict";angular.module("notosportal.widgets",[])}(),function(){"use strict";angular.module("blocks.exception",["blocks.logger"])}(),function(){"use strict";angular.module("blocks.logger",[])}(),function(){"use strict";angular.module("blocks.router",["ui.router"])}(),function(){"use strict";function t(){function t(t){var n,e,r,i,a,c="",s="",l="",u=0;do n=t.charCodeAt(u++),e=t.charCodeAt(u++),s=t.charCodeAt(u++),r=n>>2,i=(3&n)<<4|e>>4,a=(15&e)<<2|s>>6,l=63&s,isNaN(e)?a=l=64:isNaN(s)&&(l=64),c=c+o.charAt(r)+o.charAt(i)+o.charAt(a)+o.charAt(l),n=e=s="",r=i=a=l="";while(u<t.length);return c}function n(t){var n,e,r,i,a,c="",s="",l="",u=0,f=/[^A-Za-z0-9\+\/\=]/g;f.exec(t)&&window.alert("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding."),t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"");do r=o.indexOf(t.charAt(u++)),i=o.indexOf(t.charAt(u++)),a=o.indexOf(t.charAt(u++)),l=o.indexOf(t.charAt(u++)),n=r<<2|i>>4,e=(15&i)<<4|a>>2,s=(3&a)<<6|l,c+=String.fromCharCode(n),64!=a&&(c+=String.fromCharCode(e)),64!=l&&(c+=String.fromCharCode(s)),n=e=s="",r=i=a=l="";while(u<t.length);return c}var o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",e={encode:t,decode:n};return e}angular.module("notosportal.core").factory("Base64",t)}(),function(){"use strict";function t(t,n,o,e){function r(){return n.$broadcast.apply(n,arguments)}function i(t){return/^[-]?\d+$/.test(t)}function a(t,n){return t&&-1!==t.toLowerCase().indexOf(n.toLowerCase())}var c={$broadcast:r,$q:t,$timeout:o,isNumber:i,logger:e,textContains:a};return c}angular.module("notosportal.core").factory("common",t),t.$inject=["$q","$rootScope","$timeout","logger"]}(),function(){"use strict";function t(t){t.options.timeOut=4e3,t.options.closeButton=!0,t.options.progressBar=!0,t.options.positionClass="toast-bottom-right"}function n(t,n,o,e,i,a){function c(){o.config.$urlRouterProvider=t,o.config.$stateProvider=n,o.config.title=r.appTitle}function s(){e.setOptions({prefixStateName:"index",template:"bootstrap3",includeAbstract:!0})}function l(){var t="/api";i.setBaseUrl(t)}function u(){a.setAccount("UA-20593426-1"),a.setPageEvent("$stateChangeSuccess")}c(),s(),l(),u()}function o(t){t.$on("$viewContentLoaded",function(){angular.element("html, body").animate({scrollTop:0},200)})}var e=angular.module("notosportal.core");e.config(t),t.$inject=["toastr"];var r={appErrorPrefix:"[Fout] ",appTitle:"VBS De Klimtoren",version:"1.0.0"};e.value("config",r),e.config(n),e.run(o),e.run(["Analytics",function(t){}]),n.$inject=["$urlRouterProvider","$stateProvider","routehelperConfigProvider","$breadcrumbProvider","RestangularProvider","AnalyticsProvider"],o.$inject=["$rootScope"]}(),function(){"use strict";angular.module("notosportal.core").constant("toastr",toastr).constant("moment",moment).constant("gapi",gapi)}(),function(){"use strict";function t(t,n){function o(){FB.init({appId:"466280350201960",channelUrl:"js/modules/core/fb-channel.html",cookie:!0,xfbml:!0,version:"v2.3"})}t.fbAsyncInit=function(){o(),n.$broadcast("fb.init")},function(t){var n,o="facebook-jssdk",e=t.getElementsByTagName("script")[0];t.getElementById(o)||(n=t.createElement("script"),n.id=o,n.async=!0,n.src="//connect.facebook.net/en_US/sdk.js",e.parentNode.insertBefore(n,e))}(document)}angular.module("notosportal.core").run(t),t.$inject=["$window","common"]}(),function(){"use strict";function t(t,n){function o(){e.collections=t.take(4),n.campaigns(3).then(function(t){e.campaigns=t.data.campaigns})}var e=this;e.facebookurl="https://www.facebook.com/vbsdeklimtoren",e.collections=[],e.campaigns=[],o()}angular.module("notosportal.dashboard").controller("DashboardController",t),t.$inject=["GPCollections","MailChimp"]}(),function(){"use strict";function t(t){t.configureStates(n())}function n(){return[{state:"index",config:{"abstract":!0,url:"/index",views:{"main@":{templateUrl:"js/modules/layout/main.html"}},title:"start"}},{state:"index.dashboard",config:{url:"/dashboard",views:{"content@index":{templateUrl:"js/modules/dashboard/dashboard.html",controller:"DashboardController",controllerAs:"vm"},"slider@index":{templateUrl:"js/modules/dashboard/slider.html"}},title:"Dashboard"}}]}angular.module("notosportal.dashboard").run(t),t.$inject=["routehelper"]}(),function(){"use strict";function t(t){function n(){function n(t){o.campaigns=t.data.campaigns}t.campaigns().then(n)}var o=this;o.campaigns=[],n()}angular.module("notosportal.info").controller("CampaignsController",t),t.$inject=["MailChimp"]}(),function(){"use strict";function t(t){t.configureStates(n())}function n(){return[{state:"info",config:{"abstract":!0,url:"/info",views:{"main@":{templateUrl:"js/modules/layout/main.html"}},title:"Info"}},{state:"info.contact",config:{url:"/contact",views:{"content@info":{templateUrl:"js/modules/info/contact.html"}},title:"Contact"}},{state:"info.about",config:{url:"/about",views:{"content@info":{templateUrl:"js/modules/info/about.html"}},title:"Over onze school"}},{state:"info.care",config:{url:"/care",views:{"content@info":{templateUrl:"js/modules/info/care.html"}},title:"Zorg op onze school"}},,{state:"info.campaigns",config:{url:"/campaigns",views:{"content@info":{templateUrl:"js/modules/info/campaigns.html",controller:"CampaignsController",controllerAs:"vm"}},title:"Nieuwsbrieven"}}]}angular.module("notosportal.info").run(t),t.$inject=["routehelper"]}(),function(){"use strict";function t(t,n){function o(){console.log(n),t.memberCount().then(function(t){e.campaign_members=t.data.stats.member_count})}var e=this;e.campaign_members=0,o()}angular.module("notosportal.layout").controller("ShellController",t),t.$inject=["MailChimp","$state"]}(),function(){"use strict";function t(){function t(){return e}function n(t){for(var n=[],o=0;t>o&&o<e.length;)n.push(e[o]),o++;return n}var o={get:t,take:n},e=[{name:"2015-2016",href:"https://plus.google.com/b/103406123671942529660/collection/sYLa3"},{name:"2014-2015",href:"https://plus.google.com/b/103406123671942529660/collection/U5aa3",preview:"https://lh3.googleusercontent.com/-WuQRYCenP8w/VelsvrGL-fI/AAAAAAAAAqI/rj6IT0gPJWM/w640-h480-p/DSCN3028.JPG"},{name:"2013-2014",href:"https://plus.google.com/b/103406123671942529660/collection/EoNP2",preview:"https://lh3.googleusercontent.com/-XuNc8zcK6cg/VelygWhfKUI/AAAAAAAAAvQ/8EZzWBFBgdA/w777-h583-no/IMG_2789.JPG"}];return o}angular.module("notosportal.media").factory("GPCollections",t)}(),function(){"use strict";function t(t,n){function o(n){function o(t){return t.data}return t.get("/api/mailchimp/campaigns",{params:{take:n}}).success(o)}function e(){function n(t){return t.data}return t.get("/api/mailchimp/member_count").success(n)}var r={campaigns:o,memberCount:e};return r}angular.module("notosportal.media").factory("MailChimp",t),t.$inject=["$http","$q"]}(),function(){"use strict";function t(t){t.configureStates(n())}function n(){return[{state:"media",config:{"abstract":!0,url:"/media",views:{"main@":{templateUrl:"js/modules/layout/main.html"}},title:"in beeld"}},{state:"media.photos",config:{url:"/photos",views:{"content@media":{templateUrl:"js/modules/media/photos.html",controller:"PhotoController",controllerAs:"vm"}},title:"foto's"}}]}angular.module("notosportal.info").run(t),t.$inject=["routehelper"]}(),function(){"use strict";function t(t){function n(){o.collections=t.get()}var o=this;o.collections=[],n()}angular.module("notosportal.media").controller("PhotoController",t),t.$inject=["GPCollections"]}(),function(){"use strict";function t(){function t(t,n,o){function e(){var t=o.appearAnimationDelay||1;t>1&&$(n).css("animation-delay",t+"ms"),$(n).addClass("animated").addClass(o.appearAnimation)}angular.element("body").hasClass("no-csstransitions")||$(n).bind("appear",e)}var n={restrict:"A",link:t};return n}angular.module("notosportal.widgets").directive("appearAnimation",t)}(),function(){"use strict";function t(t){function n(n,o,e){o.addClass("fwb-bg fwb-blur"),t(function(){var n=new Image,r='<div class="blur-box"/>';o.find("canvas").length||(e.image?n.src=e.image:"none"!==o.css("background-image")&&(n.src=o.css("background-image").replace("url(","").replace(")",""),o.css("background-image","none")),n.onload=function(){Pixastic.process(n,"blurfast",{amount:e.amount||2})},o.prepend(r).find(".blur-box").prepend(n)),t(function(){var t=o.find("canvas");t.width()==o.width()?t.css({marginLeft:0,marginTop:-((t.height()-o.height())/2)}):t.css({marginTop:0,marginLeft:-((t.width()-o.width())/2)}),$("body").addClass("blur-load")},50)})}var o={restrict:"A",link:n};return o}angular.module("notosportal.widgets").directive("blur",t),t.$inject=["$timeout"]}(),function(){"use strict";function t(){function t(t,n,o){n.find(".gallery-images, .lightbox").fancybox({nextEffect:"fade",prevEffect:"fade",openEffect:"fade",closeEffect:"fade",helpers:{overlay:{locked:!1},title:{type:"over"}},tpl:{closeBtn:'<a title="Sluiten" class="fancybox-item fancybox-close" href="javascript:;">Ã—</a>',next:'<a title="Volgende" class="fancybox-nav fancybox-next" href="javascript:;">\n						<span><svg x="0" y="0" width="9px" height="16px" viewBox="0 0 9 16" enable-background="new 0 0 9 16" xml:space="preserve"><polygon fill-rule="evenodd" clip-rule="evenodd" fill="#fcfcfc" points="1,0.001 0,1.001 7,8 0,14.999 1,15.999 9,8 "/></svg></span>\n					</a>',prev:'<a title="Vorige" class="fancybox-nav fancybox-prev" href="javascript:;">\n						<span><svg x="0" y="0" width="9px" height="16px" viewBox="0 0 9 16" enable-background="new 0 0 9 16" xml:space="preserve"><polygon fill-rule="evenodd" clip-rule="evenodd" fill="#fcfcfc" points="8,15.999 9,14.999 2,8 9,1.001 8,0.001 0,8 "/></svg></span>\n					</a>'}})}var n={restrict:"A",link:t};return n}angular.module("notosportal.widgets").directive("fancybox",t)}(),function(){"use strict";function t(){function t(t,n){n.addClass("livicon"),n.addLivicon()}var n={restrict:"A",replace:!0,scope:!1,link:t};return n}angular.module("notosportal.widgets").directive("livicon",t)}(),function(){"use strict";function t(t,n){function o(o,e,r){t(function(){function t(){var t=e.offset().top,r=n.pageYOffset;t>r?e.css({backgroundPosition:"50% "+(t-r)/o+"px"}):e.css({backgroundPosition:"50% "+-(t-r)/o+"px"})}e.addClass("fwb-bg fwb-blur");var o=r.speed||3;t(),angular.element(n).bind("scroll",t)})}var e={restrict:"A",link:o};return e}angular.module("notosportal.widgets").directive("paralax",t),t.$inject=["$timeout","$window"]}(),function(){"use strict";function t(t){function n(n,o,e){t(function(){var t=o;if(t.closest(".rs-slider").hasClass("full-width")){var n,e=angular.element("body"),r=(e.width(),0),i=104;angular.element("#top-box").length&&e.hasClass("hidden-top")&&(r=angular.element("#top-box").outerHeight()-32),n=e.width()>=1200?e.height()-(r+i):800,t.revolution({delay:6e3,startwidth:1200,startheight:n,hideThumbs:10,navigationType:"bullet",navigationArrows:"solo",navigationHAlign:"center",navigationVAlign:"top",navigationHOffset:-545,navigationVOffset:30,hideTimerBar:"on"}).parent().parent().removeClass("load")}else t.revolution({delay:6e3,startwidth:1200,startheight:500,hideThumbs:10,navigationType:"none",onHoverStop:"off"}).parent().parent().removeClass("load")})}var o={restrict:"A",link:n};return o}angular.module("notosportal.widgets").directive("rsSlider",t),t.$inject=["$timeout"]}(),function(){"use strict";function t(){this.config={appErrorPrefix:void 0},this.configure=function(t){this.config.appErrorPrefix=t},this.$get=function(){return{config:this.config}}}function n(t){t.decorator("$exceptionHandler",o)}function o(t,n,o){return function(e,r){var i=n.config.appErrorPrefix||"",a={exception:e,cause:r};e.message=i+e.message,t(e,r),o.error(e.message,a)}}angular.module("blocks.exception").provider("exceptionHandler",t).config(n),n.$inject=["$provide"],o.$inject=["$delegate","exceptionHandler","logger"]}(),function(){"use strict";function t(t){function n(n){return function(o){t.error(n,o)}}var o={catcher:n};return o}angular.module("blocks.exception").factory("exception",t),t.$inject=["logger"]}(),function(){"use strict";function t(t,n){function o(o,e,r){n.error(o,r),t.error("Fout: "+o,e)}function e(o,e,r){n.info(o,r),t.info("Info: "+o,e)}function r(o,e,r){n.success(o,r),t.info("Succes: "+o,e)}function i(o,e,r){n.warning(o,r),t.warn("Let op: "+o,e)}function a(o,e,r){n.warning(o,r),t.warn("Verwijderd: "+o,e)}function c(o,e,r){n.success(o,r),t.info("Bewaard: "+o,e)}var s={showToasts:!0,error:o,info:e,success:r,warning:i,removed:a,saved:c,log:t.log};return s}angular.module("blocks.logger").factory("logger",t),t.$inject=["$log","toastr"]}(),function(){"use strict";function t(){this.config={},this.$get=function(){return{config:this.config}}}function n(t,n,o){function e(t){t.forEach(function(t){t.config.title&&(t.config.ncyBreadcrumb={label:t.config.title.toLowerCase()}),l.state(t.state,t.config)})}function r(){return o.get()}function i(t){var n=null;return r().forEach(function(o){o.name===t&&(n=o)}),n}function a(){c(),s.otherwise("/index/dashboard")}function c(){n.$on("$stateChangeSuccess",function(o,e,r){var i=t.config.title+(e.title?" | "+e.title:"");n.title=i,n.$state=e})}var s=t.config.$urlRouterProvider,l=t.config.$stateProvider,u={configureStates:e,states:r,get:i};return a(),u}angular.module("blocks.router").provider("routehelperConfig",t).factory("routehelper",n),n.$inject=["routehelperConfig","$rootScope","$state"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vdG9zcG9ydGFsLm1vZHVsZS5qcyIsImNvcmUvY29yZS5tb2R1bGUuanMiLCJkYXNoYm9hcmQvZGFzaGJvYXJkLm1vZHVsZS5qcyIsImluZm8vaW5mby5tb2R1bGUuanMiLCJsYXlvdXQvbGF5b3V0Lm1vZHVsZS5qcyIsIm1lZGlhL21lZGlhLm1vZHVsZS5qcyIsIndpZGdldHMvd2lkZ2V0cy5tb2R1bGUuanMiLCJibG9ja3MvZXhjZXB0aW9uL2V4Y2VwdGlvbi5tb2R1bGUuanMiLCJibG9ja3MvbG9nZ2VyL2xvZ2dlci5tb2R1bGUuanMiLCJibG9ja3Mvcm91dGVyL3JvdXRlci5tb2R1bGUuanMiLCJjb3JlL2Jhc2U2NC5qcyIsImNvcmUvY29tbW9uLmpzIiwiYXBwLm1pbi5qcyIsImNvcmUvY29uZmlnLmpzIiwiY29yZS9jb25zdGFudHMuanMiLCJjb3JlL3NvY2lhbC5qcyIsImRhc2hib2FyZC9kYXNoYm9hcmQuY29udHJvbGxlci5qcyIsImRhc2hib2FyZC9kYXNoYm9hcmQucm91dGVzLmpzIiwiaW5mby9jYW1wYWlnbnMuY29udHJvbGxlci5qcyIsImluZm8vaW5mby5yb3V0ZXMuanMiLCJsYXlvdXQvc2hlbGwuY29udHJvbGxlci5qcyIsIm1lZGlhL2dvb2dsZS5wbHVzLmNvbGxlY3Rpb25zLmpzIiwibWVkaWEvbWFpbGNoaW1wLmpzIiwibWVkaWEvbWVkaWEucm91dGVzLmpzIiwibWVkaWEvcGhvdG8uY29udHJvbGxlci5qcyIsIndpZGdldHMvYXBwZWFyLmRpcmVjdGl2ZS5qcyIsIndpZGdldHMvYmx1ci5kaXJlY3RpdmUuanMiLCJ3aWRnZXRzL2ZhbmN5Ym94LmRpcmVjdGl2ZS5qcyIsIndpZGdldHMvbGl2aWNvbi5kaXJlY3RpdmUuanMiLCJ3aWRnZXRzL3BhcmFsYXguZGlyZWN0aXZlLmpzIiwid2lkZ2V0cy9yc3NsaWRlci5kaXJlY3RpdmUuanMiLCJibG9ja3MvZXhjZXB0aW9uL2V4Y2VwdGlvbi1oYW5kbGVyLnByb3ZpZGVyLmpzIiwiYmxvY2tzL2V4Y2VwdGlvbi9leGNlcHRpb24uanMiLCJibG9ja3MvbG9nZ2VyL2xvZ2dlci5qcyIsImJsb2Nrcy9yb3V0ZXIvcm91dGVoZWxwZXIuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsIkJhc2U2NCIsImVuY29kZSIsImlucHV0IiwiY2hyMSIsImNocjIiLCJlbmMxIiwiZW5jMiIsImVuYzMiLCJvdXRwdXQiLCJjaHIzIiwiZW5jNCIsImkiLCJjaGFyQ29kZUF0IiwiaXNOYU4iLCJrZXlTdHIiLCJjaGFyQXQiLCJsZW5ndGgiLCJkZWNvZGUiLCJiYXNlNjR0ZXN0IiwiZXhlYyIsIndpbmRvdyIsImFsZXJ0IiwicmVwbGFjZSIsImluZGV4T2YiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJzZXJ2aWNlIiwiZmFjdG9yeSIsImNvbW1vbiIsIiRxIiwiJHJvb3RTY29wZSIsIiR0aW1lb3V0IiwibG9nZ2VyIiwiJGJyb2FkY2FzdCIsImFwcGx5IiwiYXJndW1lbnRzIiwiaXNOdW1iZXIiLCJ2YWwiLCJ0ZXN0IiwidGV4dENvbnRhaW5zIiwidGV4dCIsInNlYXJjaFRleHQiLCJ0b0xvd2VyQ2FzZSIsIiRpbmplY3QiLCJ0b2FzdHJDb25maWciLCJ0b2FzdHIiLCJvcHRpb25zIiwidGltZU91dCIsImNsb3NlQnV0dG9uIiwicHJvZ3Jlc3NCYXIiLCJwb3NpdGlvbkNsYXNzIiwiY29uZmlndXJlIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJHN0YXRlUHJvdmlkZXIiLCJyb3V0ZWhlbHBlckNvbmZpZ1Byb3ZpZGVyIiwiJGJyZWFkY3J1bWJQcm92aWRlciIsIlJlc3Rhbmd1bGFyUHJvdmlkZXIiLCJBbmFseXRpY3NQcm92aWRlciIsImNvbmZpZ3VyZVJvdXRpbmciLCJjb25maWciLCJ0aXRsZSIsImFwcFRpdGxlIiwiY29uZmlndXJlQnJlYWRjcnVtYiIsInNldE9wdGlvbnMiLCJwcmVmaXhTdGF0ZU5hbWUiLCJ0ZW1wbGF0ZSIsImluY2x1ZGVBYnN0cmFjdCIsImNvbmZpZ3VyZVJlc3Rhbmd1bGFyIiwiYmFzZVVybCIsInNldEJhc2VVcmwiLCJjb25maWd1cmVHb29nbGVBbmFseXRpY3MiLCJzZXRBY2NvdW50Iiwic2V0UGFnZUV2ZW50IiwiYWZ0ZXJWaWV3Q29udGVudExvYWRlZCIsIiRvbiIsImVsZW1lbnQiLCJhbmltYXRlIiwic2Nyb2xsVG9wIiwiY29yZSIsImFwcEVycm9yUHJlZml4IiwidmVyc2lvbiIsInZhbHVlIiwicnVuIiwiQW5hbHl0aWNzIiwiY29uc3RhbnQiLCJtb21lbnQiLCJnYXBpIiwiZmFjZWJvb2tJbml0IiwiJHdpbmRvdyIsImluaXRGYWNlYm9vayIsIkZCIiwiaW5pdCIsImFwcElkIiwiY2hhbm5lbFVybCIsImNvb2tpZSIsInhmYm1sIiwiZmJBc3luY0luaXQiLCJkIiwianMiLCJpZCIsInJlZiIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVFbGVtZW50IiwiYXN5bmMiLCJzcmMiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwiZG9jdW1lbnQiLCJEYXNoYm9hcmRDb250cm9sbGVyIiwiR1BDb2xsZWN0aW9ucyIsIk1haWxDaGltcCIsImFjdGl2YXRlIiwidm0iLCJjb2xsZWN0aW9ucyIsInRha2UiLCJjYW1wYWlnbnMiLCJ0aGVuIiwicmVzcG9uc2UiLCJkYXRhIiwidGhpcyIsImZhY2Vib29rdXJsIiwiY29udHJvbGxlciIsImNvbmZpZ1JvdXRlcyIsInJvdXRlaGVscGVyIiwiY29uZmlndXJlU3RhdGVzIiwiZ2V0U3RhdGVzIiwic3RhdGUiLCJhYnN0cmFjdCIsInVybCIsInZpZXdzIiwibWFpbkAiLCJ0ZW1wbGF0ZVVybCIsImNvbnRlbnRAaW5kZXgiLCJjb250cm9sbGVyQXMiLCJzbGlkZXJAaW5kZXgiLCJDYW1wYWlnbnNDb250cm9sbGVyIiwiY2FtcGFpZ25zU3VjY2VzcyIsImNvbnRlbnRAaW5mbyIsIlNoZWxsQ29udHJvbGxlciIsIiRzdGF0ZSIsImNvbnNvbGUiLCJsb2ciLCJtZW1iZXJDb3VudCIsImNhbXBhaWduX21lbWJlcnMiLCJzdGF0cyIsIm1lbWJlcl9jb3VudCIsImdldCIsIm51bWJlciIsInJlc3VsdCIsInB1c2giLCJuYW1lIiwiaHJlZiIsInByZXZpZXciLCIkaHR0cCIsInBhcmFtcyIsInN1Y2Nlc3MiLCJtZW1iZXJDb3VudFN1Y2Nlc3MiLCJjb250ZW50QG1lZGlhIiwiUGhvdG9Db250cm9sbGVyIiwiYXBwZWFyQW5pbWF0aW9uIiwibGlua0Z1bmMiLCJzY29wZSIsImF0dHJzIiwiYXBwZWFyIiwiZGVsYXkiLCJhcHBlYXJBbmltYXRpb25EZWxheSIsIiQiLCJjc3MiLCJhZGRDbGFzcyIsImhhc0NsYXNzIiwiYmluZCIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwibGluayIsImJsdXIiLCJpbWciLCJJbWFnZSIsInByZXBlbmRCb3giLCJmaW5kIiwiaW1hZ2UiLCJvbmxvYWQiLCJQaXhhc3RpYyIsInByb2Nlc3MiLCJhbW91bnQiLCJwcmVwZW5kIiwiY2FudmFzIiwid2lkdGgiLCJtYXJnaW5MZWZ0IiwibWFyZ2luVG9wIiwiaGVpZ2h0IiwiZmFuY3lib3giLCJuZXh0RWZmZWN0IiwicHJldkVmZmVjdCIsIm9wZW5FZmZlY3QiLCJjbG9zZUVmZmVjdCIsImhlbHBlcnMiLCJvdmVybGF5IiwibG9ja2VkIiwidHlwZSIsInRwbCIsImNsb3NlQnRuIiwibmV4dCIsInByZXYiLCJsaXZpY29uIiwiYWRkTGl2aWNvbiIsInBhcmFsYXgiLCJiZ1Bvc2l0aW9uIiwiJHRoaXNZIiwib2Zmc2V0IiwidG9wIiwiJHdpbmRvd1kiLCJwYWdlWU9mZnNldCIsImJhY2tncm91bmRQb3NpdGlvbiIsInNwZWVkIiwicnNTbGlkZXIiLCJyZXZvbHV0aW9uU2xpZGVyIiwiY2xvc2VzdCIsImJvZHkiLCJ0b3BIZWlnaHQiLCJoZWFkZXJIZWlnaHQiLCJvdXRlckhlaWdodCIsInJldm9sdXRpb24iLCJzdGFydHdpZHRoIiwic3RhcnRoZWlnaHQiLCJoaWRlVGh1bWJzIiwibmF2aWdhdGlvblR5cGUiLCJuYXZpZ2F0aW9uQXJyb3dzIiwibmF2aWdhdGlvbkhBbGlnbiIsIm5hdmlnYXRpb25WQWxpZ24iLCJuYXZpZ2F0aW9uSE9mZnNldCIsIm5hdmlnYXRpb25WT2Zmc2V0IiwiaGlkZVRpbWVyQmFyIiwicGFyZW50IiwicmVtb3ZlQ2xhc3MiLCJvbkhvdmVyU3RvcCIsImV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlciIsInVuZGVmaW5lZCIsIiRnZXQiLCIkcHJvdmlkZSIsImRlY29yYXRvciIsImV4dGVuZEV4Y2VwdGlvbkhhbmRsZXIiLCIkZGVsZWdhdGUiLCJleGNlcHRpb25IYW5kbGVyIiwiZXhjZXB0aW9uIiwiY2F1c2UiLCJlcnJvckRhdGEiLCJtZXNzYWdlIiwiZXJyb3IiLCJwcm92aWRlciIsImNhdGNoZXIiLCJyZWFzb24iLCIkbG9nIiwiaW5mbyIsIndhcm5pbmciLCJ3YXJuIiwicmVtb3ZlZCIsInNhdmVkIiwic2hvd1RvYXN0cyIsInJvdXRlaGVscGVyQ29uZmlnIiwic3RhdGVzIiwiZm9yRWFjaCIsIm5jeUJyZWFkY3J1bWIiLCJsYWJlbCIsInBhdHRlcm4iLCJ1cGRhdGVEb2NUaXRsZSIsIm90aGVyd2lzZSIsImV2ZW50IiwiY3VycmVudCIsInByZXZpb3VzIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUNBLFlBRUFBLFNBQ0FDLE9BQUEsZUFFQSxtQkFDQSxxQkFDQSxzQkFHQSx3QkFDQSxtQkFDQSx5QkNiQUQsUUFDQUMsT0FBQSxvQkFFQSxZQUFBLGFBQUEsYUFHQSxlQUNBLHlCQUNBLGNBQ0EsMkJBR0EsbUJBQ0EsZ0JBQ0Esa0JDZEEsV0FDQSxZQUVBRCxTQUNBQyxPQUFBLCtCQ0pBLFdBQ0EsWUFFQUQsU0FDQUMsT0FBQSwwQkNKQSxXQUNBLFlBRUFELFNBQ0FDLE9BQUEsNEJDSkEsV0FDQSxZQUVBRCxTQUNBQyxPQUFBLDJCQ0pBLFdBQ0EsWUFFQUQsU0FDQUMsT0FBQSw2QkNKQSxXQUNBLFlBRUFELFNBQ0FDLE9BQUEsb0JBQUEscUJDSkEsV0FDQSxZQUVBRCxTQUNBQyxPQUFBLHVCQ0pBLFdB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QUE3RCxTQUtBLFFBQUFpRSxHQUFBdUksRUFBQXJPLEVBQUE4RyxHQWVBLFFBQUFmLEdBQUF1SSxHQUNBQSxFQUFBQyxRQUFBLFNBQUF0SSxHQUNBQSxFQUFBcEUsT0FBQUMsUUFDQW1FLEVBQUFwRSxPQUFBMk0sZUFDQUMsTUFBQXhJLEVBQUFwRSxPQUFBQyxNQUFBbEIsZ0JBSUFXLEVBQUEwRSxNQUFBQSxFQUFBQSxNQUFBQSxFQUFBcEUsVUFJQSxRQUFBeU0sS0FDQSxNQUFBeEgsR0FBQU8sTUFHQSxRQUFBQSxHQUFBcUgsR0FDQSxHQUFBbkgsR0FBQSxJQU1BLE9BTEErRyxLQUFBQyxRQUFBLFNBQUF0SSxHQUNBQSxFQUFBd0IsT0FBQWlILElBQ0FuSCxFQUFBdEIsS0FHQXNCLEVBSUEsUUFBQTFELEtBQ0E4SyxJQUNBck4sRUFBQXNOLFVBQUEsb0JBR0EsUUFBQUQsS0FDQTNPLEVBQUE0QyxJQUFBLHNCQUNBLFNBQUFpTSxFQUFBQyxFQUFBQyxHQUNBLEdBQUFqTixHQUFBdU0sRUFBQXhNLE9BQUFDLE9BQUFnTixFQUFBaE4sTUFBQSxNQUFBZ04sRUFBQWhOLE1BQUEsR0FDQTlCLEdBQUE4QixNQUFBQSxFQUNBOUIsRUFBQThHLE9BQUFnSSxJQW5EQSxHQUFBeE4sR0FBQStNLEVBQUF4TSxPQUFBUCxtQkFDQUMsRUFBQThNLEVBQUF4TSxPQUFBTixlQUVBM0IsR0FDQW1HLGdCQUFBQSxFQUNBdUksT0FBQUEsRUFDQWpILElBQUFBLEVBS0EsT0FGQXhELEtBRUFqRSxFQTlCQTVCLFFBQ0FDLE9BQUEsaUJBQ0EwUCxTQUFBLG9CQUFBVSxHQUNBeE8sUUFBQSxjQUFBaUcsR0FFQUEsRUFBQWpGLFNBQUEsb0JBQUEsYUFBQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsJywgW1xuICAgICAgICAgICAgLy9zaGFyZWQgbW9kdWxlc1xuICAgICAgICAgICAgJ25vdG9zcG9ydGFsLmNvcmUnLFxuICAgICAgICAgICAgJ25vdG9zcG9ydGFsLmxheW91dCcsXG4gICAgICAgICAgICAnbm90b3Nwb3J0YWwud2lkZ2V0cycsXG5cbiAgICAgICAgICAgIC8vYXBwIG1vZHVsZXNcbiAgICAgICAgICAgICdub3Rvc3BvcnRhbC5kYXNoYm9hcmQnLFxuICAgICAgICAgICAgJ25vdG9zcG9ydGFsLmluZm8nLFxuICAgICAgICAgICAgJ25vdG9zcG9ydGFsLm1lZGlhJ1xuICAgICAgICBdKTtcbn0pKCk7IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLmNvcmUnLCBbXG4gICAgICAgIC8vQW5ndWxhclxuICAgICAgICAnbmdBbmltYXRlJywgJ25nU2FuaXRpemUnLCAnbmdSZXNvdXJjZScsXG5cbiAgICAgICAgLy8zcmQgcGFydHlcbiAgICAgICAgJ3VpLmJvb3RzdHJhcCcsXG4gICAgICAgICduY3ktYW5ndWxhci1icmVhZGNydW1iJyxcbiAgICAgICAgJ3Jlc3Rhbmd1bGFyJyxcbiAgICAgICAgJ2FuZ3VsYXItZ29vZ2xlLWFuYWx5dGljcycsXG5cbiAgICAgICAgLy9jcm9zcyBhcHAgbW9kdWxlc1xuICAgICAgICAnYmxvY2tzLmV4Y2VwdGlvbicsXG4gICAgICAgICdibG9ja3MubG9nZ2VyJyxcbiAgICAgICAgJ2Jsb2Nrcy5yb3V0ZXInXG4gICAgXSk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLmRhc2hib2FyZCcsIFtdKTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLmluZm8nLCBbXSk7XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdub3Rvc3BvcnRhbC5sYXlvdXQnLCBbXSk7XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdub3Rvc3BvcnRhbC5tZWRpYScsIFtdKTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLndpZGdldHMnLCBbXSk7XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdibG9ja3MuZXhjZXB0aW9uJywgWydibG9ja3MubG9nZ2VyJ10pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYmxvY2tzLmxvZ2dlcicsIFtdKTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2Jsb2Nrcy5yb3V0ZXInLCBbXG4gICAgICAgICAgICAndWkucm91dGVyJ1xuICAgICAgICBdKTtcbn0pKCk7IiwiLyoqXG4gKiBub3Rvc3BvcnRhbC5jb3JlXG4gKiBGQUNUT1JZOiBCYXNlNjRcbiAqL1xuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbm90b3Nwb3J0YWwuY29yZScpXG4gICAgICAgIC5mYWN0b3J5KCdCYXNlNjQnLCBCYXNlNjQpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gQmFzZTY0KCkge1xuICAgICAgICB2YXIga2V5U3RyID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICAgICAgICBlbmNvZGU6IGVuY29kZSxcbiAgICAgICAgICAgIGRlY29kZTogZGVjb2RlXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VydmljZTtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9IFwiXCI7XG4gICAgICAgICAgICB2YXIgY2hyMSwgY2hyMiwgY2hyMyA9IFwiXCI7XG4gICAgICAgICAgICB2YXIgZW5jMSwgZW5jMiwgZW5jMywgZW5jNCA9IFwiXCI7XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG5cbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBjaHIxID0gaW5wdXQuY2hhckNvZGVBdChpKyspO1xuICAgICAgICAgICAgICAgIGNocjIgPSBpbnB1dC5jaGFyQ29kZUF0KGkrKyk7XG4gICAgICAgICAgICAgICAgY2hyMyA9IGlucHV0LmNoYXJDb2RlQXQoaSsrKTtcblxuICAgICAgICAgICAgICAgIGVuYzEgPSBjaHIxID4+IDI7XG4gICAgICAgICAgICAgICAgZW5jMiA9ICgoY2hyMSAmIDMpIDw8IDQpIHwgKGNocjIgPj4gNCk7XG4gICAgICAgICAgICAgICAgZW5jMyA9ICgoY2hyMiAmIDE1KSA8PCAyKSB8IChjaHIzID4+IDYpO1xuICAgICAgICAgICAgICAgIGVuYzQgPSBjaHIzICYgNjM7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4oY2hyMikpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5jMyA9IGVuYzQgPSA2NDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzTmFOKGNocjMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuYzQgPSA2NDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQgK1xuICAgICAgICAgICAgICAgICAgICBrZXlTdHIuY2hhckF0KGVuYzEpICtcbiAgICAgICAgICAgICAgICAgICAga2V5U3RyLmNoYXJBdChlbmMyKSArXG4gICAgICAgICAgICAgICAgICAgIGtleVN0ci5jaGFyQXQoZW5jMykgK1xuICAgICAgICAgICAgICAgICAgICBrZXlTdHIuY2hhckF0KGVuYzQpO1xuICAgICAgICAgICAgICAgIGNocjEgPSBjaHIyID0gY2hyMyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZW5jMSA9IGVuYzIgPSBlbmMzID0gZW5jNCA9IFwiXCI7XG4gICAgICAgICAgICB9IHdoaWxlIChpIDwgaW5wdXQubGVuZ3RoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9IFwiXCI7XG4gICAgICAgICAgICB2YXIgY2hyMSwgY2hyMiwgY2hyMyA9IFwiXCI7XG4gICAgICAgICAgICB2YXIgZW5jMSwgZW5jMiwgZW5jMywgZW5jNCA9IFwiXCI7XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG5cbiAgICAgICAgICAgIC8vIHJlbW92ZSBhbGwgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgQS1aLCBhLXosIDAtOSwgKywgLywgb3IgPVxuICAgICAgICAgICAgdmFyIGJhc2U2NHRlc3QgPSAvW15BLVphLXowLTlcXCtcXC9cXD1dL2c7XG4gICAgICAgICAgICBpZiAoYmFzZTY0dGVzdC5leGVjKGlucHV0KSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5hbGVydChcIlRoZXJlIHdlcmUgaW52YWxpZCBiYXNlNjQgY2hhcmFjdGVycyBpbiB0aGUgaW5wdXQgdGV4dC5cXG5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwiVmFsaWQgYmFzZTY0IGNoYXJhY3RlcnMgYXJlIEEtWiwgYS16LCAwLTksICcrJywgJy8nLGFuZCAnPSdcXG5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwiRXhwZWN0IGVycm9ycyBpbiBkZWNvZGluZy5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoL1teQS1aYS16MC05XFwrXFwvXFw9XS9nLCBcIlwiKTtcblxuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGVuYzEgPSBrZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7XG4gICAgICAgICAgICAgICAgZW5jMiA9IGtleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtcbiAgICAgICAgICAgICAgICBlbmMzID0ga2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO1xuICAgICAgICAgICAgICAgIGVuYzQgPSBrZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7XG5cbiAgICAgICAgICAgICAgICBjaHIxID0gKGVuYzEgPDwgMikgfCAoZW5jMiA+PiA0KTtcbiAgICAgICAgICAgICAgICBjaHIyID0gKChlbmMyICYgMTUpIDw8IDQpIHwgKGVuYzMgPj4gMik7XG4gICAgICAgICAgICAgICAgY2hyMyA9ICgoZW5jMyAmIDMpIDw8IDYpIHwgZW5jNDtcblxuICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dCArIFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyMSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZW5jMyAhPSA2NCkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocjIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZW5jNCAhPSA2NCkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocjMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNocjEgPSBjaHIyID0gY2hyMyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZW5jMSA9IGVuYzIgPSBlbmMzID0gZW5jNCA9IFwiXCI7XG5cbiAgICAgICAgICAgIH0gd2hpbGUgKGkgPCBpbnB1dC5sZW5ndGgpO1xuXG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICB9XG4gICAgfTtcbn0pKCk7IiwiLyoqXG4gKiBub3Rvc3BvcnRhbC5jb3JlXG4gKiBGQUNUT1JZOiBjb21tb25cbiAqL1xuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbm90b3Nwb3J0YWwuY29yZScpXG4gICAgICAgIC5mYWN0b3J5KCdjb21tb24nLCBjb21tb24pO1xuXG4gICAgZnVuY3Rpb24gY29tbW9uKCRxLCAkcm9vdFNjb3BlLCAkdGltZW91dCwgbG9nZ2VyKSB7XG5cbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICAgICAgICAvLyBjb21tb24gYW5ndWxhciBkZXBlbmRlbmNpZXNcbiAgICAgICAgICAgICRicm9hZGNhc3Q6ICRicm9hZGNhc3QsXG4gICAgICAgICAgICAkcTogJHEsXG4gICAgICAgICAgICAkdGltZW91dDogJHRpbWVvdXQsXG4gICAgICAgICAgICAvLyBnZW5lcmljXG4gICAgICAgICAgICBpc051bWJlcjogaXNOdW1iZXIsXG4gICAgICAgICAgICBsb2dnZXI6IGxvZ2dlcixcbiAgICAgICAgICAgIHRleHRDb250YWluczogdGV4dENvbnRhaW5zXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VydmljZTtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gJGJyb2FkY2FzdCgpIHtcbiAgICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlLiRicm9hZGNhc3QuYXBwbHkoJHJvb3RTY29wZSwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gICAgICAgICAgICAvLyBuZWdhdGl2ZSBvciBwb3NpdGl2ZVxuICAgICAgICAgICAgcmV0dXJuICgvXlstXT9cXGQrJC8pLnRlc3QodmFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHRleHRDb250YWlucyh0ZXh0LCBzZWFyY2hUZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGV4dCAmJiAtMSAhPT0gdGV4dC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2VhcmNoVGV4dC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7IixudWxsLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBjb3JlID0gYW5ndWxhci5tb2R1bGUoJ25vdG9zcG9ydGFsLmNvcmUnKTtcblxuICAgIGNvcmUuY29uZmlnKHRvYXN0ckNvbmZpZyk7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiB0b2FzdHJDb25maWcodG9hc3RyKSB7XG4gICAgICAgIHRvYXN0ci5vcHRpb25zLnRpbWVPdXQgPSA0MDAwO1xuICAgICAgICB0b2FzdHIub3B0aW9ucy5jbG9zZUJ1dHRvbiA9IHRydWU7XG4gICAgICAgIHRvYXN0ci5vcHRpb25zLnByb2dyZXNzQmFyID0gdHJ1ZTtcbiAgICAgICAgdG9hc3RyLm9wdGlvbnMucG9zaXRpb25DbGFzcyA9ICd0b2FzdC1ib3R0b20tcmlnaHQnO1xuICAgIH1cblxuICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgIGFwcEVycm9yUHJlZml4OiAnW0ZvdXRdICcsXG4gICAgICAgIGFwcFRpdGxlOiAnVkJTIERlIEtsaW10b3JlbicsXG4gICAgICAgIHZlcnNpb246ICcxLjAuMCdcbiAgICB9O1xuXG4gICAgY29yZS52YWx1ZSgnY29uZmlnJywgY29uZmlnKTtcblxuICAgIGNvcmUuY29uZmlnKGNvbmZpZ3VyZSk7XG5cbiAgICBjb3JlLnJ1bihhZnRlclZpZXdDb250ZW50TG9hZGVkKTtcblxuICAgIGNvcmUucnVuKGZ1bmN0aW9uKEFuYWx5dGljcykge30pOyAvL0luamVjdCBvbmNlIGZvciBhdXRvbWF0aWMgcGFnZS10cmFja2luZ1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY29uZmlndXJlKCR1cmxSb3V0ZXJQcm92aWRlciwgJHN0YXRlUHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgIHJvdXRlaGVscGVyQ29uZmlnUHJvdmlkZXIsICRicmVhZGNydW1iUHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgIFJlc3Rhbmd1bGFyUHJvdmlkZXIsIEFuYWx5dGljc1Byb3ZpZGVyKSB7XG5cbiAgICAgICAgY29uZmlndXJlUm91dGluZygpO1xuICAgICAgICBjb25maWd1cmVCcmVhZGNydW1iKCk7XG5cbiAgICAgICAgY29uZmlndXJlUmVzdGFuZ3VsYXIoKTtcbiAgICAgICAgY29uZmlndXJlR29vZ2xlQW5hbHl0aWNzKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gY29uZmlndXJlUm91dGluZygpIHtcbiAgICAgICAgICAgIHJvdXRlaGVscGVyQ29uZmlnUHJvdmlkZXIuY29uZmlnLiR1cmxSb3V0ZXJQcm92aWRlciA9ICR1cmxSb3V0ZXJQcm92aWRlcjtcbiAgICAgICAgICAgIHJvdXRlaGVscGVyQ29uZmlnUHJvdmlkZXIuY29uZmlnLiRzdGF0ZVByb3ZpZGVyID0gJHN0YXRlUHJvdmlkZXI7XG5cbiAgICAgICAgICAgIHJvdXRlaGVscGVyQ29uZmlnUHJvdmlkZXIuY29uZmlnLnRpdGxlID0gY29uZmlnLmFwcFRpdGxlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY29uZmlndXJlQnJlYWRjcnVtYigpIHtcbiAgICAgICAgICAgICRicmVhZGNydW1iUHJvdmlkZXIuc2V0T3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgcHJlZml4U3RhdGVOYW1lOiAnaW5kZXgnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnYm9vdHN0cmFwMycsXG4gICAgICAgICAgICAgICAgaW5jbHVkZUFic3RyYWN0OiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNvbmZpZ3VyZVJlc3Rhbmd1bGFyKCkge1xuICAgICAgICAgICAgdmFyIGJhc2VVcmwgPSAnL2FwaSc7XG5cbiAgICAgICAgICAgIFJlc3Rhbmd1bGFyUHJvdmlkZXIuc2V0QmFzZVVybChiYXNlVXJsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNvbmZpZ3VyZUdvb2dsZUFuYWx5dGljcygpIHtcbiAgICAgICAgICAgIC8vIFNldCBhIHNpbmdsZSBhY2NvdW50XG4gICAgICAgICAgICBBbmFseXRpY3NQcm92aWRlci5zZXRBY2NvdW50KCdVQS0yMDU5MzQyNi0xJyk7XG4gICAgICAgICAgICBBbmFseXRpY3NQcm92aWRlci5zZXRQYWdlRXZlbnQoJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGFmdGVyVmlld0NvbnRlbnRMb2FkZWQoJHJvb3RTY29wZSkge1xuICAgICAgICAkcm9vdFNjb3BlLiRvbignJHZpZXdDb250ZW50TG9hZGVkJyxmdW5jdGlvbigpe1xuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCdodG1sLCBib2R5JykuYW5pbWF0ZSh7IHNjcm9sbFRvcDogMCB9LCAyMDApO1xuICAgICAgICB9KVxuICAgIH1cblxufSkoKTsiLCIvKiBnbG9iYWwgdG9hc3RyOmZhbHNlLCBtb21lbnQ6ZmFsc2UgKi9cbihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLmNvcmUnKVxuICAgICAgICAuY29uc3RhbnQoJ3RvYXN0cicsIHRvYXN0cilcbiAgICAgICAgLmNvbnN0YW50KCdtb21lbnQnLCBtb21lbnQpXG4gICAgICAgIC5jb25zdGFudCgnZ2FwaScsIGdhcGkpO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdub3Rvc3BvcnRhbC5jb3JlJylcbiAgICAgICAgLnJ1bihmYWNlYm9va0luaXQpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gZmFjZWJvb2tJbml0KCR3aW5kb3csIGNvbW1vbikge1xuICAgICAgICAvL3doZW4gZmFjZWJvb2sgaXMgaW5pdGlhbGl6ZWRcbiAgICAgICAgLy93ZSBjYW4gcmVuZGVyIEdvb2dsZSsgdG9vXG4gICAgICAgICR3aW5kb3cuZmJBc3luY0luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbml0RmFjZWJvb2soKTtcbiAgICAgICAgICAgIGNvbW1vbi4kYnJvYWRjYXN0KCdmYi5pbml0Jyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdEZhY2Vib29rKCkge1xuICAgICAgICAgICAgRkIuaW5pdCh7XG4gICAgICAgICAgICAgICAgYXBwSWQ6ICc0NjYyODAzNTAyMDE5NjAnLFxuICAgICAgICAgICAgICAgIGNoYW5uZWxVcmw6ICdqcy9tb2R1bGVzL2NvcmUvZmItY2hhbm5lbC5odG1sJyxcbiAgICAgICAgICAgICAgICBjb29raWU6IHRydWUsXG4gICAgICAgICAgICAgICAgeGZibWw6IHRydWUsXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogJ3YyLjMnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgLy8gbG9hZCB0aGUgRmFjZWJvb2sgamF2YXNjcmlwdCBTREtcblxuICAgICAgICAgICAgdmFyIGpzLFxuICAgICAgICAgICAgICAgIGlkID0gJ2ZhY2Vib29rLWpzc2RrJyxcbiAgICAgICAgICAgICAgICByZWYgPSBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcblxuICAgICAgICAgICAgaWYgKGQuZ2V0RWxlbWVudEJ5SWQoaWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBqcyA9IGQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgICAgICBqcy5pZCA9IGlkO1xuICAgICAgICAgICAganMuYXN5bmMgPSB0cnVlO1xuICAgICAgICAgICAganMuc3JjID0gXCIvL2Nvbm5lY3QuZmFjZWJvb2submV0L2VuX1VTL3Nkay5qc1wiO1xuXG4gICAgICAgICAgICByZWYucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoanMsIHJlZik7XG5cbiAgICAgICAgfShkb2N1bWVudCkpO1xuICAgIH1cbn0pKCk7IiwiLyoqXG4gKiBub3Rvc3BvcnRhbC5kYXNoYm9hcmRcbiAqIENPTlRST0xMRVI6IERhc2hib2FyZENvbnRyb2xsZXJcbiAqL1xuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLmRhc2hib2FyZCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdEYXNoYm9hcmRDb250cm9sbGVyJywgRGFzaGJvYXJkQ29udHJvbGxlcik7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBEYXNoYm9hcmRDb250cm9sbGVyKEdQQ29sbGVjdGlvbnMsIE1haWxDaGltcCkge1xuICAgICAgICAvKmpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgICAgdm0uZmFjZWJvb2t1cmwgPSAnaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3Zic2Rla2xpbXRvcmVuJztcbiAgICAgICAgdm0uY29sbGVjdGlvbnMgPSBbXTtcbiAgICAgICAgdm0uY2FtcGFpZ25zID0gW107XG5cbiAgICAgICAgYWN0aXZhdGUoKTtcbiAgICAgICAgLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgIHZtLmNvbGxlY3Rpb25zID0gR1BDb2xsZWN0aW9ucy50YWtlKDQpO1xuXG4gICAgICAgICAgICBNYWlsQ2hpbXAuY2FtcGFpZ25zKDMpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB2bS5jYW1wYWlnbnMgPSByZXNwb25zZS5kYXRhLmNhbXBhaWducztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufSkoKTsiLCIvKipcbiAqIFJPVVRFUzogbm90b3Nwb3J0YWwuZGFzaGJvYXJkXG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdub3Rvc3BvcnRhbC5kYXNoYm9hcmQnKVxuICAgICAgICAucnVuKGNvbmZpZ1JvdXRlcyk7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBjb25maWdSb3V0ZXMocm91dGVoZWxwZXIpIHtcbiAgICAgICAgcm91dGVoZWxwZXIuY29uZmlndXJlU3RhdGVzKGdldFN0YXRlcygpKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0U3RhdGVzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRlOiAnaW5kZXgnLFxuICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2luZGV4JyxcbiAgICAgICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdtYWluQCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2pzL21vZHVsZXMvbGF5b3V0L21haW4uaHRtbCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdzdGFydCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRlOiAnaW5kZXguZGFzaGJvYXJkJyxcbiAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2Rhc2hib2FyZCcsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnY29udGVudEBpbmRleCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2pzL21vZHVsZXMvZGFzaGJvYXJkL2Rhc2hib2FyZC5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnRGFzaGJvYXJkQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3NsaWRlckBpbmRleCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2pzL21vZHVsZXMvZGFzaGJvYXJkL3NsaWRlci5odG1sJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0Rhc2hib2FyZCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgfTtcbn0pKCk7IiwiLyoqXG4gKiBub3Rvc3BvcnRhbC5pbmZvXG4gKiBDT05UUk9MTEVSOiBDYW1wYWlnbnNDb250cm9sbGVyXG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdub3Rvc3BvcnRhbC5pbmZvJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0NhbXBhaWduc0NvbnRyb2xsZXInLCBDYW1wYWlnbnNDb250cm9sbGVyKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIENhbXBhaWduc0NvbnRyb2xsZXIoTWFpbENoaW1wKSB7XG4gICAgICAgIC8qanNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgICB2bS5jYW1wYWlnbnMgPSBbXTtcblxuICAgICAgICBhY3RpdmF0ZSgpO1xuICAgICAgICAvLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgIE1haWxDaGltcC5jYW1wYWlnbnMoKS50aGVuKGNhbXBhaWduc1N1Y2Nlc3MpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYW1wYWlnbnNTdWNjZXNzKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdm0uY2FtcGFpZ25zID0gcmVzcG9uc2UuZGF0YS5jYW1wYWlnbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgfVxufSkoKTsiLCIvKipcbiAqIFJPVVRFUzogbm90b3Nwb3J0YWwuaW5mb1xuICovXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbm90b3Nwb3J0YWwuaW5mbycpXG4gICAgICAgIC5ydW4oY29uZmlnUm91dGVzKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGNvbmZpZ1JvdXRlcyhyb3V0ZWhlbHBlcikge1xuICAgICAgICByb3V0ZWhlbHBlci5jb25maWd1cmVTdGF0ZXMoZ2V0U3RhdGVzKCkpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRTdGF0ZXMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGU6ICdpbmZvJyxcbiAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9pbmZvJyxcbiAgICAgICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdtYWluQCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2pzL21vZHVsZXMvbGF5b3V0L21haW4uaHRtbCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdJbmZvJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGU6ICdpbmZvLmNvbnRhY3QnLFxuICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvY29udGFjdCcsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnY29udGVudEBpbmZvJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnanMvbW9kdWxlcy9pbmZvL2NvbnRhY3QuaHRtbCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdDb250YWN0J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGU6ICdpbmZvLmFib3V0JyxcbiAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2Fib3V0JyxcbiAgICAgICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb250ZW50QGluZm8nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdqcy9tb2R1bGVzL2luZm8vYWJvdXQuaHRtbCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdPdmVyIG9uemUgc2Nob29sJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGU6ICdpbmZvLmNhcmUnLFxuICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvY2FyZScsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnY29udGVudEBpbmZvJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnanMvbW9kdWxlcy9pbmZvL2NhcmUuaHRtbCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdab3JnIG9wIG9uemUgc2Nob29sJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGU6ICdpbmZvLmNhbXBhaWducycsXG4gICAgICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9jYW1wYWlnbnMnLFxuICAgICAgICAgICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnRAaW5mbyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2pzL21vZHVsZXMvaW5mby9jYW1wYWlnbnMuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NhbXBhaWduc0NvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ05pZXV3c2JyaWV2ZW4nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgIH07XG59KSgpOyIsIi8qKlxuICogbm90b3Nwb3J0YWwubGF5b3V0XG4gKiBDT05UUk9MTEVSOiBTaGVsbENvbnRyb2xsZXJcbiAqL1xuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLmxheW91dCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdTaGVsbENvbnRyb2xsZXInLCBTaGVsbENvbnRyb2xsZXIpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gU2hlbGxDb250cm9sbGVyKE1haWxDaGltcCwgJHN0YXRlKSB7XG4gICAgICAgIC8qanNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgIHZtLmNhbXBhaWduX21lbWJlcnMgPSAwO1xuICAgICAgIC8vIHZtLmhpZGVCcmVhZGNydW1iID0gJHN0YXRlLmM7XG5cbiAgICAgICAgYWN0aXZhdGUoKTtcbiAgICAgICAgLy8vLy8vLy8vLy8vL1xuXG5cbiAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygkc3RhdGUpO1xuICAgICAgICAgICAgTWFpbENoaW1wLm1lbWJlckNvdW50KCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHZtLmNhbXBhaWduX21lbWJlcnMgPSByZXNwb25zZS5kYXRhLnN0YXRzLm1lbWJlcl9jb3VudDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cblxuICAgIH1cblxuXG59KSgpOyIsIi8qKlxuICogbm90b3Nwb3J0YWwubWVkaWFcbiAqIEZBQ1RPUlk6IEdQQ29sbGVjdGlvbnNcbiAqL1xuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbm90b3Nwb3J0YWwubWVkaWEnKVxuICAgICAgICAuZmFjdG9yeSgnR1BDb2xsZWN0aW9ucycsIEdQQ29sbGVjdGlvbnMpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gR1BDb2xsZWN0aW9ucygpIHtcblxuICAgICAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgICAgICAgIGdldDogZ2V0LFxuICAgICAgICAgICAgdGFrZTogdGFrZVxuICAgICAgICB9XG5cbiAgICAgICAgLyp2YXIgY29sbGVjdGlvbnMgPSBbXG4gICAgICAgICAnaHR0cHM6Ly9wbHVzLmdvb2dsZS5jb20vK1ZCU0RFS2xpbXRvcmVuSmFiYmVrZS9wb3N0cy8yTlZaaVB3UXd1aycsXG4gICAgICAgICAnaHR0cHM6Ly9wbHVzLmdvb2dsZS5jb20vK1ZCU0RFS2xpbXRvcmVuSmFiYmVrZS9wb3N0cy9SWUNMaWpSVjZvWScsXG4gICAgICAgICAnaHR0cHM6Ly9wbHVzLmdvb2dsZS5jb20vK1ZCU0RFS2xpbXRvcmVuSmFiYmVrZS9wb3N0cy85SzFuVURUZlFSTCdcbiAgICAgICAgIF07Ki9cbiAgICAgICAgdmFyIGNvbGxlY3Rpb25zID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICcyMDE1LTIwMTYnLFxuICAgICAgICAgICAgICAgIGhyZWY6ICdodHRwczovL3BsdXMuZ29vZ2xlLmNvbS9iLzEwMzQwNjEyMzY3MTk0MjUyOTY2MC9jb2xsZWN0aW9uL3NZTGEzJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnMjAxNC0yMDE1JyxcbiAgICAgICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9wbHVzLmdvb2dsZS5jb20vYi8xMDM0MDYxMjM2NzE5NDI1Mjk2NjAvY29sbGVjdGlvbi9VNWFhMycsXG4gICAgICAgICAgICAgICAgcHJldmlldzogJ2h0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS8tV3VRUllDZW5QOHcvVmVsc3ZyR0wtZkkvQUFBQUFBQUFBcUkvcmo2SVQwZ1BKV00vdzY0MC1oNDgwLXAvRFNDTjMwMjguSlBHJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnMjAxMy0yMDE0JyxcbiAgICAgICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9wbHVzLmdvb2dsZS5jb20vYi8xMDM0MDYxMjM2NzE5NDI1Mjk2NjAvY29sbGVjdGlvbi9Fb05QMicsXG4gICAgICAgICAgICAgICAgcHJldmlldzogJ2h0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS8tWHVOYzh6Y0s2Y2cvVmVseWdXaGZLVUkvQUFBQUFBQUFBdlEvOEVaeldCRkJnZEEvdzc3Ny1oNTgzLW5vL0lNR18yNzg5LkpQRydcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25zO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdGFrZShudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChpIDwgbnVtYmVyICYmIGkgPCBjb2xsZWN0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjb2xsZWN0aW9uc1tpXSk7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7IiwiLyoqXG4gKiBub3Rvc3BvcnRhbC5tZWRpYVxuICogRkFDVE9SWTogTWFpbENoaW1wXG4gKi9cblxuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLm1lZGlhJylcbiAgICAgICAgLmZhY3RvcnkoJ01haWxDaGltcCcsIE1haWxDaGltcCk7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBNYWlsQ2hpbXAoJGh0dHAsICRxKSB7XG4gICAgICAgIHZhciBjYW1wYWlnbnNfY2FjaGUgPSBudWxsO1xuICAgICAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgICAgICAgIGNhbXBhaWduczogY2FtcGFpZ25zLFxuICAgICAgICAgICAgbWVtYmVyQ291bnQ6IG1lbWJlckNvdW50XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIGNhbXBhaWducyh0YWtlKSB7XG5cblxuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9tYWlsY2hpbXAvY2FtcGFpZ25zJywge3BhcmFtczoge3Rha2U6IHRha2V9fSlcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhjYW1wYWlnbnNTdWNjZXNzKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY2FtcGFpZ25zU3VjY2VzcyhyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbWVtYmVyQ291bnQoKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL21haWxjaGltcC9tZW1iZXJfY291bnQnKVxuICAgICAgICAgICAgICAgIC5zdWNjZXNzKG1lbWJlckNvdW50U3VjY2Vzcyk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG1lbWJlckNvdW50U3VjY2VzcyhyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSkoKTsiLCIvKipcbiAqIFJPVVRFUzogbm90b3Nwb3J0YWwuaW5mb1xuICovXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbm90b3Nwb3J0YWwuaW5mbycpXG4gICAgICAgIC5ydW4oY29uZmlnUm91dGVzKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGNvbmZpZ1JvdXRlcyhyb3V0ZWhlbHBlcikge1xuICAgICAgICByb3V0ZWhlbHBlci5jb25maWd1cmVTdGF0ZXMoZ2V0U3RhdGVzKCkpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRTdGF0ZXMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGU6ICdtZWRpYScsXG4gICAgICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvbWVkaWEnLFxuICAgICAgICAgICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ21haW5AJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnanMvbW9kdWxlcy9sYXlvdXQvbWFpbi5odG1sJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ2luIGJlZWxkJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGU6ICdtZWRpYS5waG90b3MnLFxuICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvcGhvdG9zJyxcbiAgICAgICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb250ZW50QG1lZGlhJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnanMvbW9kdWxlcy9tZWRpYS9waG90b3MuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1Bob3RvQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnZm90b1xcJ3MnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgIH07XG59KSgpOyIsIi8qKlxuICogbm90b3Nwb3J0YWwubWVkaWFcbiAqIENPTlRST0xMRVI6IFBob3RvQ29udHJvbGxlclxuICovXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbm90b3Nwb3J0YWwubWVkaWEnKVxuICAgICAgICAuY29udHJvbGxlcignUGhvdG9Db250cm9sbGVyJywgUGhvdG9Db250cm9sbGVyKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIFBob3RvQ29udHJvbGxlcihHUENvbGxlY3Rpb25zKSB7XG4gICAgICAgIC8qanNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgICB2bS5jb2xsZWN0aW9ucyA9IFtdO1xuXG5cbiAgICAgICAgYWN0aXZhdGUoKTtcblxuICAgICAgICAvLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICAgICAgICB2bS5jb2xsZWN0aW9ucyA9IEdQQ29sbGVjdGlvbnMuZ2V0KCk7XG4gICAgICAgIH1cbiAgICB9XG59KSgpOyIsIi8qKlxuICogbm90b3Nwb3J0YWwud2lkZ2V0c1xuICogRElSRUNUSVZFOiBhcHBlYXJBbmltYXRpb25cbiAqL1xuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLndpZGdldHMnKVxuICAgICAgICAuZGlyZWN0aXZlKCdhcHBlYXJBbmltYXRpb24nLCBhcHBlYXJBbmltYXRpb24pO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gYXBwZWFyQW5pbWF0aW9uKCkge1xuICAgICAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIGxpbms6IGxpbmtGdW5jXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJ2JvZHknKS5oYXNDbGFzcygnbm8tY3NzdHJhbnNpdGlvbnMnKSkge1xuICAgICAgICAgICAgICAgICQoZWxlbWVudCkuYmluZCgnYXBwZWFyJywgYXBwZWFyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGFwcGVhcigpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVsYXkgPSBhdHRycy5hcHBlYXJBbmltYXRpb25EZWxheSB8fCAxO1xuICAgICAgICAgICAgICAgIGlmIChkZWxheSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5jc3MoJ2FuaW1hdGlvbi1kZWxheScsIGRlbGF5ICsgJ21zJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICQoZWxlbWVudCkuYWRkQ2xhc3MoJ2FuaW1hdGVkJykuYWRkQ2xhc3MoYXR0cnMuYXBwZWFyQW5pbWF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0pKCk7XG5cbiIsIi8qKlxuICogbm90b3Nwb3J0YWwud2lkZ2V0c1xuICogRElSRUNUSVZFOiBibHVyXG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdub3Rvc3BvcnRhbC53aWRnZXRzJylcbiAgICAgICAgLmRpcmVjdGl2ZSgnYmx1cicsIGJsdXIpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gYmx1cigkdGltZW91dCkge1xuICAgICAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIGxpbms6IGxpbmtGdW5jXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnZndiLWJnIGZ3Yi1ibHVyJyk7XG5cbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKSxcbiAgICAgICAgICAgICAgICAgICAgcHJlcGVuZEJveCA9ICc8ZGl2IGNsYXNzPVwiYmx1ci1ib3hcIi8+JztcblxuICAgICAgICAgICAgICAgIGlmICghZWxlbWVudC5maW5kKCdjYW52YXMnKS5sZW5ndGgpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cnMuaW1hZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zcmMgPSBhdHRycy5pbWFnZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmNzcygnYmFja2dyb3VuZC1pbWFnZScpICE9PSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zcmMgPSBlbGVtZW50LmNzcygnYmFja2dyb3VuZC1pbWFnZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoJ3VybCgnLCAnJykucmVwbGFjZSgnKScsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJywgJ25vbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBQaXhhc3RpYy5wcm9jZXNzKGltZywgJ2JsdXJmYXN0Jywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudDogYXR0cnMuYW1vdW50IHx8IDJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLnByZXBlbmQocHJlcGVuZEJveClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCcuYmx1ci1ib3gnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnByZXBlbmQoaW1nKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYW52YXMgPSBlbGVtZW50LmZpbmQoJ2NhbnZhcycpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYW52YXMud2lkdGgoKSA9PSBlbGVtZW50LndpZHRoKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luVG9wOiAtKChjYW52YXMuaGVpZ2h0KCkgLSBlbGVtZW50LmhlaWdodCgpKSAvIDIpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAtKChjYW52YXMud2lkdGgoKSAtIGVsZW1lbnQud2lkdGgoKSkgLyAyKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ2JsdXItbG9hZCcpO1xuICAgICAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG59KSgpO1xuXG4iLCIvKipcbiAqIG5vdG9zcG9ydGFsLndpZGdldHNcbiAqIERJUkVDVElWRTogZmFuY3lib3hcbiAqL1xuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLndpZGdldHMnKVxuICAgICAgICAuZGlyZWN0aXZlKCdmYW5jeWJveCcsIGZhbmN5Ym94KTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGZhbmN5Ym94KCkge1xuICAgICAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIGxpbms6IGxpbmtGdW5jXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgZWxlbWVudC5maW5kKCcuZ2FsbGVyeS1pbWFnZXMsIC5saWdodGJveCcpLmZhbmN5Ym94KHtcbiAgICAgICAgICAgICAgICBuZXh0RWZmZWN0OiAnZmFkZScsXG4gICAgICAgICAgICAgICAgcHJldkVmZmVjdDogJ2ZhZGUnLFxuICAgICAgICAgICAgICAgIG9wZW5FZmZlY3Q6ICdmYWRlJyxcbiAgICAgICAgICAgICAgICBjbG9zZUVmZmVjdDogJ2ZhZGUnLFxuICAgICAgICAgICAgICAgIGhlbHBlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmxheToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9ja2VkOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ292ZXInXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRwbDoge1xuICAgICAgICAgICAgICAgICAgICBjbG9zZUJ0bjogJzxhIHRpdGxlPVwiU2x1aXRlblwiIGNsYXNzPVwiZmFuY3lib3gtaXRlbSBmYW5jeWJveC1jbG9zZVwiIGhyZWY9XCJqYXZhc2NyaXB0OjtcIj7DlzwvYT4nLFxuICAgICAgICAgICAgICAgICAgICBuZXh0OiAnPGEgdGl0bGU9XCJWb2xnZW5kZVwiIGNsYXNzPVwiZmFuY3lib3gtbmF2IGZhbmN5Ym94LW5leHRcIiBocmVmPVwiamF2YXNjcmlwdDo7XCI+XFxuXFxcblx0XHRcdFx0XHRcdDxzcGFuPjxzdmcgeD1cIjBcIiB5PVwiMFwiIHdpZHRoPVwiOXB4XCIgaGVpZ2h0PVwiMTZweFwiIHZpZXdCb3g9XCIwIDAgOSAxNlwiIGVuYWJsZS1iYWNrZ3JvdW5kPVwibmV3IDAgMCA5IDE2XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48cG9seWdvbiBmaWxsLXJ1bGU9XCJldmVub2RkXCIgY2xpcC1ydWxlPVwiZXZlbm9kZFwiIGZpbGw9XCIjZmNmY2ZjXCIgcG9pbnRzPVwiMSwwLjAwMSAwLDEuMDAxIDcsOCAwLDE0Ljk5OSAxLDE1Ljk5OSA5LDggXCIvPjwvc3ZnPjwvc3Bhbj5cXG5cXFxuXHRcdFx0XHRcdDwvYT4nLFxuICAgICAgICAgICAgICAgICAgICBwcmV2OiAnPGEgdGl0bGU9XCJWb3JpZ2VcIiBjbGFzcz1cImZhbmN5Ym94LW5hdiBmYW5jeWJveC1wcmV2XCIgaHJlZj1cImphdmFzY3JpcHQ6O1wiPlxcblxcXG5cdFx0XHRcdFx0XHQ8c3Bhbj48c3ZnIHg9XCIwXCIgeT1cIjBcIiB3aWR0aD1cIjlweFwiIGhlaWdodD1cIjE2cHhcIiB2aWV3Qm94PVwiMCAwIDkgMTZcIiBlbmFibGUtYmFja2dyb3VuZD1cIm5ldyAwIDAgOSAxNlwiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PHBvbHlnb24gZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGNsaXAtcnVsZT1cImV2ZW5vZGRcIiBmaWxsPVwiI2ZjZmNmY1wiIHBvaW50cz1cIjgsMTUuOTk5IDksMTQuOTk5IDIsOCA5LDEuMDAxIDgsMC4wMDEgMCw4IFwiLz48L3N2Zz48L3NwYW4+XFxuXFxcblx0XHRcdFx0XHQ8L2E+J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG59KSgpO1xuXG4iLCIvKipcbiAqIG5vdG9zcG9ydGFsLndpZGdldHNcbiAqIERJUkVDVElWRTogbGl2aWNvblxuICovXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbm90b3Nwb3J0YWwud2lkZ2V0cycpXG4gICAgICAgIC5kaXJlY3RpdmUoJ2xpdmljb24nLCBsaXZpY29uKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGxpdmljb24oKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgIHNjb3BlOiBmYWxzZSxcbiAgICAgICAgICAgIGxpbms6IGxpbmtGdW5jXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdsaXZpY29uJyk7XG4gICAgICAgICAgICBlbGVtZW50LmFkZExpdmljb24oKTtcbiAgICAgICAgfVxuXG4gICAgfVxufSkoKTtcblxuIiwiLyoqXG4gKiBub3Rvc3BvcnRhbC53aWRnZXRzXG4gKiBESVJFQ1RJVkU6IHBhcmFsYXhcbiAqL1xuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLndpZGdldHMnKVxuICAgICAgICAuZGlyZWN0aXZlKCdwYXJhbGF4JywgcGFyYWxheCk7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBwYXJhbGF4KCR0aW1lb3V0LCAkd2luZG93KSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgbGluazogbGlua0Z1bmNcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZGlyZWN0aXZlO1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnZndiLWJnIGZ3Yi1ibHVyJyk7XG4gICAgICAgICAgICAgICAgdmFyIHNwZWVkID0gYXR0cnMuc3BlZWQgfHwgMztcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGJnUG9zaXRpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkdGhpc1kgPSBlbGVtZW50Lm9mZnNldCgpLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3dZID0gJHdpbmRvdy5wYWdlWU9mZnNldDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoJHRoaXNZID4gJHdpbmRvd1kpXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNzcyh7YmFja2dyb3VuZFBvc2l0aW9uOiAnNTAlICcgKyAoKCR0aGlzWSAtICR3aW5kb3dZKSAvIHNwZWVkKSArICdweCd9KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jc3Moe2JhY2tncm91bmRQb3NpdGlvbjogJzUwJSAnICsgKC0oJHRoaXNZIC0gJHdpbmRvd1kpIC8gc3BlZWQpICsgJ3B4J30pO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgYmdQb3NpdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLmJpbmQoJ3Njcm9sbCcsIGJnUG9zaXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cbn0pKCk7XG5cbiIsIi8qKlxuICogbm90b3Nwb3J0YWwud2lkZ2V0c1xuICogRElSRUNUSVZFOiByc1NsaWRyXG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdub3Rvc3BvcnRhbC53aWRnZXRzJylcbiAgICAgICAgLmRpcmVjdGl2ZSgncnNTbGlkZXInLCByc1NsaWRlcik7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiByc1NsaWRlcigkdGltZW91dCkge1xuICAgICAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIGxpbms6IGxpbmtGdW5jXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vUmV2b2x1dGlvbiBTbGlkZXIgU3RhcnRcbiAgICAgICAgICAgICAgICB2YXIgcmV2b2x1dGlvblNsaWRlciA9IGVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICBpZiAocmV2b2x1dGlvblNsaWRlci5jbG9zZXN0KCcucnMtc2xpZGVyJykuaGFzQ2xhc3MoJ2Z1bGwtd2lkdGgnKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYm9keSA9IGFuZ3VsYXIuZWxlbWVudCgnYm9keScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBib2R5LndpZHRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3BIZWlnaHQgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVySGVpZ2h0ID0gMTA0LFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJyN0b3AtYm94JykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYm9keS5oYXNDbGFzcygnaGlkZGVuLXRvcCcpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcEhlaWdodCA9IGFuZ3VsYXIuZWxlbWVudCgnI3RvcC1ib3gnKS5vdXRlckhlaWdodCgpIC0gMzI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoKGJvZHkud2lkdGgoKSkgPj0gMTIwMClcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGJvZHkuaGVpZ2h0KCkgLSAodG9wSGVpZ2h0ICsgaGVhZGVySGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gODAwO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldm9sdXRpb25TbGlkZXIucmV2b2x1dGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogNjAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0d2lkdGg6IDEyMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZVRodW1iczogMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uVHlwZTogJ2J1bGxldCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uQXJyb3dzOiAnc29sbycsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uSEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb25WQWxpZ246ICd0b3AnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGlvbkhPZmZzZXQ6IC01NDUsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uVk9mZnNldDogMzAsXG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRlVGltZXJCYXI6ICdvbidcbiAgICAgICAgICAgICAgICAgICAgfSkucGFyZW50KCkucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2xvYWQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXZvbHV0aW9uU2xpZGVyLnJldm9sdXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDYwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydHdpZHRoOiAxMjAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRoZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVUaHVtYnM6IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGlvblR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uSG92ZXJTdG9wOiAnb2ZmJ1xuICAgICAgICAgICAgICAgICAgICB9KS5wYXJlbnQoKS5wYXJlbnQoKS5yZW1vdmVDbGFzcygnbG9hZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy9SZXZvbHV0aW9uIFNsaWRlciBFbmRcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7XG5cbiIsIi8vIEluY2x1ZGUgaW4gaW5kZXguaHRtbCBzbyB0aGF0IGFwcCBsZXZlbCBleGNlcHRpb25zIGFyZSBoYW5kbGVkLlxuLy8gRXhjbHVkZSBmcm9tIHRlc3RSdW5uZXIuaHRtbCB3aGljaCBzaG91bGQgcnVuIGV4YWN0bHkgd2hhdCBpdCB3YW50cyB0byBydW5cbihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2Jsb2Nrcy5leGNlcHRpb24nKVxuICAgICAgICAucHJvdmlkZXIoJ2V4Y2VwdGlvbkhhbmRsZXInLCBleGNlcHRpb25IYW5kbGVyUHJvdmlkZXIpXG4gICAgICAgIC5jb25maWcoY29uZmlnKTtcblxuICAgIC8qKlxuICAgICAqIE11c3QgY29uZmlndXJlIHRoZSBleGNlcHRpb24gaGFuZGxpbmdcbiAgICAgKiBAcmV0dXJuIHtbdHlwZV19XG4gICAgICovXG4gICAgZnVuY3Rpb24gZXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyKCkge1xuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgICAgICAgdGhpcy5jb25maWcgPSB7XG4gICAgICAgICAgICBhcHBFcnJvclByZWZpeDogdW5kZWZpbmVkXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5jb25maWd1cmUgPSBmdW5jdGlvbiAoYXBwRXJyb3JQcmVmaXgpIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmFwcEVycm9yUHJlZml4ID0gYXBwRXJyb3JQcmVmaXg7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4ge2NvbmZpZzogdGhpcy5jb25maWd9O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyZSBieSBzZXR0aW5nIGFuIG9wdGlvbmFsIHN0cmluZyB2YWx1ZSBmb3IgYXBwRXJyb3JQcmVmaXguXG4gICAgICogQWNjZXNzaWJsZSB2aWEgY29uZmlnLmFwcEVycm9yUHJlZml4ICh2aWEgY29uZmlnIHZhbHVlKS5cbiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICRwcm92aWRlXG4gICAgICogQHJldHVybiB7W3R5cGVdfVxuICAgICAqIEBuZ0luamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZpZygkcHJvdmlkZSkge1xuICAgICAgICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRleGNlcHRpb25IYW5kbGVyJywgZXh0ZW5kRXhjZXB0aW9uSGFuZGxlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0ZW5kIHRoZSAkZXhjZXB0aW9uSGFuZGxlciBzZXJ2aWNlIHRvIGFsc28gZGlzcGxheSBhIHRvYXN0LlxuICAgICAqIEBwYXJhbSAge09iamVjdH0gJGRlbGVnYXRlXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBleGNlcHRpb25IYW5kbGVyXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBsb2dnZXJcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIGRlY29yYXRlZCAkZXhjZXB0aW9uSGFuZGxlciBzZXJ2aWNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXh0ZW5kRXhjZXB0aW9uSGFuZGxlcigkZGVsZWdhdGUsIGV4Y2VwdGlvbkhhbmRsZXIsIGxvZ2dlcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXhjZXB0aW9uLCBjYXVzZSkge1xuICAgICAgICAgICAgdmFyIGFwcEVycm9yUHJlZml4ID0gZXhjZXB0aW9uSGFuZGxlci5jb25maWcuYXBwRXJyb3JQcmVmaXggfHwgJyc7XG4gICAgICAgICAgICB2YXIgZXJyb3JEYXRhID0ge2V4Y2VwdGlvbjogZXhjZXB0aW9uLCBjYXVzZTogY2F1c2V9O1xuICAgICAgICAgICAgZXhjZXB0aW9uLm1lc3NhZ2UgPSBhcHBFcnJvclByZWZpeCArIGV4Y2VwdGlvbi5tZXNzYWdlO1xuICAgICAgICAgICAgJGRlbGVnYXRlKGV4Y2VwdGlvbiwgY2F1c2UpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb3VsZCBhZGQgdGhlIGVycm9yIHRvIGEgc2VydmljZSdzIGNvbGxlY3Rpb24sXG4gICAgICAgICAgICAgKiBhZGQgZXJyb3JzIHRvICRyb290U2NvcGUsIGxvZyBlcnJvcnMgdG8gcmVtb3RlIHdlYiBzZXJ2ZXIsXG4gICAgICAgICAgICAgKiBvciBsb2cgbG9jYWxseS4gT3IgdGhyb3cgaGFyZC4gSXQgaXMgZW50aXJlbHkgdXAgdG8geW91LlxuICAgICAgICAgICAgICogdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAgICAgKiAgICAgdGhyb3cgeyBtZXNzYWdlOiAnZXJyb3IgbWVzc2FnZSB3ZSBhZGRlZCcgfTtcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGV4Y2VwdGlvbi5tZXNzYWdlLCBlcnJvckRhdGEpO1xuICAgICAgICB9O1xuICAgIH1cbn0pKCk7IiwiLyoqXG4gKiBibG9ja3MuZXhjZXB0aW9uXG4gKiBGQUNUT1JZOiBleGNlcHRpb25cbiAqL1xuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYmxvY2tzLmV4Y2VwdGlvbicpXG4gICAgICAgIC5mYWN0b3J5KCdleGNlcHRpb24nLCBleGNlcHRpb24pO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gZXhjZXB0aW9uKGxvZ2dlcikge1xuICAgICAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgICAgICAgIGNhdGNoZXI6IGNhdGNoZXJcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICAgICAgZnVuY3Rpb24gY2F0Y2hlcihtZXNzYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKG1lc3NhZ2UsIHJlYXNvbik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxufSkoKTsiLCIvKipcbiAqIGJsb2Nrcy5sb2dnZXJcbiAqIEZBQ1RPUlk6IGxvZ2dlclxuICovXG5cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdibG9ja3MubG9nZ2VyJylcbiAgICAgICAgLmZhY3RvcnkoJ2xvZ2dlcicsIGxvZ2dlcik7XG5cbiAgICBsb2dnZXIuJGluamVjdCA9IFsnJGxvZycsICd0b2FzdHInXTtcblxuICAgIGZ1bmN0aW9uIGxvZ2dlcigkbG9nLCB0b2FzdHIpIHtcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICAgICAgICBzaG93VG9hc3RzOiB0cnVlLFxuXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICBpbmZvOiBpbmZvLFxuICAgICAgICAgICAgc3VjY2Vzczogc3VjY2VzcyxcbiAgICAgICAgICAgIHdhcm5pbmc6IHdhcm5pbmcsXG5cbiAgICAgICAgICAgIHJlbW92ZWQ6IHJlbW92ZWQsXG4gICAgICAgICAgICBzYXZlZDogc2F2ZWQsXG5cbiAgICAgICAgICAgIC8vIHN0cmFpZ2h0IHRvIGNvbnNvbGU7IGJ5cGFzcyB0b2FzdHJcbiAgICAgICAgICAgIGxvZzogJGxvZy5sb2dcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc2VydmljZTtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gZXJyb3IobWVzc2FnZSwgZGF0YSwgdGl0bGUpIHtcbiAgICAgICAgICAgIHRvYXN0ci5lcnJvcihtZXNzYWdlLCB0aXRsZSk7XG4gICAgICAgICAgICAkbG9nLmVycm9yKCdGb3V0OiAnICsgbWVzc2FnZSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbmZvKG1lc3NhZ2UsIGRhdGEsIHRpdGxlKSB7XG4gICAgICAgICAgICB0b2FzdHIuaW5mbyhtZXNzYWdlLCB0aXRsZSk7XG4gICAgICAgICAgICAkbG9nLmluZm8oJ0luZm86ICcgKyBtZXNzYWdlLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3MobWVzc2FnZSwgZGF0YSwgdGl0bGUpIHtcbiAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKG1lc3NhZ2UsIHRpdGxlKTtcbiAgICAgICAgICAgICRsb2cuaW5mbygnU3VjY2VzOiAnICsgbWVzc2FnZSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UsIGRhdGEsIHRpdGxlKSB7XG4gICAgICAgICAgICB0b2FzdHIud2FybmluZyhtZXNzYWdlLCB0aXRsZSk7XG4gICAgICAgICAgICAkbG9nLndhcm4oJ0xldCBvcDogJyArIG1lc3NhZ2UsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlZChtZXNzYWdlLCBkYXRhLCB0aXRsZSkge1xuICAgICAgICAgICAgdG9hc3RyLndhcm5pbmcobWVzc2FnZSwgdGl0bGUpO1xuICAgICAgICAgICAgJGxvZy53YXJuKCdWZXJ3aWpkZXJkOiAnICsgbWVzc2FnZSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzYXZlZChtZXNzYWdlLCBkYXRhLCB0aXRsZSkge1xuICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MobWVzc2FnZSwgdGl0bGUpO1xuICAgICAgICAgICAgJGxvZy5pbmZvKCdCZXdhYXJkOiAnICsgbWVzc2FnZSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG59KSgpOyIsIi8qKlxuICogbm90b3NwbHVzLnJvdXRlclxuICogRkFDVE9SWTogcm91dGVoZWxwZXJcbiAqL1xuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYmxvY2tzLnJvdXRlcicpXG4gICAgICAgIC5wcm92aWRlcigncm91dGVoZWxwZXJDb25maWcnLCByb3V0ZWhlbHBlckNvbmZpZylcbiAgICAgICAgLmZhY3RvcnkoJ3JvdXRlaGVscGVyJywgcm91dGVoZWxwZXIpO1xuXG4gICAgcm91dGVoZWxwZXIuJGluamVjdCA9IFsncm91dGVoZWxwZXJDb25maWcnLCAnJHJvb3RTY29wZScsICckc3RhdGUnXTtcblxuICAgIGZ1bmN0aW9uIHJvdXRlaGVscGVyQ29uZmlnKCkge1xuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgICAgICAgdGhpcy5jb25maWcgPSB7fTtcblxuICAgICAgICB0aGlzLiRnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNvbmZpZzogdGhpcy5jb25maWdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcm91dGVoZWxwZXIocm91dGVoZWxwZXJDb25maWcsICRyb290U2NvcGUsICRzdGF0ZSkge1xuICAgICAgICB2YXIgJHVybFJvdXRlclByb3ZpZGVyID0gcm91dGVoZWxwZXJDb25maWcuY29uZmlnLiR1cmxSb3V0ZXJQcm92aWRlcjtcbiAgICAgICAgdmFyICRzdGF0ZVByb3ZpZGVyID0gcm91dGVoZWxwZXJDb25maWcuY29uZmlnLiRzdGF0ZVByb3ZpZGVyO1xuXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgICAgICAgY29uZmlndXJlU3RhdGVzOiBjb25maWd1cmVTdGF0ZXMsXG4gICAgICAgICAgICBzdGF0ZXM6IHN0YXRlcyxcbiAgICAgICAgICAgIGdldDogZ2V0XG4gICAgICAgIH07XG5cbiAgICAgICAgaW5pdCgpO1xuXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBjb25maWd1cmVTdGF0ZXMoc3RhdGVzKSB7XG4gICAgICAgICAgICBzdGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuY29uZmlnLnRpdGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmNvbmZpZy5uY3lCcmVhZGNydW1iID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHN0YXRlLmNvbmZpZy50aXRsZS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZShzdGF0ZS5zdGF0ZSwgc3RhdGUuY29uZmlnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc3RhdGVzKCkge1xuICAgICAgICAgICAgcmV0dXJuICRzdGF0ZS5nZXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldChwYXR0ZXJuKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICAgIHN0YXRlcygpLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLm5hbWUgPT09IHBhdHRlcm4pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gc3RhdGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cblxuICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgICAgdXBkYXRlRG9jVGl0bGUoKTtcbiAgICAgICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9pbmRleC9kYXNoYm9hcmQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZURvY1RpdGxlKCkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChldmVudCwgY3VycmVudCwgcHJldmlvdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpdGxlID0gcm91dGVoZWxwZXJDb25maWcuY29uZmlnLnRpdGxlICsgKGN1cnJlbnQudGl0bGUgPyAnIHwgJyArIGN1cnJlbnQudGl0bGUgOiAnJyk7XG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUudGl0bGUgPSB0aXRsZTsgLy8gZGF0YSBiaW5kIHRvIDx0aXRsZT5cbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kc3RhdGUgPSBjdXJyZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgIH1cbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9