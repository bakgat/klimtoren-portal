!function(){"use strict";angular.module("notosportal",["notosportal.core","notosportal.layout","notosportal.widgets","notosportal.data","notosportal.auth","notosportal.dashboard","notosportal.info","notosportal.media","notosportal.links"])}(),function(){"use strict";angular.module("notosportal.auth",[])}(),angular.module("notosportal.core",["ngAnimate","ngSanitize","ngResource","ui.bootstrap","ncy-angular-breadcrumb","restangular","angular-google-analytics","blocks.exception","blocks.logger","blocks.router"]),function(){"use strict";angular.module("notosportal.dashboard",[])}(),function(){"use strict";angular.module("notosportal.data",[])}(),function(){"use strict";angular.module("notosportal.info",[])}(),function(){"use strict";angular.module("notosportal.layout",[])}(),function(){"use strict";angular.module("notosportal.links",[])}(),function(){"use strict";angular.module("notosportal.media",[])}(),function(){"use strict";angular.module("notosportal.widgets",[])}(),function(){"use strict";angular.module("blocks.exception",["blocks.logger"])}(),function(){"use strict";angular.module("blocks.logger",[])}(),function(){"use strict";angular.module("blocks.router",["ui.router"])}(),function(){"use strict";function t(t,n,e,o,r){function a(o){function r(t){return l=t.data,f.setRealm(t.data.realm),t.data}return l&&!o?e.when(l):t.get("/api/user/profile").then(r)["catch"](function(t){n.catcher("Profiel van de huidige gebruiker opvragen, lukt niet.")(t)})}function i(){return u}function c(t){u=t}function s(o,r){function a(t){return l=t.data,f.setRealm(t.data),t.data}return l&&!r?e.when(l):t.get("/api/realm?ofDomain="+o).then(a)["catch"](function(t){n.catcher("Realm van "+o+" opvragen lukt niet.")(t)})}var l=null,u=null,f=(r.events,{current:a,realm:i,setRealm:c,realmOfDomain:s});return f}angular.module("notosportal.auth").factory("ProfileService",t),t.$inject=["$http","exception","$q","common","config"]}(),function(){"use strict";function t(){function t(t){var n,o,r,a,i,c="",s="",l="",u=0;do n=t.charCodeAt(u++),o=t.charCodeAt(u++),s=t.charCodeAt(u++),r=n>>2,a=(3&n)<<4|o>>4,i=(15&o)<<2|s>>6,l=63&s,isNaN(o)?i=l=64:isNaN(s)&&(l=64),c=c+e.charAt(r)+e.charAt(a)+e.charAt(i)+e.charAt(l),n=o=s="",r=a=i=l="";while(u<t.length);return c}function n(t){var n,o,r,a,i,c="",s="",l="",u=0,f=/[^A-Za-z0-9\+\/\=]/g;f.exec(t)&&window.alert("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding."),t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"");do r=e.indexOf(t.charAt(u++)),a=e.indexOf(t.charAt(u++)),i=e.indexOf(t.charAt(u++)),l=e.indexOf(t.charAt(u++)),n=r<<2|a>>4,o=(15&a)<<4|i>>2,s=(3&i)<<6|l,c+=String.fromCharCode(n),64!=i&&(c+=String.fromCharCode(o)),64!=l&&(c+=String.fromCharCode(s)),n=o=s="",r=a=i=l="";while(u<t.length);return c}var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",o={encode:t,decode:n};return o}angular.module("notosportal.core").factory("Base64",t)}(),function(){"use strict";function t(t,n,e,o){function r(){return n.$broadcast.apply(n,arguments)}function a(t){return/^[-]?\d+$/.test(t)}function i(t,n){return t&&-1!==t.toLowerCase().indexOf(n.toLowerCase())}var c={$broadcast:r,$q:t,$timeout:e,isNumber:a,logger:o,textContains:i};return c}angular.module("notosportal.core").factory("common",t),t.$inject=["$q","$rootScope","$timeout","logger"]}(),function(){"use strict";function t(t){t.options.timeOut=4e3,t.options.closeButton=!0,t.options.progressBar=!0,t.options.positionClass="toast-bottom-right"}function n(t,n,e,o,r,i){function c(){e.config.$urlRouterProvider=t,e.config.$stateProvider=n,e.config.title=a.appTitle}function s(){o.setOptions({prefixStateName:"index",template:"bootstrap3",includeAbstract:!0})}function l(){var t="/api";r.setBaseUrl(t)}function u(){i.setAccount("UA-20593426-1"),i.setPageEvent("$stateChangeSuccess")}c(),s(),l(),u()}function e(t){t.$on("$viewContentLoaded",function(){angular.element("html, body").animate({scrollTop:0},200)})}function o(t){t.$on("$stateChangeError",function(t){t.preventDefault(),$state.go("error.404")})}var r=angular.module("notosportal.core");r.config(t),t.$inject=["toastr"];var a={appErrorPrefix:"[Fout] ",appTitle:"VBS De Klimtoren",version:"1.0.0"};r.value("config",a),r.config(n),r.run(e),r.run(o),r.run(["Analytics",function(t){}]),n.$inject=["$urlRouterProvider","$stateProvider","routehelperConfigProvider","$breadcrumbProvider","RestangularProvider","AnalyticsProvider"],e.$inject=["$rootScope"],o.$inject=["$rootScope"]}(),function(){"use strict";angular.module("notosportal.core").constant("toastr",toastr).constant("moment",moment).constant("gapi",gapi)}(),function(){"use strict";function t(t){t.configureStates(n())}function n(){return[{state:"error",config:{"abstract":!0,url:"/error",views:{"main@":{templateUrl:"js/modules/layout/main.html"}},title:"Fout"}},{state:"error.404",config:{url:"/404",views:{"content@error":{templateUrl:"js/modules/core/errors/404.html"}},title:"Pagina in opbouw"}}]}angular.module("notosportal.core").run(t),t.$inject=["routehelper"]}(),function(){"use strict";function t(t,n){function e(){FB.init({appId:"466280350201960",channelUrl:"js/modules/core/fb-channel.html",cookie:!0,xfbml:!0,version:"v2.3"})}t.fbAsyncInit=function(){e(),n.$broadcast("fb.init")},function(t){var n,e="facebook-jssdk",o=t.getElementsByTagName("script")[0];t.getElementById(e)||(n=t.createElement("script"),n.id=e,n.async=!0,n.src="//connect.facebook.net/en_US/sdk.js",o.parentNode.insertBefore(n,o))}(document)}angular.module("notosportal.core").run(t),t.$inject=["$window","common"]}(),function(){"use strict";function t(t){function n(){t.getList().then(function(t){e.blogs=t,$(window).resize()})}var e=this;e.blogs=[],n()}angular.module("notosportal.dashboard").controller("BannersetController",t),t.$inject=["Blog"]}(),function(){"use strict";function t(t,n){function e(){o.collections=t.take(4),n.campaigns(3).then(function(t){o.campaigns=t})}var o=this;o.facebookurl="https://www.facebook.com/vbsdeklimtoren",o.collections=[],o.campaigns=[],e()}angular.module("notosportal.dashboard").controller("DashboardController",t),t.$inject=["GPCollections","MailChimp"]}(),function(){"use strict";function t(t){t.configureStates(n())}function n(){return[{state:"index",config:{"abstract":!0,url:"/index",views:{"main@":{templateUrl:"js/modules/layout/main.html"}},title:"start"}},{state:"index.dashboard",config:{url:"/dashboard",views:{"content@index":{templateUrl:"js/modules/dashboard/dashboard.html",controller:"DashboardController",controllerAs:"vm"},"slider@index":{templateUrl:"js/modules/dashboard/slider.html"},"banner-set@index":{templateUrl:"js/modules/dashboard/banner-set.html",controller:"BannersetController",controllerAs:"vm"}},title:"Dashboard"}}]}angular.module("notosportal.dashboard").run(t),t.$inject=["routehelper"]}(),function(){"use strict";function t(t,n){var e;return e=n("http"),t.withConfig(function(t){t.setDefaultHttpFields({cache:e}),t.setResponseInterceptor(function(t,n){return("put"===n||"post"===n||"delete"===n)&&e.removeAll(),t}),t.setOnElemRestangularized(function(t,n){return t.clearCache=function(){e.removeAll()},t})})}angular.module("notosportal.data").factory("HTTPCache",t),t.$inject=["Restangular","$cacheFactory"]}(),function(){"use strict";function t(t){function n(){function n(t){e.campaigns=t}t.campaigns().then(n),t.mailToSegments().then(function(t){console.log(t)})}var e=this;e.campaigns=[],n()}angular.module("notosportal.info").controller("CampaignsController",t),t.$inject=["MailChimp"]}(),function(){"use strict";function t(t){t.configureStates(n())}function n(){return[{state:"info",config:{"abstract":!0,url:"/info",views:{"main@":{templateUrl:"js/modules/layout/main.html"}},title:"Info"}},{state:"info.contact",config:{url:"/contact",views:{"content@info":{templateUrl:"js/modules/info/contact.html"}},title:"Contact"}},{state:"info.about",config:{url:"/about",views:{"content@info":{templateUrl:"js/modules/info/about.html"}},title:"Over onze school"}},{state:"info.care",config:{url:"/care",views:{"content@info":{templateUrl:"js/modules/info/care.html"}},title:"Zorg op onze school"}},{state:"info.team",config:{url:"/team",views:{"content@info":{templateUrl:"js/modules/info/team.html"}},title:"Ons team"}},{state:"info.calendar",config:{url:"/calendar",views:{"content@info":{templateUrl:"js/modules/info/calendar.html"}},title:"Kalender"}},{state:"info.campaigns",config:{url:"/campaigns",views:{"content@info":{templateUrl:"js/modules/info/campaigns.html",controller:"CampaignsController",controllerAs:"vm"}},title:"Nieuwsbrieven"}}]}angular.module("notosportal.info").run(t),t.$inject=["routehelper"]}(),function(){"use strict";function t(t,n){function e(){t.memberCount().then(function(t){o.campaign_members=t.data.stats.member_count})}var o=this;o.campaign_members=0,e()}angular.module("notosportal.layout").controller("ShellController",t),t.$inject=["MailChimp","$state"]}(),function(){"use strict";function t(t,n,e){function o(){function t(t){return t}return n.realmOfDomain("klimtoren.be").then(t)}function r(){function n(n){t.service("organization/"+n.id+"/blogs").getList().then(function(t){return r.resolve(t)})}var r=e.defer();return o().then(n),r.promise}var a={getList:r};return a}angular.module("notosportal.links").factory("Blog",t),t.$inject=["HTTPCache","ProfileService","$q"]}(),function(){"use strict";function t(){function t(){return o}function n(t){for(var n=[],e=0;t>e&&e<o.length;)n.push(o[e]),e++;return n}var e={get:t,take:n},o=[{name:"2015-2016",href:"https://plus.google.com/b/103406123671942529660/collection/sYLa3",preview:"https://lh3.googleusercontent.com/-G-Qj-TTAW2M/VfbE9gxgSRI/AAAAAAAADZ0/NfJmsesxHIg/w738-h492-no/DSC_0026.JPG"},{name:"2014-2015",href:"https://plus.google.com/b/103406123671942529660/collection/U5aa3",preview:"https://lh3.googleusercontent.com/-WuQRYCenP8w/VelsvrGL-fI/AAAAAAAAAqI/rj6IT0gPJWM/w777-h583-no/DSCN3028.JPG"},{name:"2013-2014",href:"https://plus.google.com/b/103406123671942529660/collection/EoNP2",preview:"https://lh3.googleusercontent.com/-XuNc8zcK6cg/VelygWhfKUI/AAAAAAAAAvQ/8EZzWBFBgdA/w777-h583-no/IMG_2789.JPG"}];return e}angular.module("notosportal.media").factory("GPCollections",t)}(),function(){"use strict";function t(t,n){function e(n){function e(t){var e=[],o=0;return angular.forEach(t.data.campaigns,function(t){t.recipients.segment_opts||(!o||n>o)&&(e.push(t),o++)}),e}return t.get("/api/mailchimp/campaigns").then(e)}function o(){function n(t){var n=[];return angular.forEach(t.data.campaigns,function(t){t.recipients.segment_opts&&(console.log(t.recipients.segment_opts),n.push(t))}),n}return t.get("/api/mailchimp/campaigns").then(n)}function r(){function n(t){return t.data}return t.get("/api/mailchimp/member_count").success(n)}function a(){t.get("/api/mailchimp/lists/"+i+"/categories").then(function(t){console.log(t)})}var i=204325,c={campaigns:e,mailToSegments:o,memberCount:r,interests:a};return c}angular.module("notosportal.media").factory("MailChimp",t),t.$inject=["$http","$q"]}(),function(){"use strict";function t(t){t.configureStates(n())}function n(){return[{state:"media",config:{"abstract":!0,url:"/media",views:{"main@":{templateUrl:"js/modules/layout/main.html"}},title:"in beeld"}},{state:"media.photos",config:{url:"/photos",views:{"content@media":{templateUrl:"js/modules/media/photos.html",controller:"PhotoController",controllerAs:"vm"}},title:"foto's"}},{state:"media.videos",config:{url:"/videos",views:{"content@media":{templateUrl:"js/modules/media/videos.html",controller:"VideoController",controllerAs:"vm"}},title:"video's"}}]}angular.module("notosportal.info").run(t),t.$inject=["routehelper"]}(),function(){"use strict";function t(t){function n(){e.collections=t.get()}var e=this;e.collections=[],n()}angular.module("notosportal.media").controller("PhotoController",t),t.$inject=["GPCollections"]}(),function(){"use strict";function t(){function t(t,n,e){function o(){var t=e.appearAnimationDelay||1;t>1&&$(n).css("animation-delay",t+"ms"),$(n).addClass("animated").addClass(e.appearAnimation)}angular.element("body").hasClass("no-csstransitions")||$(n).bind("appear",o)}var n={restrict:"A",link:t};return n}angular.module("notosportal.widgets").directive("appearAnimation",t)}(),function(){"use strict";function t(t){function n(n,e,o){e.addClass("fwb-bg fwb-blur"),t(function(){var n=new Image,r='<div class="blur-box"/>';e.find("canvas").length||(o.image?n.src=o.image:"none"!==e.css("background-image")&&(n.src=e.css("background-image").replace("url(","").replace(")",""),e.css("background-image","none")),n.onload=function(){Pixastic.process(n,"blurfast",{amount:o.amount||2})},e.prepend(r).find(".blur-box").prepend(n)),t(function(){var t=e.find("canvas");t.width()==e.width()?t.css({marginLeft:0,marginTop:-((t.height()-e.height())/2)}):t.css({marginTop:0,marginLeft:-((t.width()-e.width())/2)}),$("body").addClass("blur-load")},50)})}var e={restrict:"A",link:n};return e}angular.module("notosportal.widgets").directive("blur",t),t.$inject=["$timeout"]}(),function(){"use strict";function t(){function t(t,n,e){n.find(".gallery-images, .lightbox").fancybox({nextEffect:"fade",prevEffect:"fade",openEffect:"fade",closeEffect:"fade",helpers:{overlay:{locked:!1},title:{type:"over"}},tpl:{closeBtn:'<a title="Sluiten" class="fancybox-item fancybox-close" href="javascript:;">×</a>',next:'<a title="Volgende" class="fancybox-nav fancybox-next" href="javascript:;">\n						<span><svg x="0" y="0" width="9px" height="16px" viewBox="0 0 9 16" enable-background="new 0 0 9 16" xml:space="preserve"><polygon fill-rule="evenodd" clip-rule="evenodd" fill="#fcfcfc" points="1,0.001 0,1.001 7,8 0,14.999 1,15.999 9,8 "/></svg></span>\n					</a>',prev:'<a title="Vorige" class="fancybox-nav fancybox-prev" href="javascript:;">\n						<span><svg x="0" y="0" width="9px" height="16px" viewBox="0 0 9 16" enable-background="new 0 0 9 16" xml:space="preserve"><polygon fill-rule="evenodd" clip-rule="evenodd" fill="#fcfcfc" points="8,15.999 9,14.999 2,8 9,1.001 8,0.001 0,8 "/></svg></span>\n					</a>'}})}var n={restrict:"A",link:t};return n}angular.module("notosportal.widgets").directive("fancybox",t)}(),function(){"use strict";function t(){function t(t,n){n.addClass("livicon"),n.addLivicon()}var n={restrict:"A",replace:!0,scope:!1,link:t};return n}angular.module("notosportal.widgets").directive("livicon",t)}(),function(){"use strict";function t(t,n){function e(e,o,r){t(function(){function t(){var t=o.offset().top,r=n.pageYOffset;t>r?o.css({backgroundPosition:"50% "+(t-r)/e+"px"}):o.css({backgroundPosition:"50% "+-(t-r)/e+"px"})}o.addClass("fwb-bg fwb-blur");var e=r.speed||3;t(),angular.element(n).bind("scroll",t)})}var o={restrict:"A",link:e};return o}angular.module("notosportal.widgets").directive("paralax",t),t.$inject=["$timeout","$window"]}(),function(){"use strict";function t(t){function n(n,e,o){t(function(){var t=e;if(t.closest(".rs-slider").hasClass("full-width")){var n,o=angular.element("body"),r=(o.width(),0),a=104;angular.element("#top-box").length&&o.hasClass("hidden-top")&&(r=angular.element("#top-box").outerHeight()-32),n=o.width()>=1200?o.height()-(r+a):800,t.revolution({delay:6e3,startwidth:1200,startheight:n,hideThumbs:10,navigationType:"bullet",navigationArrows:"solo",navigationHAlign:"center",navigationVAlign:"top",navigationHOffset:-545,navigationVOffset:30,hideTimerBar:"on"}).parent().parent().removeClass("load")}else t.revolution({delay:6e3,startwidth:1200,startheight:500,hideThumbs:10,navigationType:"none",onHoverStop:"off"}).parent().parent().removeClass("load")})}var e={restrict:"A",link:n};return e}angular.module("notosportal.widgets").directive("rsSlider",t),t.$inject=["$timeout"]}(),function(){"use strict";function t(){this.config={appErrorPrefix:void 0},this.configure=function(t){this.config.appErrorPrefix=t},this.$get=function(){return{config:this.config}}}function n(t){t.decorator("$exceptionHandler",e)}function e(t,n,e){return function(o,r){var a=n.config.appErrorPrefix||"",i={exception:o,cause:r};o.message=a+o.message,t(o,r),e.error(o.message,i)}}angular.module("blocks.exception").provider("exceptionHandler",t).config(n),n.$inject=["$provide"],e.$inject=["$delegate","exceptionHandler","logger"]}(),function(){"use strict";function t(t){function n(n){return function(e){t.error(n,e)}}var e={catcher:n};return e}angular.module("blocks.exception").factory("exception",t),t.$inject=["logger"]}(),function(){"use strict";function t(t,n){function e(e,o,r){n.error(e,r),t.error("Fout: "+e,o)}function o(e,o,r){n.info(e,r),t.info("Info: "+e,o)}function r(e,o,r){n.success(e,r),t.info("Succes: "+e,o)}function a(e,o,r){n.warning(e,r),t.warn("Let op: "+e,o)}function i(e,o,r){n.warning(e,r),t.warn("Verwijderd: "+e,o)}function c(e,o,r){n.success(e,r),t.info("Bewaard: "+e,o)}var s={showToasts:!0,error:e,info:o,success:r,warning:a,removed:i,saved:c,log:t.log};return s}angular.module("blocks.logger").factory("logger",t),t.$inject=["$log","toastr"]}(),function(){"use strict";function t(){this.config={},this.$get=function(){return{config:this.config}}}function n(t,n,e){function o(t){t.forEach(function(t){t.config.title&&(t.config.ncyBreadcrumb={label:t.config.title.toLowerCase()}),l.state(t.state,t.config)})}function r(){return e.get()}function a(t){var n=null;return r().forEach(function(e){e.name===t&&(n=e)}),n}function i(){c(),s.otherwise("/error/404")}function c(){n.$on("$stateChangeSuccess",function(e,o,r){var a=t.config.title+(o.title?" | "+o.title:"");n.title=a,n.$state=o})}var s=t.config.$urlRouterProvider,l=t.config.$stateProvider,u={configureStates:o,states:r,get:a};return i(),u}angular.module("blocks.router").provider("routehelperConfig",t).factory("routehelper",n),n.$inject=["routehelperConfig","$rootScope","$state"]}();
//# sourceMappingURL=data:application/json;base64,