!function(){"use strict";angular.module("notosportal",["notosportal.core","notosportal.layout","notosportal.widgets","notosportal.dashboard","notosportal.info","notosportal.media"])}(),angular.module("notosportal.core",["ngAnimate","ngSanitize","ngResource","ui.bootstrap","ncy-angular-breadcrumb","restangular","angular-google-analytics","blocks.exception","blocks.logger","blocks.router"]),function(){"use strict";angular.module("notosportal.dashboard",[])}(),function(){"use strict";angular.module("notosportal.layout",[])}(),function(){"use strict";angular.module("notosportal.info",[])}(),function(){"use strict";angular.module("notosportal.media",[])}(),function(){"use strict";angular.module("notosportal.widgets",[])}(),function(){"use strict";angular.module("blocks.exception",["blocks.logger"])}(),function(){"use strict";angular.module("blocks.logger",[])}(),function(){"use strict";angular.module("blocks.router",["ui.router"])}(),function(){"use strict";function t(){function t(t){var n,e,r,i,a,c="",s="",l="",u=0;do n=t.charCodeAt(u++),e=t.charCodeAt(u++),s=t.charCodeAt(u++),r=n>>2,i=(3&n)<<4|e>>4,a=(15&e)<<2|s>>6,l=63&s,isNaN(e)?a=l=64:isNaN(s)&&(l=64),c=c+o.charAt(r)+o.charAt(i)+o.charAt(a)+o.charAt(l),n=e=s="",r=i=a=l="";while(u<t.length);return c}function n(t){var n,e,r,i,a,c="",s="",l="",u=0,f=/[^A-Za-z0-9\+\/\=]/g;f.exec(t)&&window.alert("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding."),t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"");do r=o.indexOf(t.charAt(u++)),i=o.indexOf(t.charAt(u++)),a=o.indexOf(t.charAt(u++)),l=o.indexOf(t.charAt(u++)),n=r<<2|i>>4,e=(15&i)<<4|a>>2,s=(3&a)<<6|l,c+=String.fromCharCode(n),64!=a&&(c+=String.fromCharCode(e)),64!=l&&(c+=String.fromCharCode(s)),n=e=s="",r=i=a=l="";while(u<t.length);return c}var o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",e={encode:t,decode:n};return e}angular.module("notosportal.core").factory("Base64",t)}(),function(){"use strict";function t(t,n,o,e){function r(){return n.$broadcast.apply(n,arguments)}function i(t){return/^[-]?\d+$/.test(t)}function a(t,n){return t&&-1!==t.toLowerCase().indexOf(n.toLowerCase())}var c={$broadcast:r,$q:t,$timeout:o,isNumber:i,logger:e,textContains:a};return c}angular.module("notosportal.core").factory("common",t),t.$inject=["$q","$rootScope","$timeout","logger"]}(),function(){"use strict";function t(t){t.options.timeOut=4e3,t.options.closeButton=!0,t.options.progressBar=!0,t.options.positionClass="toast-bottom-right"}function n(t,n,o,e,i,a){function c(){o.config.$urlRouterProvider=t,o.config.$stateProvider=n,o.config.title=r.appTitle}function s(){e.setOptions({prefixStateName:"index",template:"bootstrap3",includeAbstract:!0})}function l(){var t="/api";i.setBaseUrl(t)}function u(){a.setAccount("UA-20593426-1"),a.setPageEvent("$stateChangeSuccess")}c(),s(),l(),u()}function o(t){t.$on("$viewContentLoaded",function(){angular.element("html, body").animate({scrollTop:0},200)})}var e=angular.module("notosportal.core");e.config(t),t.$inject=["toastr"];var r={appErrorPrefix:"[Fout] ",appTitle:"VBS De Klimtoren",version:"1.0.0"};e.value("config",r),e.config(n),e.run(o),e.run(["Analytics",function(t){}]),n.$inject=["$urlRouterProvider","$stateProvider","routehelperConfigProvider","$breadcrumbProvider","RestangularProvider","AnalyticsProvider"],o.$inject=["$rootScope"]}(),function(){"use strict";angular.module("notosportal.core").constant("toastr",toastr).constant("moment",moment).constant("gapi",gapi)}(),function(){"use strict";function t(t,n){function o(){FB.init({appId:"466280350201960",channelUrl:"js/modules/core/fb-channel.html",cookie:!0,xfbml:!0,version:"v2.3"})}t.fbAsyncInit=function(){o(),n.$broadcast("fb.init")},function(t){var n,o="facebook-jssdk",e=t.getElementsByTagName("script")[0];t.getElementById(o)||(n=t.createElement("script"),n.id=o,n.async=!0,n.src="//connect.facebook.net/en_US/sdk.js",e.parentNode.insertBefore(n,e))}(document)}angular.module("notosportal.core").run(t),t.$inject=["$window","common"]}(),function(){"use strict";function t(t,n){function o(){e.collections=t.take(4),n.campaigns(3).then(function(t){e.campaigns=t})}var e=this;e.facebookurl="https://www.facebook.com/vbsdeklimtoren",e.collections=[],e.campaigns=[],o()}angular.module("notosportal.dashboard").controller("DashboardController",t),t.$inject=["GPCollections","MailChimp"]}(),function(){"use strict";function t(t){t.configureStates(n())}function n(){return[{state:"index",config:{"abstract":!0,url:"/index",views:{"main@":{templateUrl:"js/modules/layout/main.html"}},title:"start"}},{state:"index.dashboard",config:{url:"/dashboard",views:{"content@index":{templateUrl:"js/modules/dashboard/dashboard.html",controller:"DashboardController",controllerAs:"vm"},"slider@index":{templateUrl:"js/modules/dashboard/slider.html"}},title:"Dashboard"}}]}angular.module("notosportal.dashboard").run(t),t.$inject=["routehelper"]}(),function(){"use strict";function t(t,n){function o(){t.memberCount().then(function(t){e.campaign_members=t.data.stats.member_count})}var e=this;e.campaign_members=0,o()}angular.module("notosportal.layout").controller("ShellController",t),t.$inject=["MailChimp","$state"]}(),function(){"use strict";function t(t){function n(){function n(t){o.campaigns=t.data.campaigns}t.campaigns().then(n)}var o=this;o.campaigns=[],n()}angular.module("notosportal.info").controller("CampaignsController",t),t.$inject=["MailChimp"]}(),function(){"use strict";function t(t){t.configureStates(n())}function n(){return[{state:"info",config:{"abstract":!0,url:"/info",views:{"main@":{templateUrl:"js/modules/layout/main.html"}},title:"Info"}},{state:"info.contact",config:{url:"/contact",views:{"content@info":{templateUrl:"js/modules/info/contact.html"}},title:"Contact"}},{state:"info.about",config:{url:"/about",views:{"content@info":{templateUrl:"js/modules/info/about.html"}},title:"Over onze school"}},{state:"info.care",config:{url:"/care",views:{"content@info":{templateUrl:"js/modules/info/care.html"}},title:"Zorg op onze school"}},,{state:"info.campaigns",config:{url:"/campaigns",views:{"content@info":{templateUrl:"js/modules/info/campaigns.html",controller:"CampaignsController",controllerAs:"vm"}},title:"Nieuwsbrieven"}}]}angular.module("notosportal.info").run(t),t.$inject=["routehelper"]}(),function(){"use strict";function t(){function t(){return e}function n(t){for(var n=[],o=0;t>o&&o<e.length;)n.push(e[o]),o++;return n}var o={get:t,take:n},e=[{name:"2015-2016",href:"https://plus.google.com/b/103406123671942529660/collection/sYLa3"},{name:"2014-2015",href:"https://plus.google.com/b/103406123671942529660/collection/U5aa3",preview:"https://lh3.googleusercontent.com/-WuQRYCenP8w/VelsvrGL-fI/AAAAAAAAAqI/rj6IT0gPJWM/w640-h480-p/DSCN3028.JPG"},{name:"2013-2014",href:"https://plus.google.com/b/103406123671942529660/collection/EoNP2",preview:"https://lh3.googleusercontent.com/-XuNc8zcK6cg/VelygWhfKUI/AAAAAAAAAvQ/8EZzWBFBgdA/w777-h583-no/IMG_2789.JPG"}];return o}angular.module("notosportal.media").factory("GPCollections",t)}(),function(){"use strict";function t(t,n){function o(n){function o(t){var n=[],o=0;return angular.forEach(t.data.campaigns,function(t){!t.recipients.segment_opts&&3>o&&(n.push(t),o++)}),n}return t.get("/api/mailchimp/campaigns").then(o)}function e(){function n(t){return t.data}return t.get("/api/mailchimp/member_count").success(n)}var r={campaigns:o,memberCount:e};return r}angular.module("notosportal.media").factory("MailChimp",t),t.$inject=["$http","$q"]}(),function(){"use strict";function t(t){t.configureStates(n())}function n(){return[{state:"media",config:{"abstract":!0,url:"/media",views:{"main@":{templateUrl:"js/modules/layout/main.html"}},title:"in beeld"}},{state:"media.photos",config:{url:"/photos",views:{"content@media":{templateUrl:"js/modules/media/photos.html",controller:"PhotoController",controllerAs:"vm"}},title:"foto's"}}]}angular.module("notosportal.info").run(t),t.$inject=["routehelper"]}(),function(){"use strict";function t(t){function n(){o.collections=t.get()}var o=this;o.collections=[],n()}angular.module("notosportal.media").controller("PhotoController",t),t.$inject=["GPCollections"]}(),function(){"use strict";function t(){function t(t,n,o){function e(){var t=o.appearAnimationDelay||1;t>1&&$(n).css("animation-delay",t+"ms"),$(n).addClass("animated").addClass(o.appearAnimation)}angular.element("body").hasClass("no-csstransitions")||$(n).bind("appear",e)}var n={restrict:"A",link:t};return n}angular.module("notosportal.widgets").directive("appearAnimation",t)}(),function(){"use strict";function t(t){function n(n,o,e){o.addClass("fwb-bg fwb-blur"),t(function(){var n=new Image,r='<div class="blur-box"/>';o.find("canvas").length||(e.image?n.src=e.image:"none"!==o.css("background-image")&&(n.src=o.css("background-image").replace("url(","").replace(")",""),o.css("background-image","none")),n.onload=function(){Pixastic.process(n,"blurfast",{amount:e.amount||2})},o.prepend(r).find(".blur-box").prepend(n)),t(function(){var t=o.find("canvas");t.width()==o.width()?t.css({marginLeft:0,marginTop:-((t.height()-o.height())/2)}):t.css({marginTop:0,marginLeft:-((t.width()-o.width())/2)}),$("body").addClass("blur-load")},50)})}var o={restrict:"A",link:n};return o}angular.module("notosportal.widgets").directive("blur",t),t.$inject=["$timeout"]}(),function(){"use strict";function t(){function t(t,n,o){n.find(".gallery-images, .lightbox").fancybox({nextEffect:"fade",prevEffect:"fade",openEffect:"fade",closeEffect:"fade",helpers:{overlay:{locked:!1},title:{type:"over"}},tpl:{closeBtn:'<a title="Sluiten" class="fancybox-item fancybox-close" href="javascript:;">Ã—</a>',next:'<a title="Volgende" class="fancybox-nav fancybox-next" href="javascript:;">\n						<span><svg x="0" y="0" width="9px" height="16px" viewBox="0 0 9 16" enable-background="new 0 0 9 16" xml:space="preserve"><polygon fill-rule="evenodd" clip-rule="evenodd" fill="#fcfcfc" points="1,0.001 0,1.001 7,8 0,14.999 1,15.999 9,8 "/></svg></span>\n					</a>',prev:'<a title="Vorige" class="fancybox-nav fancybox-prev" href="javascript:;">\n						<span><svg x="0" y="0" width="9px" height="16px" viewBox="0 0 9 16" enable-background="new 0 0 9 16" xml:space="preserve"><polygon fill-rule="evenodd" clip-rule="evenodd" fill="#fcfcfc" points="8,15.999 9,14.999 2,8 9,1.001 8,0.001 0,8 "/></svg></span>\n					</a>'}})}var n={restrict:"A",link:t};return n}angular.module("notosportal.widgets").directive("fancybox",t)}(),function(){"use strict";function t(){function t(t,n){n.addClass("livicon"),n.addLivicon()}var n={restrict:"A",replace:!0,scope:!1,link:t};return n}angular.module("notosportal.widgets").directive("livicon",t)}(),function(){"use strict";function t(t,n){function o(o,e,r){t(function(){function t(){var t=e.offset().top,r=n.pageYOffset;t>r?e.css({backgroundPosition:"50% "+(t-r)/o+"px"}):e.css({backgroundPosition:"50% "+-(t-r)/o+"px"})}e.addClass("fwb-bg fwb-blur");var o=r.speed||3;t(),angular.element(n).bind("scroll",t)})}var e={restrict:"A",link:o};return e}angular.module("notosportal.widgets").directive("paralax",t),t.$inject=["$timeout","$window"]}(),function(){"use strict";function t(t){function n(n,o,e){t(function(){var t=o;if(t.closest(".rs-slider").hasClass("full-width")){var n,e=angular.element("body"),r=(e.width(),0),i=104;angular.element("#top-box").length&&e.hasClass("hidden-top")&&(r=angular.element("#top-box").outerHeight()-32),n=e.width()>=1200?e.height()-(r+i):800,t.revolution({delay:6e3,startwidth:1200,startheight:n,hideThumbs:10,navigationType:"bullet",navigationArrows:"solo",navigationHAlign:"center",navigationVAlign:"top",navigationHOffset:-545,navigationVOffset:30,hideTimerBar:"on"}).parent().parent().removeClass("load")}else t.revolution({delay:6e3,startwidth:1200,startheight:500,hideThumbs:10,navigationType:"none",onHoverStop:"off"}).parent().parent().removeClass("load")})}var o={restrict:"A",link:n};return o}angular.module("notosportal.widgets").directive("rsSlider",t),t.$inject=["$timeout"]}(),function(){"use strict";function t(){this.config={appErrorPrefix:void 0},this.configure=function(t){this.config.appErrorPrefix=t},this.$get=function(){return{config:this.config}}}function n(t){t.decorator("$exceptionHandler",o)}function o(t,n,o){return function(e,r){var i=n.config.appErrorPrefix||"",a={exception:e,cause:r};e.message=i+e.message,t(e,r),o.error(e.message,a)}}angular.module("blocks.exception").provider("exceptionHandler",t).config(n),n.$inject=["$provide"],o.$inject=["$delegate","exceptionHandler","logger"]}(),function(){"use strict";function t(t){function n(n){return function(o){t.error(n,o)}}var o={catcher:n};return o}angular.module("blocks.exception").factory("exception",t),t.$inject=["logger"]}(),function(){"use strict";function t(t,n){function o(o,e,r){n.error(o,r),t.error("Fout: "+o,e)}function e(o,e,r){n.info(o,r),t.info("Info: "+o,e)}function r(o,e,r){n.success(o,r),t.info("Succes: "+o,e)}function i(o,e,r){n.warning(o,r),t.warn("Let op: "+o,e)}function a(o,e,r){n.warning(o,r),t.warn("Verwijderd: "+o,e)}function c(o,e,r){n.success(o,r),t.info("Bewaard: "+o,e)}var s={showToasts:!0,error:o,info:e,success:r,warning:i,removed:a,saved:c,log:t.log};return s}angular.module("blocks.logger").factory("logger",t),t.$inject=["$log","toastr"]}(),function(){"use strict";function t(){this.config={},this.$get=function(){return{config:this.config}}}function n(t,n,o){function e(t){t.forEach(function(t){t.config.title&&(t.config.ncyBreadcrumb={label:t.config.title.toLowerCase()}),l.state(t.state,t.config)})}function r(){return o.get()}function i(t){var n=null;return r().forEach(function(o){o.name===t&&(n=o)}),n}function a(){c(),s.otherwise("/index/dashboard")}function c(){n.$on("$stateChangeSuccess",function(o,e,r){var i=t.config.title+(e.title?" | "+e.title:"");n.title=i,n.$state=e})}var s=t.config.$urlRouterProvider,l=t.config.$stateProvider,u={configureStates:e,states:r,get:i};return a(),u}angular.module("blocks.router").provider("routehelperConfig",t).factory("routehelper",n),n.$inject=["routehelperConfig","$rootScope","$state"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vdG9zcG9ydGFsLm1vZHVsZS5qcyIsImNvcmUvY29yZS5tb2R1bGUuanMiLCJkYXNoYm9hcmQvZGFzaGJvYXJkLm1vZHVsZS5qcyIsImxheW91dC9sYXlvdXQubW9kdWxlLmpzIiwiaW5mby9pbmZvLm1vZHVsZS5qcyIsIm1lZGlhL21lZGlhLm1vZHVsZS5qcyIsIndpZGdldHMvd2lkZ2V0cy5tb2R1bGUuanMiLCJibG9ja3MvZXhjZXB0aW9uL2V4Y2VwdGlvbi5tb2R1bGUuanMiLCJibG9ja3MvbG9nZ2VyL2xvZ2dlci5tb2R1bGUuanMiLCJibG9ja3Mvcm91dGVyL3JvdXRlci5tb2R1bGUuanMiLCJjb3JlL2Jhc2U2NC5qcyIsImNvcmUvY29tbW9uLmpzIiwiYXBwLm1pbi5qcyIsImNvcmUvY29uZmlnLmpzIiwiY29yZS9jb25zdGFudHMuanMiLCJjb3JlL3NvY2lhbC5qcyIsImRhc2hib2FyZC9kYXNoYm9hcmQuY29udHJvbGxlci5qcyIsImRhc2hib2FyZC9kYXNoYm9hcmQucm91dGVzLmpzIiwibGF5b3V0L3NoZWxsLmNvbnRyb2xsZXIuanMiLCJpbmZvL2NhbXBhaWducy5jb250cm9sbGVyLmpzIiwiaW5mby9pbmZvLnJvdXRlcy5qcyIsIm1lZGlhL2dvb2dsZS5wbHVzLmNvbGxlY3Rpb25zLmpzIiwibWVkaWEvbWFpbGNoaW1wLmpzIiwibWVkaWEvbWVkaWEucm91dGVzLmpzIiwibWVkaWEvcGhvdG8uY29udHJvbGxlci5qcyIsIndpZGdldHMvYXBwZWFyLmRpcmVjdGl2ZS5qcyIsIndpZGdldHMvYmx1ci5kaXJlY3RpdmUuanMiLCJ3aWRnZXRzL2ZhbmN5Ym94LmRpcmVjdGl2ZS5qcyIsIndpZGdldHMvbGl2aWNvbi5kaXJlY3RpdmUuanMiLCJ3aWRnZXRzL3BhcmFsYXguZGlyZWN0aXZlLmpzIiwid2lkZ2V0cy9yc3NsaWRlci5kaXJlY3RpdmUuanMiLCJibG9ja3MvZXhjZXB0aW9uL2V4Y2VwdGlvbi1oYW5kbGVyLnByb3ZpZGVyLmpzIiwiYmxvY2tzL2V4Y2VwdGlvbi9leGNlcHRpb24uanMiLCJibG9ja3MvbG9nZ2VyL2xvZ2dlci5qcyIsImJsb2Nrcy9yb3V0ZXIvcm91dGVoZWxwZXIuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsIkJhc2U2NCIsImVuY29kZSIsImlucHV0IiwiY2hyMSIsImNocjIiLCJlbmMxIiwiZW5jMiIsImVuYzMiLCJvdXRwdXQiLCJjaHIzIiwiZW5jNCIsImkiLCJjaGFyQ29kZUF0IiwiaXNOYU4iLCJrZXlTdHIiLCJjaGFyQXQiLCJsZW5ndGgiLCJkZWNvZGUiLCJiYXNlNjR0ZXN0IiwiZXhlYyIsIndpbmRvdyIsImFsZXJ0IiwicmVwbGFjZSIsImluZGV4T2YiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJzZXJ2aWNlIiwiZmFjdG9yeSIsImNvbW1vbiIsIiRxIiwiJHJvb3RTY29wZSIsIiR0aW1lb3V0IiwibG9nZ2VyIiwiJGJyb2FkY2FzdCIsImFwcGx5IiwiYXJndW1lbnRzIiwiaXNOdW1iZXIiLCJ2YWwiLCJ0ZXN0IiwidGV4dENvbnRhaW5zIiwidGV4dCIsInNlYXJjaFRleHQiLCJ0b0xvd2VyQ2FzZSIsIiRpbmplY3QiLCJ0b2FzdHJDb25maWciLCJ0b2FzdHIiLCJvcHRpb25zIiwidGltZU91dCIsImNsb3NlQnV0dG9uIiwicHJvZ3Jlc3NCYXIiLCJwb3NpdGlvbkNsYXNzIiwiY29uZmlndXJlIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJHN0YXRlUHJvdmlkZXIiLCJyb3V0ZWhlbHBlckNvbmZpZ1Byb3ZpZGVyIiwiJGJyZWFkY3J1bWJQcm92aWRlciIsIlJlc3Rhbmd1bGFyUHJvdmlkZXIiLCJBbmFseXRpY3NQcm92aWRlciIsImNvbmZpZ3VyZVJvdXRpbmciLCJjb25maWciLCJ0aXRsZSIsImFwcFRpdGxlIiwiY29uZmlndXJlQnJlYWRjcnVtYiIsInNldE9wdGlvbnMiLCJwcmVmaXhTdGF0ZU5hbWUiLCJ0ZW1wbGF0ZSIsImluY2x1ZGVBYnN0cmFjdCIsImNvbmZpZ3VyZVJlc3Rhbmd1bGFyIiwiYmFzZVVybCIsInNldEJhc2VVcmwiLCJjb25maWd1cmVHb29nbGVBbmFseXRpY3MiLCJzZXRBY2NvdW50Iiwic2V0UGFnZUV2ZW50IiwiYWZ0ZXJWaWV3Q29udGVudExvYWRlZCIsIiRvbiIsImVsZW1lbnQiLCJhbmltYXRlIiwic2Nyb2xsVG9wIiwiY29yZSIsImFwcEVycm9yUHJlZml4IiwidmVyc2lvbiIsInZhbHVlIiwicnVuIiwiQW5hbHl0aWNzIiwiY29uc3RhbnQiLCJtb21lbnQiLCJnYXBpIiwiZmFjZWJvb2tJbml0IiwiJHdpbmRvdyIsImluaXRGYWNlYm9vayIsIkZCIiwiaW5pdCIsImFwcElkIiwiY2hhbm5lbFVybCIsImNvb2tpZSIsInhmYm1sIiwiZmJBc3luY0luaXQiLCJkIiwianMiLCJpZCIsInJlZiIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVFbGVtZW50IiwiYXN5bmMiLCJzcmMiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwiZG9jdW1lbnQiLCJEYXNoYm9hcmRDb250cm9sbGVyIiwiR1BDb2xsZWN0aW9ucyIsIk1haWxDaGltcCIsImFjdGl2YXRlIiwidm0iLCJjb2xsZWN0aW9ucyIsInRha2UiLCJjYW1wYWlnbnMiLCJ0aGVuIiwicmVzcG9uc2UiLCJ0aGlzIiwiZmFjZWJvb2t1cmwiLCJjb250cm9sbGVyIiwiY29uZmlnUm91dGVzIiwicm91dGVoZWxwZXIiLCJjb25maWd1cmVTdGF0ZXMiLCJnZXRTdGF0ZXMiLCJzdGF0ZSIsImFic3RyYWN0IiwidXJsIiwidmlld3MiLCJtYWluQCIsInRlbXBsYXRlVXJsIiwiY29udGVudEBpbmRleCIsImNvbnRyb2xsZXJBcyIsInNsaWRlckBpbmRleCIsIlNoZWxsQ29udHJvbGxlciIsIiRzdGF0ZSIsIm1lbWJlckNvdW50IiwiY2FtcGFpZ25fbWVtYmVycyIsImRhdGEiLCJzdGF0cyIsIm1lbWJlcl9jb3VudCIsIkNhbXBhaWduc0NvbnRyb2xsZXIiLCJjYW1wYWlnbnNTdWNjZXNzIiwiY29udGVudEBpbmZvIiwiZ2V0IiwibnVtYmVyIiwicmVzdWx0IiwicHVzaCIsIm5hbWUiLCJocmVmIiwicHJldmlldyIsIiRodHRwIiwiZm9yRWFjaCIsImNhbXBhaWduIiwicmVjaXBpZW50cyIsInNlZ21lbnRfb3B0cyIsIm1lbWJlckNvdW50U3VjY2VzcyIsInN1Y2Nlc3MiLCJjb250ZW50QG1lZGlhIiwiUGhvdG9Db250cm9sbGVyIiwiYXBwZWFyQW5pbWF0aW9uIiwibGlua0Z1bmMiLCJzY29wZSIsImF0dHJzIiwiYXBwZWFyIiwiZGVsYXkiLCJhcHBlYXJBbmltYXRpb25EZWxheSIsIiQiLCJjc3MiLCJhZGRDbGFzcyIsImhhc0NsYXNzIiwiYmluZCIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwibGluayIsImJsdXIiLCJpbWciLCJJbWFnZSIsInByZXBlbmRCb3giLCJmaW5kIiwiaW1hZ2UiLCJvbmxvYWQiLCJQaXhhc3RpYyIsInByb2Nlc3MiLCJhbW91bnQiLCJwcmVwZW5kIiwiY2FudmFzIiwid2lkdGgiLCJtYXJnaW5MZWZ0IiwibWFyZ2luVG9wIiwiaGVpZ2h0IiwiZmFuY3lib3giLCJuZXh0RWZmZWN0IiwicHJldkVmZmVjdCIsIm9wZW5FZmZlY3QiLCJjbG9zZUVmZmVjdCIsImhlbHBlcnMiLCJvdmVybGF5IiwibG9ja2VkIiwidHlwZSIsInRwbCIsImNsb3NlQnRuIiwibmV4dCIsInByZXYiLCJsaXZpY29uIiwiYWRkTGl2aWNvbiIsInBhcmFsYXgiLCJiZ1Bvc2l0aW9uIiwiJHRoaXNZIiwib2Zmc2V0IiwidG9wIiwiJHdpbmRvd1kiLCJwYWdlWU9mZnNldCIsImJhY2tncm91bmRQb3NpdGlvbiIsInNwZWVkIiwicnNTbGlkZXIiLCJyZXZvbHV0aW9uU2xpZGVyIiwiY2xvc2VzdCIsImJvZHkiLCJ0b3BIZWlnaHQiLCJoZWFkZXJIZWlnaHQiLCJvdXRlckhlaWdodCIsInJldm9sdXRpb24iLCJzdGFydHdpZHRoIiwic3RhcnRoZWlnaHQiLCJoaWRlVGh1bWJzIiwibmF2aWdhdGlvblR5cGUiLCJuYXZpZ2F0aW9uQXJyb3dzIiwibmF2aWdhdGlvbkhBbGlnbiIsIm5hdmlnYXRpb25WQWxpZ24iLCJuYXZpZ2F0aW9uSE9mZnNldCIsIm5hdmlnYXRpb25WT2Zmc2V0IiwiaGlkZVRpbWVyQmFyIiwicGFyZW50IiwicmVtb3ZlQ2xhc3MiLCJvbkhvdmVyU3RvcCIsImV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlciIsInVuZGVmaW5lZCIsIiRnZXQiLCIkcHJvdmlkZSIsImRlY29yYXRvciIsImV4dGVuZEV4Y2VwdGlvbkhhbmRsZXIiLCIkZGVsZWdhdGUiLCJleGNlcHRpb25IYW5kbGVyIiwiZXhjZXB0aW9uIiwiY2F1c2UiLCJlcnJvckRhdGEiLCJtZXNzYWdlIiwiZXJyb3IiLCJwcm92aWRlciIsImNhdGNoZXIiLCJyZWFzb24iLCIkbG9nIiwiaW5mbyIsIndhcm5pbmciLCJ3YXJuIiwicmVtb3ZlZCIsInNhdmVkIiwic2hvd1RvYXN0cyIsImxvZyIsInJvdXRlaGVscGVyQ29uZmlnIiwic3RhdGVzIiwibmN5QnJlYWRjcnVtYiIsImxhYmVsIiwicGF0dGVybiIsInVwZGF0ZURvY1RpdGxlIiwib3RoZXJ3aXNlIiwiZXZlbnQiLCJjdXJyZW50IiwicHJldmlvdXMiXSwibWFwcGluZ3MiOiJDQUFBLFdBQ0EsWUFFQUEsU0FDQUMsT0FBQSxlQUVBLG1CQUNBLHFCQUNBLHNCQUdBLHdCQUNBLG1CQUNBLHlCQ2JBRCxRQUNBQyxPQUFBLG9CQUVBLFlBQUEsYUFBQSxhQUdBLGVBQ0EseUJBQ0EsY0FDQSwyQkFHQSxtQkFDQSxnQkFDQSxrQkNkQSxXQUNBLFlBRUFELFNBQ0FDLE9BQUEsK0JDSkEsV0FDQSxZQUVBRCxTQUNBQyxPQUFBLDRCQ0pBLFdBQ0EsWUFFQUQsU0FDQUMsT0FBQSwwQkNKQSxXQUNBLFlBRUFELFNBQ0FDLE9BQUEsMkJDSkEsV0FDQSxZQUVBRCxTQUNBQyxPQUFBLDZCQ0pBLFdBQ0EsWUFFQUQsU0FDQUMsT0FBQSxvQkFBQSxxQkNKQSxXQUNBLFlBRUFELFNBQ0FDLE9BQUEsdUJDSkEsV0FDQSxZQUVBRCxTQUNBQyxPQUFBLGlCQUNBLGlCQ0FBLFdBQ0EsWUFPQSxTQUFBQyxLQVVBLFFBQUFDLEdBQUFDLEdBQ0EsR0FDQUMsR0FBQUMsRUFDQUMsRUFBQUMsRUFBQUMsRUFGQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQSxDQUVBLEdBQ0FSLEdBQUFELEVBQUFVLFdBQUFELEtBQ0FQLEVBQUFGLEVBQUFVLFdBQUFELEtBQ0FGLEVBQUFQLEVBQUFVLFdBQUFELEtBRUFOLEVBQUFGLEdBQUEsRUFDQUcsR0FBQSxFQUFBSCxJQUFBLEVBQUFDLEdBQUEsRUFDQUcsR0FBQSxHQUFBSCxJQUFBLEVBQUFLLEdBQUEsRUFDQUMsRUFBQSxHQUFBRCxFQUVBSSxNQUFBVCxHQUNBRyxFQUFBRyxFQUFBLEdBQ0FHLE1BQUFKLEtBQ0FDLEVBQUEsSUFHQUYsRUFBQUEsRUFDQU0sRUFBQUMsT0FBQVYsR0FDQVMsRUFBQUMsT0FBQVQsR0FDQVEsRUFBQUMsT0FBQVIsR0FDQU8sRUFBQUMsT0FBQUwsR0FDQVAsRUFBQUMsRUFBQUssRUFBQSxHQUNBSixFQUFBQyxFQUFBQyxFQUFBRyxFQUFBLFNBQ0FDLEVBQUFULEVBQUFjLE9BRUEsT0FBQVIsR0FHQSxRQUFBUyxHQUFBZixHQUNBLEdBQ0FDLEdBQUFDLEVBQ0FDLEVBQUFDLEVBQUFDLEVBRkFDLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsRUFHQU8sRUFBQSxxQkFDQUEsR0FBQUMsS0FBQWpCLElBQ0FrQixPQUFBQyxNQUFBLG9KQUlBbkIsRUFBQUEsRUFBQW9CLFFBQUEsc0JBQUEsR0FFQSxHQUNBakIsR0FBQVMsRUFBQVMsUUFBQXJCLEVBQUFhLE9BQUFKLE1BQ0FMLEVBQUFRLEVBQUFTLFFBQUFyQixFQUFBYSxPQUFBSixNQUNBSixFQUFBTyxFQUFBUyxRQUFBckIsRUFBQWEsT0FBQUosTUFDQUQsRUFBQUksRUFBQVMsUUFBQXJCLEVBQUFhLE9BQUFKLE1BRUFSLEVBQUFFLEdBQUEsRUFBQUMsR0FBQSxFQUNBRixHQUFBLEdBQUFFLElBQUEsRUFBQUMsR0FBQSxFQUNBRSxHQUFBLEVBQUFGLElBQUEsRUFBQUcsRUFFQUYsR0FBQWdCLE9BQUFDLGFBQUF0QixHQUVBLElBQUFJLElBQ0FDLEdBQUFnQixPQUFBQyxhQUFBckIsSUFFQSxJQUFBTSxJQUNBRixHQUFBZ0IsT0FBQUMsYUFBQWhCLElBR0FOLEVBQUFDLEVBQUFLLEVBQUEsR0FDQUosRUFBQUMsRUFBQUMsRUFBQUcsRUFBQSxTQUVBQyxFQUFBVCxFQUFBYyxPQUVBLE9BQUFSLEdBbEZBLEdBQUFNLEdBQUEsb0VBQ0FZLEdBQ0F6QixPQUFBQSxFQUNBZ0IsT0FBQUEsRUFHQSxPQUFBUyxHQVpBNUIsUUFDQUMsT0FBQSxvQkFDQTRCLFFBQUEsU0FBQTNCLE1DTEEsV0FDQSxZQU1BLFNBQUE0QixHQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQWdCQSxRQUFBQyxLQUNBLE1BQUFILEdBQUFHLFdBQUFDLE1BQUFKLEVBQUFLLFdBSUEsUUFBQUMsR0FBQUMsR0FFQSxNQUFBLFlBQUFDLEtBQUFELEdBR0EsUUFBQUUsR0FBQUMsRUFBQUMsR0FDQSxNQUFBRCxJQUFBLEtBQUFBLEVBQUFFLGNBQUFuQixRQUFBa0IsRUFBQUMsZUF6QkEsR0FBQWhCLElBRUFPLFdBQUFBLEVBQ0FKLEdBQUFBLEVBQ0FFLFNBQUFBLEVBRUFLLFNBQUFBLEVBQ0FKLE9BQUFBLEVBQ0FPLGFBQUFBLEVBR0EsT0FBQWIsR0FqQkE1QixRQUNBQyxPQUFBLG9CQUNBNEIsUUFBQSxTQUFBQyxHQ3NOSUEsRUFBT2UsU0FBVyxLQUFNLGFBQWMsV0FBWSxhQ2hPdEQsV0FDQSxZQU9BLFNBQUFDLEdBQUFDLEdBQ0FBLEVBQUFDLFFBQUFDLFFBQUEsSUFDQUYsRUFBQUMsUUFBQUUsYUFBQSxFQUNBSCxFQUFBQyxRQUFBRyxhQUFBLEVBQ0FKLEVBQUFDLFFBQUFJLGNBQUEscUJBa0JBLFFBQUFDLEdBQUFDLEVBQUFDLEVBQ0FDLEVBQUFDLEVBQ0FDLEVBQUFDLEdBUUEsUUFBQUMsS0FDQUosRUFBQUssT0FBQVAsbUJBQUFBLEVBQ0FFLEVBQUFLLE9BQUFOLGVBQUFBLEVBRUFDLEVBQUFLLE9BQUFDLE1BQUFELEVBQUFFLFNBR0EsUUFBQUMsS0FDQVAsRUFBQVEsWUFDQUMsZ0JBQUEsUUFDQUMsU0FBQSxhQUNBQyxpQkFBQSxJQUlBLFFBQUFDLEtBQ0EsR0FBQUMsR0FBQSxNQUVBWixHQUFBYSxXQUFBRCxHQUdBLFFBQUFFLEtBRUFiLEVBQUFjLFdBQUEsaUJBQ0FkLEVBQUFlLGFBQUEsdUJBOUJBZCxJQUNBSSxJQUVBSyxJQUNBRyxJQStCQSxRQUFBRyxHQUFBM0MsR0FDQUEsRUFBQTRDLElBQUEscUJBQUEsV0FDQTVFLFFBQUE2RSxRQUFBLGNBQUFDLFNBQUFDLFVBQUEsR0FBQSxPQXBFQSxHQUFBQyxHQUFBaEYsUUFBQUMsT0FBQSxtQkFFQStFLEdBQUFuQixPQUFBZixHRDJPSUEsRUFBYUQsU0FBVyxTQ2pPNUIsSUFBQWdCLElBQ0FvQixlQUFBLFVBQ0FsQixTQUFBLG1CQUNBbUIsUUFBQSxRQUdBRixHQUFBRyxNQUFBLFNBQUF0QixHQUVBbUIsRUFBQW5CLE9BQUFSLEdBRUEyQixFQUFBSSxJQUFBVCxHQUVBSyxFQUFBSSxLQUFBLFlBQUEsU0FBQUMsT0QyUUloQyxFQUFVUixTQUFXLHFCQUFzQixpQkFBa0IsNEJBQTZCLHNCQUF1QixzQkFBdUIscUJBUXhJOEIsRUFBdUI5QixTQUFXLGlCRTdTdEMsV0FDQSxZQUVBN0MsU0FDQUMsT0FBQSxvQkFDQXFGLFNBQUEsU0FBQXZDLFFBQ0F1QyxTQUFBLFNBQUFDLFFBQ0FELFNBQUEsT0FBQUUsU0NSQSxXQUNBLFlBTUEsU0FBQUMsR0FBQUMsRUFBQTVELEdBUUEsUUFBQTZELEtBQ0FDLEdBQUFDLE1BQ0FDLE1BQUEsa0JBQ0FDLFdBQUEsa0NBQ0FDLFFBQUEsRUFDQUMsT0FBQSxFQUNBZixRQUFBLFNBWEFRLEVBQUFRLFlBQUEsV0FDQVAsSUFDQTdELEVBQUFLLFdBQUEsWUFhQSxTQUFBZ0UsR0FHQSxHQUFBQyxHQUNBQyxFQUFBLGlCQUNBQyxFQUFBSCxFQUFBSSxxQkFBQSxVQUFBLEVBRUFKLEdBQUFLLGVBQUFILEtBSUFELEVBQUFELEVBQUFNLGNBQUEsVUFDQUwsRUFBQUMsR0FBQUEsRUFDQUQsRUFBQU0sT0FBQSxFQUNBTixFQUFBTyxJQUFBLHNDQUVBTCxFQUFBTSxXQUFBQyxhQUFBVCxFQUFBRSxLQUVBUSxVQXhDQTlHLFFBQUFDLE9BQUEsb0JBQ0FtRixJQUFBSyxHSG9XSUEsRUFBYTVDLFNBQVcsVUFBVyxhSXBXdkMsV0FDQSxZQU9BLFNBQUFrRSxHQUFBQyxFQUFBQyxHQVVBLFFBQUFDLEtBQ0FDLEVBQUFDLFlBQUFKLEVBQUFLLEtBQUEsR0FFQUosRUFBQUssVUFBQSxHQUFBQyxLQUFBLFNBQUFDLEdBQ0FMLEVBQUFHLFVBQUFFLElBWkEsR0FBQUwsR0FBQU0sSUFDQU4sR0FBQU8sWUFBQSwwQ0FDQVAsRUFBQUMsZUFDQUQsRUFBQUcsYUFFQUosSUFaQWxILFFBQ0FDLE9BQUEseUJBQ0EwSCxXQUFBLHNCQUFBWixHSitYSUEsRUFBb0JsRSxTQUFXLGdCQUFpQixnQktyWXBELFdBQ0EsWUFPQSxTQUFBK0UsR0FBQUMsR0FDQUEsRUFBQUMsZ0JBQUFDLEtBR0EsUUFBQUEsS0FDQSxRQUVBQyxNQUFBLFFBQ0FuRSxRQUNBb0UsWUFBQSxFQUNBQyxJQUFBLFNBQ0FDLE9BQ0FDLFNBQ0FDLFlBQUEsZ0NBR0F2RSxNQUFBLFdBSUFrRSxNQUFBLGtCQUNBbkUsUUFDQXFFLElBQUEsYUFDQUMsT0FDQUcsaUJBQ0FELFlBQUEsc0NBQ0FWLFdBQUEsc0JBQ0FZLGFBQUEsTUFFQUMsZ0JBQ0FILFlBQUEscUNBR0F2RSxNQUFBLGVBdENBOUQsUUFDQUMsT0FBQSx5QkFDQW1GLElBQUF3QyxHTGdaSUEsRUFBYS9FLFNBQVcsa0JNcFo1QixXQUNBLFlBT0EsU0FBQTRGLEdBQUF4QixFQUFBeUIsR0FXQSxRQUFBeEIsS0FDQUQsRUFBQTBCLGNBQUFwQixLQUFBLFNBQUFDLEdBQ0FMLEVBQUF5QixpQkFBQXBCLEVBQUFxQixLQUFBQyxNQUFBQyxlQVhBLEdBQUE1QixHQUFBTSxJQUVBTixHQUFBeUIsaUJBQUEsRUFHQTFCLElBWkFsSCxRQUNBQyxPQUFBLHNCQUNBMEgsV0FBQSxrQkFBQWMsR05tZElBLEVBQWdCNUYsU0FBVyxZQUFhLGFPeGQ1QyxXQUNBLFlBT0EsU0FBQW1HLEdBQUEvQixHQVFBLFFBQUFDLEtBR0EsUUFBQStCLEdBQUF6QixHQUNBTCxFQUFBRyxVQUFBRSxFQUFBcUIsS0FBQXZCLFVBSEFMLEVBQUFLLFlBQUFDLEtBQUEwQixHQVBBLEdBQUE5QixHQUFBTSxJQUNBTixHQUFBRyxhQUVBSixJQVZBbEgsUUFDQUMsT0FBQSxvQkFDQTBILFdBQUEsc0JBQUFxQixHUHFmSUEsRUFBb0JuRyxTQUFXLGdCUTNmbkMsV0FDQSxZQU9BLFNBQUErRSxHQUFBQyxHQUNBQSxFQUFBQyxnQkFBQUMsS0FHQSxRQUFBQSxLQUNBLFFBRUFDLE1BQUEsT0FDQW5FLFFBQ0FvRSxZQUFBLEVBQ0FDLElBQUEsUUFDQUMsT0FDQUMsU0FDQUMsWUFBQSxnQ0FHQXZFLE1BQUEsVUFJQWtFLE1BQUEsZUFDQW5FLFFBQ0FxRSxJQUFBLFdBQ0FDLE9BQ0FlLGdCQUNBYixZQUFBLGlDQUdBdkUsTUFBQSxhQUlBa0UsTUFBQSxhQUNBbkUsUUFDQXFFLElBQUEsU0FDQUMsT0FDQWUsZ0JBQ0FiLFlBQUEsK0JBR0F2RSxNQUFBLHNCQUlBa0UsTUFBQSxZQUNBbkUsUUFDQXFFLElBQUEsUUFDQUMsT0FDQWUsZ0JBQ0FiLFlBQUEsOEJBR0F2RSxNQUFBLHdCUm9nQlksRVEvZlprRSxNQUFBLGlCQUNBbkUsUUFDQXFFLElBQUEsYUFDQUMsT0FDQWUsZ0JBQ0FiLFlBQUEsaUNBQ0FWLFdBQUEsc0JBQ0FZLGFBQUEsT0FHQXpFLE1BQUEsbUJBeEVBOUQsUUFDQUMsT0FBQSxvQkFDQW1GLElBQUF3QyxHUnNnQklBLEVBQWEvRSxTQUFXLGtCU3pnQjVCLFdBQ0EsWUFPQSxTQUFBbUUsS0FnQ0EsUUFBQW1DLEtBQ0EsTUFBQS9CLEdBR0EsUUFBQUMsR0FBQStCLEdBR0EsSUFGQSxHQUFBQyxNQUNBeEksRUFBQSxFQUNBdUksRUFBQXZJLEdBQUFBLEVBQUF1RyxFQUFBbEcsUUFDQW1JLEVBQUFDLEtBQUFsQyxFQUFBdkcsSUFDQUEsR0FFQSxPQUFBd0ksR0F6Q0EsR0FBQXpILElBQ0F1SCxJQUFBQSxFQUNBOUIsS0FBQUEsR0FRQUQsSUFFQW1DLEtBQUEsWUFDQUMsS0FBQSxxRUFHQUQsS0FBQSxZQUNBQyxLQUFBLG1FQUNBQyxRQUFBLGdIQUdBRixLQUFBLFlBQ0FDLEtBQUEsbUVBQ0FDLFFBQUEsZ0hBSUEsT0FBQTdILEdBbENBNUIsUUFDQUMsT0FBQSxxQkFDQTRCLFFBQUEsZ0JBQUFtRixNQ0xBLFdBQ0EsWUFPQSxTQUFBQyxHQUFBeUMsRUFBQTNILEdBU0EsUUFBQXVGLEdBQUFELEdBT0EsUUFBQTRCLEdBQUF6QixHQUNBLEdBQUE2QixNQUNBeEksRUFBQSxDQU9BLE9BTkFiLFNBQUEySixRQUFBbkMsRUFBQXFCLEtBQUF2QixVQUFBLFNBQUFzQyxJQUNBQSxFQUFBQyxXQUFBQyxjQUFBLEVBQUFqSixJQUNBd0ksRUFBQUMsS0FBQU0sR0FDQS9JLE9BR0F3SSxFQVpBLE1BQUFLLEdBQUFQLElBQUEsNEJBQ0E1QixLQUFBMEIsR0FnQkEsUUFBQU4sS0FJQSxRQUFBb0IsR0FBQXZDLEdBQ0EsTUFBQUEsR0FBQXFCLEtBSkEsTUFBQWEsR0FBQVAsSUFBQSwrQkFDQWEsUUFBQUQsR0EvQkEsR0FDQW5JLElBQ0EwRixVQUFBQSxFQUNBcUIsWUFBQUEsRUFFQSxPQUFBL0csR0FYQTVCLFFBQ0FDLE9BQUEscUJBQ0E0QixRQUFBLFlBQUFvRixHVjJyQklBLEVBQVVwRSxTQUFXLFFBQVMsU1dsc0JsQyxXQUNBLFlBT0EsU0FBQStFLEdBQUFDLEdBQ0FBLEVBQUFDLGdCQUFBQyxLQUdBLFFBQUFBLEtBQ0EsUUFFQUMsTUFBQSxRQUNBbkUsUUFDQW9FLFlBQUEsRUFDQUMsSUFBQSxTQUNBQyxPQUNBQyxTQUNBQyxZQUFBLGdDQUdBdkUsTUFBQSxjQUlBa0UsTUFBQSxlQUNBbkUsUUFDQXFFLElBQUEsVUFDQUMsT0FDQThCLGlCQUNBNUIsWUFBQSwrQkFDQVYsV0FBQSxrQkFDQVksYUFBQSxPQUdBekUsTUFBQSxZQW5DQTlELFFBQ0FDLE9BQUEsb0JBQ0FtRixJQUFBd0MsR1g2c0JJQSxFQUFhL0UsU0FBVyxrQllqdEI1QixXQUNBLFlBT0EsU0FBQXFILEdBQUFsRCxHQVVBLFFBQUFFLEtBQ0FDLEVBQUFDLFlBQUFKLEVBQUFtQyxNQVRBLEdBQUFoQyxHQUFBTSxJQUNBTixHQUFBQyxlQUdBRixJQVhBbEgsUUFDQUMsT0FBQSxxQkFDQTBILFdBQUEsa0JBQUF1QyxHWnd3QklBLEVBQWdCckgsU0FBVyxvQmE3d0IvQixXQUNBLFlBT0EsU0FBQXNILEtBU0EsUUFBQUMsR0FBQUMsRUFBQXhGLEVBQUF5RixHQUlBLFFBQUFDLEtBQ0EsR0FBQUMsR0FBQUYsRUFBQUcsc0JBQUEsQ0FDQUQsR0FBQSxHQUNBRSxFQUFBN0YsR0FBQThGLElBQUEsa0JBQUFILEVBQUEsTUFFQUUsRUFBQTdGLEdBQUErRixTQUFBLFlBQUFBLFNBQUFOLEVBQUFILGlCQVJBbkssUUFBQTZFLFFBQUEsUUFBQWdHLFNBQUEsc0JBQ0FILEVBQUE3RixHQUFBaUcsS0FBQSxTQUFBUCxHQVZBLEdBQUFRLElBQ0FDLFNBQUEsSUFDQUMsS0FBQWIsRUFHQSxPQUFBVyxHQVhBL0ssUUFDQUMsT0FBQSx1QkFDQThLLFVBQUEsa0JBQUFaLE1DTEEsV0FDQSxZQU9BLFNBQUFlLEdBQUFqSixHQVNBLFFBQUFtSSxHQUFBQyxFQUFBeEYsRUFBQXlGLEdBQ0F6RixFQUFBK0YsU0FBQSxtQkFFQTNJLEVBQUEsV0FFQSxHQUFBa0osR0FBQSxHQUFBQyxPQUNBQyxFQUFBLHlCQUVBeEcsR0FBQXlHLEtBQUEsVUFBQXBLLFNBRUFvSixFQUFBaUIsTUFDQUosRUFBQXhFLElBQUEyRCxFQUFBaUIsTUFDQSxTQUFBMUcsRUFBQThGLElBQUEsc0JBQ0FRLEVBQUF4RSxJQUFBOUIsRUFBQThGLElBQUEsb0JBQ0FuSixRQUFBLE9BQUEsSUFBQUEsUUFBQSxJQUFBLElBQ0FxRCxFQUFBOEYsSUFBQSxtQkFBQSxTQUdBUSxFQUFBSyxPQUFBLFdBQ0FDLFNBQUFDLFFBQUFQLEVBQUEsWUFDQVEsT0FBQXJCLEVBQUFxQixRQUFBLEtBSUE5RyxFQUNBK0csUUFBQVAsR0FDQUMsS0FBQSxhQUNBTSxRQUFBVCxJQUdBbEosRUFBQSxXQUNBLEdBQUE0SixHQUFBaEgsRUFBQXlHLEtBQUEsU0FFQU8sR0FBQUMsU0FBQWpILEVBQUFpSCxRQUNBRCxFQUFBbEIsS0FDQW9CLFdBQUEsRUFDQUMsYUFBQUgsRUFBQUksU0FBQXBILEVBQUFvSCxVQUFBLEtBR0FKLEVBQUFsQixLQUNBcUIsVUFBQSxFQUNBRCxjQUFBRixFQUFBQyxRQUFBakgsRUFBQWlILFNBQUEsS0FJQXBCLEVBQUEsUUFBQUUsU0FBQSxjQUNBLE1BdERBLEdBQUFHLElBQ0FDLFNBQUEsSUFDQUMsS0FBQWIsRUFHQSxPQUFBVyxHQVhBL0ssUUFDQUMsT0FBQSx1QkFDQThLLFVBQUEsT0FBQUcsR2R1M0JJQSxFQUFLckksU0FBVyxlZTUzQnBCLFdBQ0EsWUFPQSxTQUFBcUosS0FTQSxRQUFBOUIsR0FBQUMsRUFBQXhGLEVBQUF5RixHQUNBekYsRUFBQXlHLEtBQUEsOEJBQUFZLFVBQ0FDLFdBQUEsT0FDQUMsV0FBQSxPQUNBQyxXQUFBLE9BQ0FDLFlBQUEsT0FDQUMsU0FDQUMsU0FDQUMsUUFBQSxHQUVBM0ksT0FDQTRJLEtBQUEsU0FHQUMsS0FDQUMsU0FBQSxvRkFDQUMsS0FBQSw2VkFHQUMsS0FBQSw4VkEzQkEsR0FBQS9CLElBQ0FDLFNBQUEsSUFDQUMsS0FBQWIsRUFHQSxPQUFBVyxHQVhBL0ssUUFDQUMsT0FBQSx1QkFDQThLLFVBQUEsV0FBQW1CLE1DTEEsV0FDQSxZQU9BLFNBQUFhLEtBV0EsUUFBQTNDLEdBQUFDLEVBQUF4RixHQUNBQSxFQUFBK0YsU0FBQSxXQUNBL0YsRUFBQW1JLGFBWkEsR0FBQWpDLElBQ0FDLFNBQUEsSUFDQXhKLFNBQUEsRUFDQTZJLE9BQUEsRUFDQVksS0FBQWIsRUFHQSxPQUFBVyxHQWJBL0ssUUFDQUMsT0FBQSx1QkFDQThLLFVBQUEsVUFBQWdDLE1DTEEsV0FDQSxZQU9BLFNBQUFFLEdBQUFoTCxFQUFBeUQsR0FTQSxRQUFBMEUsR0FBQUMsRUFBQXhGLEVBQUF5RixHQUNBckksRUFBQSxXQUlBLFFBQUFpTCxLQUNBLEdBQUFDLEdBQUF0SSxFQUFBdUksU0FBQUMsSUFDQUMsRUFBQTVILEVBQUE2SCxXQUVBSixHQUFBRyxFQUNBekksRUFBQThGLEtBQUE2QyxtQkFBQSxRQUFBTCxFQUFBRyxHQUFBRyxFQUFBLE9BRUE1SSxFQUFBOEYsS0FBQTZDLG1CQUFBLFNBQUFMLEVBQUFHLEdBQUFHLEVBQUEsT0FWQTVJLEVBQUErRixTQUFBLGtCQUNBLElBQUE2QyxHQUFBbkQsRUFBQW1ELE9BQUEsQ0FhQVAsS0FFQWxOLFFBQUE2RSxRQUFBYSxHQUFBb0YsS0FBQSxTQUFBb0MsS0ExQkEsR0FBQW5DLElBQ0FDLFNBQUEsSUFDQUMsS0FBQWIsRUFHQSxPQUFBVyxHQVhBL0ssUUFDQUMsT0FBQSx1QkFDQThLLFVBQUEsVUFBQWtDLEdqQjAvQklBLEVBQVFwSyxTQUFXLFdBQVksY2tCLy9CbkMsV0FDQSxZQU9BLFNBQUE2SyxHQUFBekwsR0FTQSxRQUFBbUksR0FBQUMsRUFBQXhGLEVBQUF5RixHQUNBckksRUFBQSxXQUVBLEdBQUEwTCxHQUFBOUksQ0FFQSxJQUFBOEksRUFBQUMsUUFBQSxjQUFBL0MsU0FBQSxjQUFBLENBQ0EsR0FJQW9CLEdBSkE0QixFQUFBN04sUUFBQTZFLFFBQUEsUUFFQWlKLEdBREFELEVBQUEvQixRQUNBLEdBQ0FpQyxFQUFBLEdBR0EvTixTQUFBNkUsUUFBQSxZQUFBM0QsUUFDQTJNLEVBQUFoRCxTQUFBLGdCQUNBaUQsRUFBQTlOLFFBQUE2RSxRQUFBLFlBQUFtSixjQUFBLElBSUEvQixFQURBNEIsRUFBQS9CLFNBQUEsS0FDQStCLEVBQUE1QixVQUFBNkIsRUFBQUMsR0FFQSxJQUVBSixFQUFBTSxZQUNBekQsTUFBQSxJQUNBMEQsV0FBQSxLQUNBQyxZQUFBbEMsRUFDQW1DLFdBQUEsR0FDQUMsZUFBQSxTQUNBQyxpQkFBQSxPQUNBQyxpQkFBQSxTQUNBQyxpQkFBQSxNQUNBQyxrQkFBQSxLQUNBQyxrQkFBQSxHQUNBQyxhQUFBLE9BQ0FDLFNBQUFBLFNBQUFDLFlBQUEsWUFFQWxCLEdBQUFNLFlBQ0F6RCxNQUFBLElBQ0EwRCxXQUFBLEtBQ0FDLFlBQUEsSUFDQUMsV0FBQSxHQUNBQyxlQUFBLE9BQ0FTLFlBQUEsUUFDQUYsU0FBQUEsU0FBQUMsWUFBQSxVQW5EQSxHQUFBOUQsSUFDQUMsU0FBQSxJQUNBQyxLQUFBYixFQUdBLE9BQUFXLEdBWEEvSyxRQUNBQyxPQUFBLHVCQUNBOEssVUFBQSxXQUFBMkMsR2xCb2tDSUEsRUFBUzdLLFNBQVcsZW1CM2tDeEIsV0FDQSxZQVdBLFNBQUFrTSxLQUVBdEgsS0FBQTVELFFBQ0FvQixlQUFBK0osUUFHQXZILEtBQUFwRSxVQUFBLFNBQUE0QixHQUNBd0MsS0FBQTVELE9BQUFvQixlQUFBQSxHQUdBd0MsS0FBQXdILEtBQUEsV0FDQSxPQUFBcEwsT0FBQTRELEtBQUE1RCxTQVdBLFFBQUFBLEdBQUFxTCxHQUNBQSxFQUFBQyxVQUFBLG9CQUFBQyxHQVVBLFFBQUFBLEdBQUFDLEVBQUFDLEVBQUFwTixHQUNBLE1BQUEsVUFBQXFOLEVBQUFDLEdBQ0EsR0FBQXZLLEdBQUFxSyxFQUFBekwsT0FBQW9CLGdCQUFBLEdBQ0F3SyxHQUFBRixVQUFBQSxFQUFBQyxNQUFBQSxFQUNBRCxHQUFBRyxRQUFBekssRUFBQXNLLEVBQUFHLFFBQ0FMLEVBQUFFLEVBQUFDLEdBVUF0TixFQUFBeU4sTUFBQUosRUFBQUcsUUFBQUQsSUF6REF6UCxRQUNBQyxPQUFBLG9CQUNBMlAsU0FBQSxtQkFBQWIsR0FDQWxMLE9BQUFBLEduQmduQ0lBLEVBQU9oQixTQUFXLFlBMkJsQnVNLEVBQXVCdk0sU0FBVyxZQUFhLG1CQUFvQixhb0I5b0N2RSxXQUNBLFlBT0EsU0FBQTBNLEdBQUFyTixHQU1BLFFBQUEyTixHQUFBSCxHQUNBLE1BQUEsVUFBQUksR0FDQTVOLEVBQUF5TixNQUFBRCxFQUFBSSxJQVBBLEdBQUFsTyxJQUNBaU8sUUFBQUEsRUFFQSxPQUFBak8sR0FUQTVCLFFBQ0FDLE9BQUEsb0JBQ0E0QixRQUFBLFlBQUEwTixHcEJvcUNJQSxFQUFVMU0sU0FBVyxhcUJ6cUN6QixXQUNBLFlBUUEsU0FBQVgsR0FBQTZOLEVBQUFoTixHQW1CQSxRQUFBNE0sR0FBQUQsRUFBQTdHLEVBQUEvRSxHQUNBZixFQUFBNE0sTUFBQUQsRUFBQTVMLEdBQ0FpTSxFQUFBSixNQUFBLFNBQUFELEVBQUE3RyxHQUdBLFFBQUFtSCxHQUFBTixFQUFBN0csRUFBQS9FLEdBQ0FmLEVBQUFpTixLQUFBTixFQUFBNUwsR0FDQWlNLEVBQUFDLEtBQUEsU0FBQU4sRUFBQTdHLEdBR0EsUUFBQW1CLEdBQUEwRixFQUFBN0csRUFBQS9FLEdBQ0FmLEVBQUFpSCxRQUFBMEYsRUFBQTVMLEdBQ0FpTSxFQUFBQyxLQUFBLFdBQUFOLEVBQUE3RyxHQUdBLFFBQUFvSCxHQUFBUCxFQUFBN0csRUFBQS9FLEdBQ0FmLEVBQUFrTixRQUFBUCxFQUFBNUwsR0FDQWlNLEVBQUFHLEtBQUEsV0FBQVIsRUFBQTdHLEdBR0EsUUFBQXNILEdBQUFULEVBQUE3RyxFQUFBL0UsR0FDQWYsRUFBQWtOLFFBQUFQLEVBQUE1TCxHQUNBaU0sRUFBQUcsS0FBQSxlQUFBUixFQUFBN0csR0FHQSxRQUFBdUgsR0FBQVYsRUFBQTdHLEVBQUEvRSxHQUNBZixFQUFBaUgsUUFBQTBGLEVBQUE1TCxHQUNBaU0sRUFBQUMsS0FBQSxZQUFBTixFQUFBN0csR0E3Q0EsR0FBQWpILElBQ0F5TyxZQUFBLEVBRUFWLE1BQUFBLEVBQ0FLLEtBQUFBLEVBQ0FoRyxRQUFBQSxFQUNBaUcsUUFBQUEsRUFFQUUsUUFBQUEsRUFDQUMsTUFBQUEsRUFHQUUsSUFBQVAsRUFBQU8sSUFHQSxPQUFBMU8sR0F0QkE1QixRQUNBQyxPQUFBLGlCQUNBNEIsUUFBQSxTQUFBSyxHQUVBQSxFQUFBVyxTQUFBLE9BQUEsYUNQQSxXQUNBLFlBU0EsU0FBQTBOLEtBRUE5SSxLQUFBNUQsVUFFQTRELEtBQUF3SCxLQUFBLFdBQ0EsT0FDQXBMLE9BQUE0RCxLQUFBNUQsU0FLQSxRQUFBZ0UsR0FBQTBJLEVBQUF2TyxFQUFBMEcsR0FlQSxRQUFBWixHQUFBMEksR0FDQUEsRUFBQTdHLFFBQUEsU0FBQTNCLEdBQ0FBLEVBQUFuRSxPQUFBQyxRQUNBa0UsRUFBQW5FLE9BQUE0TSxlQUNBQyxNQUFBMUksRUFBQW5FLE9BQUFDLE1BQUFsQixnQkFJQVcsRUFBQXlFLE1BQUFBLEVBQUFBLE1BQUFBLEVBQUFuRSxVQUlBLFFBQUEyTSxLQUNBLE1BQUE5SCxHQUFBUyxNQUdBLFFBQUFBLEdBQUF3SCxHQUNBLEdBQUF0SCxHQUFBLElBTUEsT0FMQW1ILEtBQUE3RyxRQUFBLFNBQUEzQixHQUNBQSxFQUFBdUIsT0FBQW9ILElBQ0F0SCxFQUFBckIsS0FHQXFCLEVBSUEsUUFBQXhELEtBQ0ErSyxJQUNBdE4sRUFBQXVOLFVBQUEsb0JBR0EsUUFBQUQsS0FDQTVPLEVBQUE0QyxJQUFBLHNCQUNBLFNBQUFrTSxFQUFBQyxFQUFBQyxHQUNBLEdBQUFsTixHQUFBeU0sRUFBQTFNLE9BQUFDLE9BQUFpTixFQUFBak4sTUFBQSxNQUFBaU4sRUFBQWpOLE1BQUEsR0FDQTlCLEdBQUE4QixNQUFBQSxFQUNBOUIsRUFBQTBHLE9BQUFxSSxJQW5EQSxHQUFBek4sR0FBQWlOLEVBQUExTSxPQUFBUCxtQkFDQUMsRUFBQWdOLEVBQUExTSxPQUFBTixlQUVBM0IsR0FDQWtHLGdCQUFBQSxFQUNBMEksT0FBQUEsRUFDQXJILElBQUFBLEVBS0EsT0FGQXRELEtBRUFqRSxFQTlCQTVCLFFBQ0FDLE9BQUEsaUJBQ0EyUCxTQUFBLG9CQUFBVyxHQUNBMU8sUUFBQSxjQUFBZ0csR0FFQUEsRUFBQWhGLFNBQUEsb0JBQUEsYUFBQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsJywgW1xuICAgICAgICAgICAgLy9zaGFyZWQgbW9kdWxlc1xuICAgICAgICAgICAgJ25vdG9zcG9ydGFsLmNvcmUnLFxuICAgICAgICAgICAgJ25vdG9zcG9ydGFsLmxheW91dCcsXG4gICAgICAgICAgICAnbm90b3Nwb3J0YWwud2lkZ2V0cycsXG5cbiAgICAgICAgICAgIC8vYXBwIG1vZHVsZXNcbiAgICAgICAgICAgICdub3Rvc3BvcnRhbC5kYXNoYm9hcmQnLFxuICAgICAgICAgICAgJ25vdG9zcG9ydGFsLmluZm8nLFxuICAgICAgICAgICAgJ25vdG9zcG9ydGFsLm1lZGlhJ1xuICAgICAgICBdKTtcbn0pKCk7IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLmNvcmUnLCBbXG4gICAgICAgIC8vQW5ndWxhclxuICAgICAgICAnbmdBbmltYXRlJywgJ25nU2FuaXRpemUnLCAnbmdSZXNvdXJjZScsXG5cbiAgICAgICAgLy8zcmQgcGFydHlcbiAgICAgICAgJ3VpLmJvb3RzdHJhcCcsXG4gICAgICAgICduY3ktYW5ndWxhci1icmVhZGNydW1iJyxcbiAgICAgICAgJ3Jlc3Rhbmd1bGFyJyxcbiAgICAgICAgJ2FuZ3VsYXItZ29vZ2xlLWFuYWx5dGljcycsXG5cbiAgICAgICAgLy9jcm9zcyBhcHAgbW9kdWxlc1xuICAgICAgICAnYmxvY2tzLmV4Y2VwdGlvbicsXG4gICAgICAgICdibG9ja3MubG9nZ2VyJyxcbiAgICAgICAgJ2Jsb2Nrcy5yb3V0ZXInXG4gICAgXSk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLmRhc2hib2FyZCcsIFtdKTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLmxheW91dCcsIFtdKTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLmluZm8nLCBbXSk7XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdub3Rvc3BvcnRhbC5tZWRpYScsIFtdKTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLndpZGdldHMnLCBbXSk7XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdibG9ja3MuZXhjZXB0aW9uJywgWydibG9ja3MubG9nZ2VyJ10pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYmxvY2tzLmxvZ2dlcicsIFtdKTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2Jsb2Nrcy5yb3V0ZXInLCBbXG4gICAgICAgICAgICAndWkucm91dGVyJ1xuICAgICAgICBdKTtcbn0pKCk7IiwiLyoqXG4gKiBub3Rvc3BvcnRhbC5jb3JlXG4gKiBGQUNUT1JZOiBCYXNlNjRcbiAqL1xuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbm90b3Nwb3J0YWwuY29yZScpXG4gICAgICAgIC5mYWN0b3J5KCdCYXNlNjQnLCBCYXNlNjQpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gQmFzZTY0KCkge1xuICAgICAgICB2YXIga2V5U3RyID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICAgICAgICBlbmNvZGU6IGVuY29kZSxcbiAgICAgICAgICAgIGRlY29kZTogZGVjb2RlXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VydmljZTtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9IFwiXCI7XG4gICAgICAgICAgICB2YXIgY2hyMSwgY2hyMiwgY2hyMyA9IFwiXCI7XG4gICAgICAgICAgICB2YXIgZW5jMSwgZW5jMiwgZW5jMywgZW5jNCA9IFwiXCI7XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG5cbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBjaHIxID0gaW5wdXQuY2hhckNvZGVBdChpKyspO1xuICAgICAgICAgICAgICAgIGNocjIgPSBpbnB1dC5jaGFyQ29kZUF0KGkrKyk7XG4gICAgICAgICAgICAgICAgY2hyMyA9IGlucHV0LmNoYXJDb2RlQXQoaSsrKTtcblxuICAgICAgICAgICAgICAgIGVuYzEgPSBjaHIxID4+IDI7XG4gICAgICAgICAgICAgICAgZW5jMiA9ICgoY2hyMSAmIDMpIDw8IDQpIHwgKGNocjIgPj4gNCk7XG4gICAgICAgICAgICAgICAgZW5jMyA9ICgoY2hyMiAmIDE1KSA8PCAyKSB8IChjaHIzID4+IDYpO1xuICAgICAgICAgICAgICAgIGVuYzQgPSBjaHIzICYgNjM7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4oY2hyMikpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5jMyA9IGVuYzQgPSA2NDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzTmFOKGNocjMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuYzQgPSA2NDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQgK1xuICAgICAgICAgICAgICAgICAgICBrZXlTdHIuY2hhckF0KGVuYzEpICtcbiAgICAgICAgICAgICAgICAgICAga2V5U3RyLmNoYXJBdChlbmMyKSArXG4gICAgICAgICAgICAgICAgICAgIGtleVN0ci5jaGFyQXQoZW5jMykgK1xuICAgICAgICAgICAgICAgICAgICBrZXlTdHIuY2hhckF0KGVuYzQpO1xuICAgICAgICAgICAgICAgIGNocjEgPSBjaHIyID0gY2hyMyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZW5jMSA9IGVuYzIgPSBlbmMzID0gZW5jNCA9IFwiXCI7XG4gICAgICAgICAgICB9IHdoaWxlIChpIDwgaW5wdXQubGVuZ3RoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9IFwiXCI7XG4gICAgICAgICAgICB2YXIgY2hyMSwgY2hyMiwgY2hyMyA9IFwiXCI7XG4gICAgICAgICAgICB2YXIgZW5jMSwgZW5jMiwgZW5jMywgZW5jNCA9IFwiXCI7XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG5cbiAgICAgICAgICAgIC8vIHJlbW92ZSBhbGwgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgQS1aLCBhLXosIDAtOSwgKywgLywgb3IgPVxuICAgICAgICAgICAgdmFyIGJhc2U2NHRlc3QgPSAvW15BLVphLXowLTlcXCtcXC9cXD1dL2c7XG4gICAgICAgICAgICBpZiAoYmFzZTY0dGVzdC5leGVjKGlucHV0KSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5hbGVydChcIlRoZXJlIHdlcmUgaW52YWxpZCBiYXNlNjQgY2hhcmFjdGVycyBpbiB0aGUgaW5wdXQgdGV4dC5cXG5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwiVmFsaWQgYmFzZTY0IGNoYXJhY3RlcnMgYXJlIEEtWiwgYS16LCAwLTksICcrJywgJy8nLGFuZCAnPSdcXG5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwiRXhwZWN0IGVycm9ycyBpbiBkZWNvZGluZy5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoL1teQS1aYS16MC05XFwrXFwvXFw9XS9nLCBcIlwiKTtcblxuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGVuYzEgPSBrZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7XG4gICAgICAgICAgICAgICAgZW5jMiA9IGtleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtcbiAgICAgICAgICAgICAgICBlbmMzID0ga2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO1xuICAgICAgICAgICAgICAgIGVuYzQgPSBrZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7XG5cbiAgICAgICAgICAgICAgICBjaHIxID0gKGVuYzEgPDwgMikgfCAoZW5jMiA+PiA0KTtcbiAgICAgICAgICAgICAgICBjaHIyID0gKChlbmMyICYgMTUpIDw8IDQpIHwgKGVuYzMgPj4gMik7XG4gICAgICAgICAgICAgICAgY2hyMyA9ICgoZW5jMyAmIDMpIDw8IDYpIHwgZW5jNDtcblxuICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dCArIFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyMSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZW5jMyAhPSA2NCkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocjIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZW5jNCAhPSA2NCkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocjMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNocjEgPSBjaHIyID0gY2hyMyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZW5jMSA9IGVuYzIgPSBlbmMzID0gZW5jNCA9IFwiXCI7XG5cbiAgICAgICAgICAgIH0gd2hpbGUgKGkgPCBpbnB1dC5sZW5ndGgpO1xuXG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICB9XG4gICAgfTtcbn0pKCk7IiwiLyoqXG4gKiBub3Rvc3BvcnRhbC5jb3JlXG4gKiBGQUNUT1JZOiBjb21tb25cbiAqL1xuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbm90b3Nwb3J0YWwuY29yZScpXG4gICAgICAgIC5mYWN0b3J5KCdjb21tb24nLCBjb21tb24pO1xuXG4gICAgZnVuY3Rpb24gY29tbW9uKCRxLCAkcm9vdFNjb3BlLCAkdGltZW91dCwgbG9nZ2VyKSB7XG5cbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICAgICAgICAvLyBjb21tb24gYW5ndWxhciBkZXBlbmRlbmNpZXNcbiAgICAgICAgICAgICRicm9hZGNhc3Q6ICRicm9hZGNhc3QsXG4gICAgICAgICAgICAkcTogJHEsXG4gICAgICAgICAgICAkdGltZW91dDogJHRpbWVvdXQsXG4gICAgICAgICAgICAvLyBnZW5lcmljXG4gICAgICAgICAgICBpc051bWJlcjogaXNOdW1iZXIsXG4gICAgICAgICAgICBsb2dnZXI6IGxvZ2dlcixcbiAgICAgICAgICAgIHRleHRDb250YWluczogdGV4dENvbnRhaW5zXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VydmljZTtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gJGJyb2FkY2FzdCgpIHtcbiAgICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlLiRicm9hZGNhc3QuYXBwbHkoJHJvb3RTY29wZSwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gICAgICAgICAgICAvLyBuZWdhdGl2ZSBvciBwb3NpdGl2ZVxuICAgICAgICAgICAgcmV0dXJuICgvXlstXT9cXGQrJC8pLnRlc3QodmFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHRleHRDb250YWlucyh0ZXh0LCBzZWFyY2hUZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGV4dCAmJiAtMSAhPT0gdGV4dC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2VhcmNoVGV4dC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7IixudWxsLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBjb3JlID0gYW5ndWxhci5tb2R1bGUoJ25vdG9zcG9ydGFsLmNvcmUnKTtcblxuICAgIGNvcmUuY29uZmlnKHRvYXN0ckNvbmZpZyk7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiB0b2FzdHJDb25maWcodG9hc3RyKSB7XG4gICAgICAgIHRvYXN0ci5vcHRpb25zLnRpbWVPdXQgPSA0MDAwO1xuICAgICAgICB0b2FzdHIub3B0aW9ucy5jbG9zZUJ1dHRvbiA9IHRydWU7XG4gICAgICAgIHRvYXN0ci5vcHRpb25zLnByb2dyZXNzQmFyID0gdHJ1ZTtcbiAgICAgICAgdG9hc3RyLm9wdGlvbnMucG9zaXRpb25DbGFzcyA9ICd0b2FzdC1ib3R0b20tcmlnaHQnO1xuICAgIH1cblxuICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgIGFwcEVycm9yUHJlZml4OiAnW0ZvdXRdICcsXG4gICAgICAgIGFwcFRpdGxlOiAnVkJTIERlIEtsaW10b3JlbicsXG4gICAgICAgIHZlcnNpb246ICcxLjAuMCdcbiAgICB9O1xuXG4gICAgY29yZS52YWx1ZSgnY29uZmlnJywgY29uZmlnKTtcblxuICAgIGNvcmUuY29uZmlnKGNvbmZpZ3VyZSk7XG5cbiAgICBjb3JlLnJ1bihhZnRlclZpZXdDb250ZW50TG9hZGVkKTtcblxuICAgIGNvcmUucnVuKGZ1bmN0aW9uKEFuYWx5dGljcykge30pOyAvL0luamVjdCBvbmNlIGZvciBhdXRvbWF0aWMgcGFnZS10cmFja2luZ1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY29uZmlndXJlKCR1cmxSb3V0ZXJQcm92aWRlciwgJHN0YXRlUHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgIHJvdXRlaGVscGVyQ29uZmlnUHJvdmlkZXIsICRicmVhZGNydW1iUHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgIFJlc3Rhbmd1bGFyUHJvdmlkZXIsIEFuYWx5dGljc1Byb3ZpZGVyKSB7XG5cbiAgICAgICAgY29uZmlndXJlUm91dGluZygpO1xuICAgICAgICBjb25maWd1cmVCcmVhZGNydW1iKCk7XG5cbiAgICAgICAgY29uZmlndXJlUmVzdGFuZ3VsYXIoKTtcbiAgICAgICAgY29uZmlndXJlR29vZ2xlQW5hbHl0aWNzKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gY29uZmlndXJlUm91dGluZygpIHtcbiAgICAgICAgICAgIHJvdXRlaGVscGVyQ29uZmlnUHJvdmlkZXIuY29uZmlnLiR1cmxSb3V0ZXJQcm92aWRlciA9ICR1cmxSb3V0ZXJQcm92aWRlcjtcbiAgICAgICAgICAgIHJvdXRlaGVscGVyQ29uZmlnUHJvdmlkZXIuY29uZmlnLiRzdGF0ZVByb3ZpZGVyID0gJHN0YXRlUHJvdmlkZXI7XG5cbiAgICAgICAgICAgIHJvdXRlaGVscGVyQ29uZmlnUHJvdmlkZXIuY29uZmlnLnRpdGxlID0gY29uZmlnLmFwcFRpdGxlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY29uZmlndXJlQnJlYWRjcnVtYigpIHtcbiAgICAgICAgICAgICRicmVhZGNydW1iUHJvdmlkZXIuc2V0T3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgcHJlZml4U3RhdGVOYW1lOiAnaW5kZXgnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnYm9vdHN0cmFwMycsXG4gICAgICAgICAgICAgICAgaW5jbHVkZUFic3RyYWN0OiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNvbmZpZ3VyZVJlc3Rhbmd1bGFyKCkge1xuICAgICAgICAgICAgdmFyIGJhc2VVcmwgPSAnL2FwaSc7XG5cbiAgICAgICAgICAgIFJlc3Rhbmd1bGFyUHJvdmlkZXIuc2V0QmFzZVVybChiYXNlVXJsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNvbmZpZ3VyZUdvb2dsZUFuYWx5dGljcygpIHtcbiAgICAgICAgICAgIC8vIFNldCBhIHNpbmdsZSBhY2NvdW50XG4gICAgICAgICAgICBBbmFseXRpY3NQcm92aWRlci5zZXRBY2NvdW50KCdVQS0yMDU5MzQyNi0xJyk7XG4gICAgICAgICAgICBBbmFseXRpY3NQcm92aWRlci5zZXRQYWdlRXZlbnQoJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGFmdGVyVmlld0NvbnRlbnRMb2FkZWQoJHJvb3RTY29wZSkge1xuICAgICAgICAkcm9vdFNjb3BlLiRvbignJHZpZXdDb250ZW50TG9hZGVkJyxmdW5jdGlvbigpe1xuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCdodG1sLCBib2R5JykuYW5pbWF0ZSh7IHNjcm9sbFRvcDogMCB9LCAyMDApO1xuICAgICAgICB9KVxuICAgIH1cblxufSkoKTsiLCIvKiBnbG9iYWwgdG9hc3RyOmZhbHNlLCBtb21lbnQ6ZmFsc2UgKi9cbihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLmNvcmUnKVxuICAgICAgICAuY29uc3RhbnQoJ3RvYXN0cicsIHRvYXN0cilcbiAgICAgICAgLmNvbnN0YW50KCdtb21lbnQnLCBtb21lbnQpXG4gICAgICAgIC5jb25zdGFudCgnZ2FwaScsIGdhcGkpO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdub3Rvc3BvcnRhbC5jb3JlJylcbiAgICAgICAgLnJ1bihmYWNlYm9va0luaXQpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gZmFjZWJvb2tJbml0KCR3aW5kb3csIGNvbW1vbikge1xuICAgICAgICAvL3doZW4gZmFjZWJvb2sgaXMgaW5pdGlhbGl6ZWRcbiAgICAgICAgLy93ZSBjYW4gcmVuZGVyIEdvb2dsZSsgdG9vXG4gICAgICAgICR3aW5kb3cuZmJBc3luY0luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbml0RmFjZWJvb2soKTtcbiAgICAgICAgICAgIGNvbW1vbi4kYnJvYWRjYXN0KCdmYi5pbml0Jyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdEZhY2Vib29rKCkge1xuICAgICAgICAgICAgRkIuaW5pdCh7XG4gICAgICAgICAgICAgICAgYXBwSWQ6ICc0NjYyODAzNTAyMDE5NjAnLFxuICAgICAgICAgICAgICAgIGNoYW5uZWxVcmw6ICdqcy9tb2R1bGVzL2NvcmUvZmItY2hhbm5lbC5odG1sJyxcbiAgICAgICAgICAgICAgICBjb29raWU6IHRydWUsXG4gICAgICAgICAgICAgICAgeGZibWw6IHRydWUsXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogJ3YyLjMnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgLy8gbG9hZCB0aGUgRmFjZWJvb2sgamF2YXNjcmlwdCBTREtcblxuICAgICAgICAgICAgdmFyIGpzLFxuICAgICAgICAgICAgICAgIGlkID0gJ2ZhY2Vib29rLWpzc2RrJyxcbiAgICAgICAgICAgICAgICByZWYgPSBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcblxuICAgICAgICAgICAgaWYgKGQuZ2V0RWxlbWVudEJ5SWQoaWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBqcyA9IGQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgICAgICBqcy5pZCA9IGlkO1xuICAgICAgICAgICAganMuYXN5bmMgPSB0cnVlO1xuICAgICAgICAgICAganMuc3JjID0gXCIvL2Nvbm5lY3QuZmFjZWJvb2submV0L2VuX1VTL3Nkay5qc1wiO1xuXG4gICAgICAgICAgICByZWYucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoanMsIHJlZik7XG5cbiAgICAgICAgfShkb2N1bWVudCkpO1xuICAgIH1cbn0pKCk7IiwiLyoqXG4gKiBub3Rvc3BvcnRhbC5kYXNoYm9hcmRcbiAqIENPTlRST0xMRVI6IERhc2hib2FyZENvbnRyb2xsZXJcbiAqL1xuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLmRhc2hib2FyZCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdEYXNoYm9hcmRDb250cm9sbGVyJywgRGFzaGJvYXJkQ29udHJvbGxlcik7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBEYXNoYm9hcmRDb250cm9sbGVyKEdQQ29sbGVjdGlvbnMsIE1haWxDaGltcCkge1xuICAgICAgICAvKmpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgICAgdm0uZmFjZWJvb2t1cmwgPSAnaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3Zic2Rla2xpbXRvcmVuJztcbiAgICAgICAgdm0uY29sbGVjdGlvbnMgPSBbXTtcbiAgICAgICAgdm0uY2FtcGFpZ25zID0gW107XG5cbiAgICAgICAgYWN0aXZhdGUoKTtcbiAgICAgICAgLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgIHZtLmNvbGxlY3Rpb25zID0gR1BDb2xsZWN0aW9ucy50YWtlKDQpO1xuXG4gICAgICAgICAgICBNYWlsQ2hpbXAuY2FtcGFpZ25zKDMpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB2bS5jYW1wYWlnbnMgPSByZXNwb25zZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufSkoKTsiLCIvKipcbiAqIFJPVVRFUzogbm90b3Nwb3J0YWwuZGFzaGJvYXJkXG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdub3Rvc3BvcnRhbC5kYXNoYm9hcmQnKVxuICAgICAgICAucnVuKGNvbmZpZ1JvdXRlcyk7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBjb25maWdSb3V0ZXMocm91dGVoZWxwZXIpIHtcbiAgICAgICAgcm91dGVoZWxwZXIuY29uZmlndXJlU3RhdGVzKGdldFN0YXRlcygpKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0U3RhdGVzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRlOiAnaW5kZXgnLFxuICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2luZGV4JyxcbiAgICAgICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdtYWluQCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2pzL21vZHVsZXMvbGF5b3V0L21haW4uaHRtbCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdzdGFydCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRlOiAnaW5kZXguZGFzaGJvYXJkJyxcbiAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2Rhc2hib2FyZCcsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnY29udGVudEBpbmRleCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2pzL21vZHVsZXMvZGFzaGJvYXJkL2Rhc2hib2FyZC5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnRGFzaGJvYXJkQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3NsaWRlckBpbmRleCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2pzL21vZHVsZXMvZGFzaGJvYXJkL3NsaWRlci5odG1sJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0Rhc2hib2FyZCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgfTtcbn0pKCk7IiwiLyoqXG4gKiBub3Rvc3BvcnRhbC5sYXlvdXRcbiAqIENPTlRST0xMRVI6IFNoZWxsQ29udHJvbGxlclxuICovXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbm90b3Nwb3J0YWwubGF5b3V0JylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ1NoZWxsQ29udHJvbGxlcicsIFNoZWxsQ29udHJvbGxlcik7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBTaGVsbENvbnRyb2xsZXIoTWFpbENoaW1wLCAkc3RhdGUpIHtcbiAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgdm0uY2FtcGFpZ25fbWVtYmVycyA9IDA7XG4gICAgICAgLy8gdm0uaGlkZUJyZWFkY3J1bWIgPSAkc3RhdGUuYztcblxuICAgICAgICBhY3RpdmF0ZSgpO1xuICAgICAgICAvLy8vLy8vLy8vLy8vXG5cblxuICAgICAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgIE1haWxDaGltcC5tZW1iZXJDb3VudCgpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB2bS5jYW1wYWlnbl9tZW1iZXJzID0gcmVzcG9uc2UuZGF0YS5zdGF0cy5tZW1iZXJfY291bnQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG5cbiAgICB9XG5cblxufSkoKTsiLCIvKipcbiAqIG5vdG9zcG9ydGFsLmluZm9cbiAqIENPTlRST0xMRVI6IENhbXBhaWduc0NvbnRyb2xsZXJcbiAqL1xuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLmluZm8nKVxuICAgICAgICAuY29udHJvbGxlcignQ2FtcGFpZ25zQ29udHJvbGxlcicsIENhbXBhaWduc0NvbnRyb2xsZXIpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gQ2FtcGFpZ25zQ29udHJvbGxlcihNYWlsQ2hpbXApIHtcbiAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICAgIHZtLmNhbXBhaWducyA9IFtdO1xuXG4gICAgICAgIGFjdGl2YXRlKCk7XG4gICAgICAgIC8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgICAgICAgTWFpbENoaW1wLmNhbXBhaWducygpLnRoZW4oY2FtcGFpZ25zU3VjY2Vzcyk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbXBhaWduc1N1Y2Nlc3MocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB2bS5jYW1wYWlnbnMgPSByZXNwb25zZS5kYXRhLmNhbXBhaWducztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICB9XG59KSgpOyIsIi8qKlxuICogUk9VVEVTOiBub3Rvc3BvcnRhbC5pbmZvXG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdub3Rvc3BvcnRhbC5pbmZvJylcbiAgICAgICAgLnJ1bihjb25maWdSb3V0ZXMpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY29uZmlnUm91dGVzKHJvdXRlaGVscGVyKSB7XG4gICAgICAgIHJvdXRlaGVscGVyLmNvbmZpZ3VyZVN0YXRlcyhnZXRTdGF0ZXMoKSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldFN0YXRlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2luZm8nLFxuICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2luZm8nLFxuICAgICAgICAgICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ21haW5AJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnanMvbW9kdWxlcy9sYXlvdXQvbWFpbi5odG1sJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0luZm8nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2luZm8uY29udGFjdCcsXG4gICAgICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9jb250YWN0JyxcbiAgICAgICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb250ZW50QGluZm8nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdqcy9tb2R1bGVzL2luZm8vY29udGFjdC5odG1sJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0NvbnRhY3QnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2luZm8uYWJvdXQnLFxuICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvYWJvdXQnLFxuICAgICAgICAgICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnRAaW5mbyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2pzL21vZHVsZXMvaW5mby9hYm91dC5odG1sJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ092ZXIgb256ZSBzY2hvb2wnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2luZm8uY2FyZScsXG4gICAgICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9jYXJlJyxcbiAgICAgICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb250ZW50QGluZm8nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdqcy9tb2R1bGVzL2luZm8vY2FyZS5odG1sJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1pvcmcgb3Agb256ZSBzY2hvb2wnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2luZm8uY2FtcGFpZ25zJyxcbiAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2NhbXBhaWducycsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnY29udGVudEBpbmZvJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnanMvbW9kdWxlcy9pbmZvL2NhbXBhaWducy5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ2FtcGFpZ25zQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnTmlldXdzYnJpZXZlbidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgfTtcbn0pKCk7IiwiLyoqXG4gKiBub3Rvc3BvcnRhbC5tZWRpYVxuICogRkFDVE9SWTogR1BDb2xsZWN0aW9uc1xuICovXG5cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdub3Rvc3BvcnRhbC5tZWRpYScpXG4gICAgICAgIC5mYWN0b3J5KCdHUENvbGxlY3Rpb25zJywgR1BDb2xsZWN0aW9ucyk7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBHUENvbGxlY3Rpb25zKCkge1xuXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgICAgICAgZ2V0OiBnZXQsXG4gICAgICAgICAgICB0YWtlOiB0YWtlXG4gICAgICAgIH1cblxuICAgICAgICAvKnZhciBjb2xsZWN0aW9ucyA9IFtcbiAgICAgICAgICdodHRwczovL3BsdXMuZ29vZ2xlLmNvbS8rVkJTREVLbGltdG9yZW5KYWJiZWtlL3Bvc3RzLzJOVlppUHdRd3VrJyxcbiAgICAgICAgICdodHRwczovL3BsdXMuZ29vZ2xlLmNvbS8rVkJTREVLbGltdG9yZW5KYWJiZWtlL3Bvc3RzL1JZQ0xpalJWNm9ZJyxcbiAgICAgICAgICdodHRwczovL3BsdXMuZ29vZ2xlLmNvbS8rVkJTREVLbGltdG9yZW5KYWJiZWtlL3Bvc3RzLzlLMW5VRFRmUVJMJ1xuICAgICAgICAgXTsqL1xuICAgICAgICB2YXIgY29sbGVjdGlvbnMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJzIwMTUtMjAxNicsXG4gICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vcGx1cy5nb29nbGUuY29tL2IvMTAzNDA2MTIzNjcxOTQyNTI5NjYwL2NvbGxlY3Rpb24vc1lMYTMnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICcyMDE0LTIwMTUnLFxuICAgICAgICAgICAgICAgIGhyZWY6ICdodHRwczovL3BsdXMuZ29vZ2xlLmNvbS9iLzEwMzQwNjEyMzY3MTk0MjUyOTY2MC9jb2xsZWN0aW9uL1U1YWEzJyxcbiAgICAgICAgICAgICAgICBwcmV2aWV3OiAnaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tLy1XdVFSWUNlblA4dy9WZWxzdnJHTC1mSS9BQUFBQUFBQUFxSS9yajZJVDBnUEpXTS93NjQwLWg0ODAtcC9EU0NOMzAyOC5KUEcnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICcyMDEzLTIwMTQnLFxuICAgICAgICAgICAgICAgIGhyZWY6ICdodHRwczovL3BsdXMuZ29vZ2xlLmNvbS9iLzEwMzQwNjEyMzY3MTk0MjUyOTY2MC9jb2xsZWN0aW9uL0VvTlAyJyxcbiAgICAgICAgICAgICAgICBwcmV2aWV3OiAnaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tLy1YdU5jOHpjSzZjZy9WZWx5Z1doZktVSS9BQUFBQUFBQUF2US84RVp6V0JGQmdkQS93Nzc3LWg1ODMtbm8vSU1HXzI3ODkuSlBHJ1xuICAgICAgICAgICAgfVxuICAgICAgICBdXG5cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbnM7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB0YWtlKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCBudW1iZXIgJiYgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNvbGxlY3Rpb25zW2ldKTtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxufSkoKTsiLCIvKipcbiAqIG5vdG9zcG9ydGFsLm1lZGlhXG4gKiBGQUNUT1JZOiBNYWlsQ2hpbXBcbiAqL1xuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbm90b3Nwb3J0YWwubWVkaWEnKVxuICAgICAgICAuZmFjdG9yeSgnTWFpbENoaW1wJywgTWFpbENoaW1wKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIE1haWxDaGltcCgkaHR0cCwgJHEpIHtcbiAgICAgICAgdmFyIGNhbXBhaWduc19jYWNoZSA9IG51bGw7XG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgICAgICAgY2FtcGFpZ25zOiBjYW1wYWlnbnMsXG4gICAgICAgICAgICBtZW1iZXJDb3VudDogbWVtYmVyQ291bnRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VydmljZTtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gY2FtcGFpZ25zKHRha2UpIHtcblxuXG5cbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvbWFpbGNoaW1wL2NhbXBhaWducycvKiwge3BhcmFtczoge3Rha2U6IHRha2V9fSBUQUtFIEFMTCBOT1cgQVMgSVQgTVVTVCBCRSBGSUxURVJFRCovKVxuICAgICAgICAgICAgICAgIC50aGVuKGNhbXBhaWduc1N1Y2Nlc3MpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYW1wYWlnbnNTdWNjZXNzKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocmVzcG9uc2UuZGF0YS5jYW1wYWlnbnMsIGZ1bmN0aW9uIChjYW1wYWlnbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbXBhaWduLnJlY2lwaWVudHMuc2VnbWVudF9vcHRzICYmIGkgPCAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjYW1wYWlnbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtZW1iZXJDb3VudCgpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvbWFpbGNoaW1wL21lbWJlcl9jb3VudCcpXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MobWVtYmVyQ291bnRTdWNjZXNzKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gbWVtYmVyQ291bnRTdWNjZXNzKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KSgpOyIsIi8qKlxuICogUk9VVEVTOiBub3Rvc3BvcnRhbC5pbmZvXG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdub3Rvc3BvcnRhbC5pbmZvJylcbiAgICAgICAgLnJ1bihjb25maWdSb3V0ZXMpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY29uZmlnUm91dGVzKHJvdXRlaGVscGVyKSB7XG4gICAgICAgIHJvdXRlaGVscGVyLmNvbmZpZ3VyZVN0YXRlcyhnZXRTdGF0ZXMoKSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldFN0YXRlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ21lZGlhJyxcbiAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9tZWRpYScsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbWFpbkAnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdqcy9tb2R1bGVzL2xheW91dC9tYWluLmh0bWwnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnaW4gYmVlbGQnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ21lZGlhLnBob3RvcycsXG4gICAgICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9waG90b3MnLFxuICAgICAgICAgICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnRAbWVkaWEnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdqcy9tb2R1bGVzL21lZGlhL3Bob3Rvcy5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnUGhvdG9Db250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdmb3RvXFwncydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgfTtcbn0pKCk7IiwiLyoqXG4gKiBub3Rvc3BvcnRhbC5tZWRpYVxuICogQ09OVFJPTExFUjogUGhvdG9Db250cm9sbGVyXG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdub3Rvc3BvcnRhbC5tZWRpYScpXG4gICAgICAgIC5jb250cm9sbGVyKCdQaG90b0NvbnRyb2xsZXInLCBQaG90b0NvbnRyb2xsZXIpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gUGhvdG9Db250cm9sbGVyKEdQQ29sbGVjdGlvbnMpIHtcbiAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICAgIHZtLmNvbGxlY3Rpb25zID0gW107XG5cblxuICAgICAgICBhY3RpdmF0ZSgpO1xuXG4gICAgICAgIC8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgIHZtLmNvbGxlY3Rpb25zID0gR1BDb2xsZWN0aW9ucy5nZXQoKTtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7IiwiLyoqXG4gKiBub3Rvc3BvcnRhbC53aWRnZXRzXG4gKiBESVJFQ1RJVkU6IGFwcGVhckFuaW1hdGlvblxuICovXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbm90b3Nwb3J0YWwud2lkZ2V0cycpXG4gICAgICAgIC5kaXJlY3RpdmUoJ2FwcGVhckFuaW1hdGlvbicsIGFwcGVhckFuaW1hdGlvbik7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBhcHBlYXJBbmltYXRpb24oKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgbGluazogbGlua0Z1bmNcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZGlyZWN0aXZlO1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICBpZiAoIWFuZ3VsYXIuZWxlbWVudCgnYm9keScpLmhhc0NsYXNzKCduby1jc3N0cmFuc2l0aW9ucycpKSB7XG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5iaW5kKCdhcHBlYXInLCBhcHBlYXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYXBwZWFyKCkge1xuICAgICAgICAgICAgICAgIHZhciBkZWxheSA9IGF0dHJzLmFwcGVhckFuaW1hdGlvbkRlbGF5IHx8IDE7XG4gICAgICAgICAgICAgICAgaWYgKGRlbGF5ID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcygnYW5pbWF0aW9uLWRlbGF5JywgZGVsYXkgKyAnbXMnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5hZGRDbGFzcygnYW5pbWF0ZWQnKS5hZGRDbGFzcyhhdHRycy5hcHBlYXJBbmltYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSkoKTtcblxuIiwiLyoqXG4gKiBub3Rvc3BvcnRhbC53aWRnZXRzXG4gKiBESVJFQ1RJVkU6IGJsdXJcbiAqL1xuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLndpZGdldHMnKVxuICAgICAgICAuZGlyZWN0aXZlKCdibHVyJywgYmx1cik7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBibHVyKCR0aW1lb3V0KSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgbGluazogbGlua0Z1bmNcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZGlyZWN0aXZlO1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdmd2ItYmcgZndiLWJsdXInKTtcblxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpLFxuICAgICAgICAgICAgICAgICAgICBwcmVwZW5kQm94ID0gJzxkaXYgY2xhc3M9XCJibHVyLWJveFwiLz4nO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFlbGVtZW50LmZpbmQoJ2NhbnZhcycpLmxlbmd0aCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRycy5pbWFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnNyYyA9IGF0dHJzLmltYWdlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJykgIT09ICdub25lJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnNyYyA9IGVsZW1lbnQuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgndXJsKCcsICcnKS5yZXBsYWNlKCcpJywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCAnbm9uZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFBpeGFzdGljLnByb2Nlc3MoaW1nLCAnYmx1cmZhc3QnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBhdHRycy5hbW91bnQgfHwgMlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAucHJlcGVuZChwcmVwZW5kQm94KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5ibHVyLWJveCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAucHJlcGVuZChpbWcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhbnZhcyA9IGVsZW1lbnQuZmluZCgnY2FudmFzJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbnZhcy53aWR0aCgpID09IGVsZW1lbnQud2lkdGgoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IC0oKGNhbnZhcy5oZWlnaHQoKSAtIGVsZW1lbnQuaGVpZ2h0KCkpIC8gMilcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IC0oKGNhbnZhcy53aWR0aCgpIC0gZWxlbWVudC53aWR0aCgpKSAvIDIpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnYmx1ci1sb2FkJyk7XG4gICAgICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cbn0pKCk7XG5cbiIsIi8qKlxuICogbm90b3Nwb3J0YWwud2lkZ2V0c1xuICogRElSRUNUSVZFOiBmYW5jeWJveFxuICovXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbm90b3Nwb3J0YWwud2lkZ2V0cycpXG4gICAgICAgIC5kaXJlY3RpdmUoJ2ZhbmN5Ym94JywgZmFuY3lib3gpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gZmFuY3lib3goKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgbGluazogbGlua0Z1bmNcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZGlyZWN0aXZlO1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICBlbGVtZW50LmZpbmQoJy5nYWxsZXJ5LWltYWdlcywgLmxpZ2h0Ym94JykuZmFuY3lib3goe1xuICAgICAgICAgICAgICAgIG5leHRFZmZlY3Q6ICdmYWRlJyxcbiAgICAgICAgICAgICAgICBwcmV2RWZmZWN0OiAnZmFkZScsXG4gICAgICAgICAgICAgICAgb3BlbkVmZmVjdDogJ2ZhZGUnLFxuICAgICAgICAgICAgICAgIGNsb3NlRWZmZWN0OiAnZmFkZScsXG4gICAgICAgICAgICAgICAgaGVscGVyczoge1xuICAgICAgICAgICAgICAgICAgICBvdmVybGF5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NrZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnb3ZlcidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHBsOiB7XG4gICAgICAgICAgICAgICAgICAgIGNsb3NlQnRuOiAnPGEgdGl0bGU9XCJTbHVpdGVuXCIgY2xhc3M9XCJmYW5jeWJveC1pdGVtIGZhbmN5Ym94LWNsb3NlXCIgaHJlZj1cImphdmFzY3JpcHQ6O1wiPsOXPC9hPicsXG4gICAgICAgICAgICAgICAgICAgIG5leHQ6ICc8YSB0aXRsZT1cIlZvbGdlbmRlXCIgY2xhc3M9XCJmYW5jeWJveC1uYXYgZmFuY3lib3gtbmV4dFwiIGhyZWY9XCJqYXZhc2NyaXB0OjtcIj5cXG5cXFxuXHRcdFx0XHRcdFx0PHNwYW4+PHN2ZyB4PVwiMFwiIHk9XCIwXCIgd2lkdGg9XCI5cHhcIiBoZWlnaHQ9XCIxNnB4XCIgdmlld0JveD1cIjAgMCA5IDE2XCIgZW5hYmxlLWJhY2tncm91bmQ9XCJuZXcgMCAwIDkgMTZcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPjxwb2x5Z29uIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBjbGlwLXJ1bGU9XCJldmVub2RkXCIgZmlsbD1cIiNmY2ZjZmNcIiBwb2ludHM9XCIxLDAuMDAxIDAsMS4wMDEgNyw4IDAsMTQuOTk5IDEsMTUuOTk5IDksOCBcIi8+PC9zdmc+PC9zcGFuPlxcblxcXG5cdFx0XHRcdFx0PC9hPicsXG4gICAgICAgICAgICAgICAgICAgIHByZXY6ICc8YSB0aXRsZT1cIlZvcmlnZVwiIGNsYXNzPVwiZmFuY3lib3gtbmF2IGZhbmN5Ym94LXByZXZcIiBocmVmPVwiamF2YXNjcmlwdDo7XCI+XFxuXFxcblx0XHRcdFx0XHRcdDxzcGFuPjxzdmcgeD1cIjBcIiB5PVwiMFwiIHdpZHRoPVwiOXB4XCIgaGVpZ2h0PVwiMTZweFwiIHZpZXdCb3g9XCIwIDAgOSAxNlwiIGVuYWJsZS1iYWNrZ3JvdW5kPVwibmV3IDAgMCA5IDE2XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48cG9seWdvbiBmaWxsLXJ1bGU9XCJldmVub2RkXCIgY2xpcC1ydWxlPVwiZXZlbm9kZFwiIGZpbGw9XCIjZmNmY2ZjXCIgcG9pbnRzPVwiOCwxNS45OTkgOSwxNC45OTkgMiw4IDksMS4wMDEgOCwwLjAwMSAwLDggXCIvPjwvc3ZnPjwvc3Bhbj5cXG5cXFxuXHRcdFx0XHRcdDwvYT4nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cbn0pKCk7XG5cbiIsIi8qKlxuICogbm90b3Nwb3J0YWwud2lkZ2V0c1xuICogRElSRUNUSVZFOiBsaXZpY29uXG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdub3Rvc3BvcnRhbC53aWRnZXRzJylcbiAgICAgICAgLmRpcmVjdGl2ZSgnbGl2aWNvbicsIGxpdmljb24pO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gbGl2aWNvbigpIHtcbiAgICAgICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgc2NvcGU6IGZhbHNlLFxuICAgICAgICAgICAgbGluazogbGlua0Z1bmNcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZGlyZWN0aXZlO1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2xpdmljb24nKTtcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkTGl2aWNvbigpO1xuICAgICAgICB9XG5cbiAgICB9XG59KSgpO1xuXG4iLCIvKipcbiAqIG5vdG9zcG9ydGFsLndpZGdldHNcbiAqIERJUkVDVElWRTogcGFyYWxheFxuICovXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbm90b3Nwb3J0YWwud2lkZ2V0cycpXG4gICAgICAgIC5kaXJlY3RpdmUoJ3BhcmFsYXgnLCBwYXJhbGF4KTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHBhcmFsYXgoJHRpbWVvdXQsICR3aW5kb3cpIHtcbiAgICAgICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgICAgICBsaW5rOiBsaW5rRnVuY1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBkaXJlY3RpdmU7XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdmd2ItYmcgZndiLWJsdXInKTtcbiAgICAgICAgICAgICAgICB2YXIgc3BlZWQgPSBhdHRycy5zcGVlZCB8fCAzO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYmdQb3NpdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICR0aGlzWSA9IGVsZW1lbnQub2Zmc2V0KCkudG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvd1kgPSAkd2luZG93LnBhZ2VZT2Zmc2V0O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICgkdGhpc1kgPiAkd2luZG93WSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY3NzKHtiYWNrZ3JvdW5kUG9zaXRpb246ICc1MCUgJyArICgoJHRoaXNZIC0gJHdpbmRvd1kpIC8gc3BlZWQpICsgJ3B4J30pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNzcyh7YmFja2dyb3VuZFBvc2l0aW9uOiAnNTAlICcgKyAoLSgkdGhpc1kgLSAkd2luZG93WSkgLyBzcGVlZCkgKyAncHgnfSk7XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICBiZ1Bvc2l0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykuYmluZCgnc2Nyb2xsJywgYmdQb3NpdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfVxufSkoKTtcblxuIiwiLyoqXG4gKiBub3Rvc3BvcnRhbC53aWRnZXRzXG4gKiBESVJFQ1RJVkU6IHJzU2xpZHJcbiAqL1xuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25vdG9zcG9ydGFsLndpZGdldHMnKVxuICAgICAgICAuZGlyZWN0aXZlKCdyc1NsaWRlcicsIHJzU2xpZGVyKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHJzU2xpZGVyKCR0aW1lb3V0KSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgbGluazogbGlua0Z1bmNcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZGlyZWN0aXZlO1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy9SZXZvbHV0aW9uIFNsaWRlciBTdGFydFxuICAgICAgICAgICAgICAgIHZhciByZXZvbHV0aW9uU2xpZGVyID0gZWxlbWVudDtcblxuICAgICAgICAgICAgICAgIGlmIChyZXZvbHV0aW9uU2xpZGVyLmNsb3Nlc3QoJy5ycy1zbGlkZXInKS5oYXNDbGFzcygnZnVsbC13aWR0aCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBib2R5ID0gYW5ndWxhci5lbGVtZW50KCdib2R5JyksXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IGJvZHkud2lkdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcEhlaWdodCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJIZWlnaHQgPSAxMDQsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnI3RvcC1ib3gnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChib2R5Lmhhc0NsYXNzKCdoaWRkZW4tdG9wJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wSGVpZ2h0ID0gYW5ndWxhci5lbGVtZW50KCcjdG9wLWJveCcpLm91dGVySGVpZ2h0KCkgLSAzMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICgoYm9keS53aWR0aCgpKSA+PSAxMjAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gYm9keS5oZWlnaHQoKSAtICh0b3BIZWlnaHQgKyBoZWFkZXJIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSA4MDA7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV2b2x1dGlvblNsaWRlci5yZXZvbHV0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiA2MDAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnR3aWR0aDogMTIwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0aGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRlVGh1bWJzOiAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb25UeXBlOiAnYnVsbGV0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb25BcnJvd3M6ICdzb2xvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb25IQWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGlvblZBbGlnbjogJ3RvcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uSE9mZnNldDogLTU0NSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb25WT2Zmc2V0OiAzMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVUaW1lckJhcjogJ29uJ1xuICAgICAgICAgICAgICAgICAgICB9KS5wYXJlbnQoKS5wYXJlbnQoKS5yZW1vdmVDbGFzcygnbG9hZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldm9sdXRpb25TbGlkZXIucmV2b2x1dGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogNjAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0d2lkdGg6IDEyMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydGhlaWdodDogNTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZVRodW1iczogMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uVHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25Ib3ZlclN0b3A6ICdvZmYnXG4gICAgICAgICAgICAgICAgICAgIH0pLnBhcmVudCgpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdsb2FkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvL1Jldm9sdXRpb24gU2xpZGVyIEVuZFxuICAgICAgICB9XG4gICAgfVxufSkoKTtcblxuIiwiLy8gSW5jbHVkZSBpbiBpbmRleC5odG1sIHNvIHRoYXQgYXBwIGxldmVsIGV4Y2VwdGlvbnMgYXJlIGhhbmRsZWQuXG4vLyBFeGNsdWRlIGZyb20gdGVzdFJ1bm5lci5odG1sIHdoaWNoIHNob3VsZCBydW4gZXhhY3RseSB3aGF0IGl0IHdhbnRzIHRvIHJ1blxuKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYmxvY2tzLmV4Y2VwdGlvbicpXG4gICAgICAgIC5wcm92aWRlcignZXhjZXB0aW9uSGFuZGxlcicsIGV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlcilcbiAgICAgICAgLmNvbmZpZyhjb25maWcpO1xuXG4gICAgLyoqXG4gICAgICogTXVzdCBjb25maWd1cmUgdGhlIGV4Y2VwdGlvbiBoYW5kbGluZ1xuICAgICAqIEByZXR1cm4ge1t0eXBlXX1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBleGNlcHRpb25IYW5kbGVyUHJvdmlkZXIoKSB7XG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgICAgICAgIGFwcEVycm9yUHJlZml4OiB1bmRlZmluZWRcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmNvbmZpZ3VyZSA9IGZ1bmN0aW9uIChhcHBFcnJvclByZWZpeCkge1xuICAgICAgICAgICAgdGhpcy5jb25maWcuYXBwRXJyb3JQcmVmaXggPSBhcHBFcnJvclByZWZpeDtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB7Y29uZmlnOiB0aGlzLmNvbmZpZ307XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJlIGJ5IHNldHRpbmcgYW4gb3B0aW9uYWwgc3RyaW5nIHZhbHVlIGZvciBhcHBFcnJvclByZWZpeC5cbiAgICAgKiBBY2Nlc3NpYmxlIHZpYSBjb25maWcuYXBwRXJyb3JQcmVmaXggKHZpYSBjb25maWcgdmFsdWUpLlxuICAgICAqIEBwYXJhbSAge1t0eXBlXX0gJHByb3ZpZGVcbiAgICAgKiBAcmV0dXJuIHtbdHlwZV19XG4gICAgICogQG5nSW5qZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZmlnKCRwcm92aWRlKSB7XG4gICAgICAgICRwcm92aWRlLmRlY29yYXRvcignJGV4Y2VwdGlvbkhhbmRsZXInLCBleHRlbmRFeGNlcHRpb25IYW5kbGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRlbmQgdGhlICRleGNlcHRpb25IYW5kbGVyIHNlcnZpY2UgdG8gYWxzbyBkaXNwbGF5IGEgdG9hc3QuXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSAkZGVsZWdhdGVcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGV4Y2VwdGlvbkhhbmRsZXJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGxvZ2dlclxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSB0aGUgZGVjb3JhdGVkICRleGNlcHRpb25IYW5kbGVyIHNlcnZpY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBleHRlbmRFeGNlcHRpb25IYW5kbGVyKCRkZWxlZ2F0ZSwgZXhjZXB0aW9uSGFuZGxlciwgbG9nZ2VyKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihleGNlcHRpb24sIGNhdXNlKSB7XG4gICAgICAgICAgICB2YXIgYXBwRXJyb3JQcmVmaXggPSBleGNlcHRpb25IYW5kbGVyLmNvbmZpZy5hcHBFcnJvclByZWZpeCB8fCAnJztcbiAgICAgICAgICAgIHZhciBlcnJvckRhdGEgPSB7ZXhjZXB0aW9uOiBleGNlcHRpb24sIGNhdXNlOiBjYXVzZX07XG4gICAgICAgICAgICBleGNlcHRpb24ubWVzc2FnZSA9IGFwcEVycm9yUHJlZml4ICsgZXhjZXB0aW9uLm1lc3NhZ2U7XG4gICAgICAgICAgICAkZGVsZWdhdGUoZXhjZXB0aW9uLCBjYXVzZSk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvdWxkIGFkZCB0aGUgZXJyb3IgdG8gYSBzZXJ2aWNlJ3MgY29sbGVjdGlvbixcbiAgICAgICAgICAgICAqIGFkZCBlcnJvcnMgdG8gJHJvb3RTY29wZSwgbG9nIGVycm9ycyB0byByZW1vdGUgd2ViIHNlcnZlcixcbiAgICAgICAgICAgICAqIG9yIGxvZyBsb2NhbGx5LiBPciB0aHJvdyBoYXJkLiBJdCBpcyBlbnRpcmVseSB1cCB0byB5b3UuXG4gICAgICAgICAgICAgKiB0aHJvdyBleGNlcHRpb247XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICAgICAqICAgICB0aHJvdyB7IG1lc3NhZ2U6ICdlcnJvciBtZXNzYWdlIHdlIGFkZGVkJyB9O1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoZXhjZXB0aW9uLm1lc3NhZ2UsIGVycm9yRGF0YSk7XG4gICAgICAgIH07XG4gICAgfVxufSkoKTsiLCIvKipcbiAqIGJsb2Nrcy5leGNlcHRpb25cbiAqIEZBQ1RPUlk6IGV4Y2VwdGlvblxuICovXG5cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdibG9ja3MuZXhjZXB0aW9uJylcbiAgICAgICAgLmZhY3RvcnkoJ2V4Y2VwdGlvbicsIGV4Y2VwdGlvbik7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBleGNlcHRpb24obG9nZ2VyKSB7XG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgICAgICAgY2F0Y2hlcjogY2F0Y2hlclxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc2VydmljZTtcblxuICAgICAgICBmdW5jdGlvbiBjYXRjaGVyKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IobWVzc2FnZSwgcmVhc29uKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG59KSgpOyIsIi8qKlxuICogYmxvY2tzLmxvZ2dlclxuICogRkFDVE9SWTogbG9nZ2VyXG4gKi9cblxuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2Jsb2Nrcy5sb2dnZXInKVxuICAgICAgICAuZmFjdG9yeSgnbG9nZ2VyJywgbG9nZ2VyKTtcblxuICAgIGxvZ2dlci4kaW5qZWN0ID0gWyckbG9nJywgJ3RvYXN0ciddO1xuXG4gICAgZnVuY3Rpb24gbG9nZ2VyKCRsb2csIHRvYXN0cikge1xuICAgICAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgICAgICAgIHNob3dUb2FzdHM6IHRydWUsXG5cbiAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgIGluZm86IGluZm8sXG4gICAgICAgICAgICBzdWNjZXNzOiBzdWNjZXNzLFxuICAgICAgICAgICAgd2FybmluZzogd2FybmluZyxcblxuICAgICAgICAgICAgcmVtb3ZlZDogcmVtb3ZlZCxcbiAgICAgICAgICAgIHNhdmVkOiBzYXZlZCxcblxuICAgICAgICAgICAgLy8gc3RyYWlnaHQgdG8gY29uc29sZTsgYnlwYXNzIHRvYXN0clxuICAgICAgICAgICAgbG9nOiAkbG9nLmxvZ1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBlcnJvcihtZXNzYWdlLCBkYXRhLCB0aXRsZSkge1xuICAgICAgICAgICAgdG9hc3RyLmVycm9yKG1lc3NhZ2UsIHRpdGxlKTtcbiAgICAgICAgICAgICRsb2cuZXJyb3IoJ0ZvdXQ6ICcgKyBtZXNzYWdlLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGluZm8obWVzc2FnZSwgZGF0YSwgdGl0bGUpIHtcbiAgICAgICAgICAgIHRvYXN0ci5pbmZvKG1lc3NhZ2UsIHRpdGxlKTtcbiAgICAgICAgICAgICRsb2cuaW5mbygnSW5mbzogJyArIG1lc3NhZ2UsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc3VjY2VzcyhtZXNzYWdlLCBkYXRhLCB0aXRsZSkge1xuICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MobWVzc2FnZSwgdGl0bGUpO1xuICAgICAgICAgICAgJGxvZy5pbmZvKCdTdWNjZXM6ICcgKyBtZXNzYWdlLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSwgZGF0YSwgdGl0bGUpIHtcbiAgICAgICAgICAgIHRvYXN0ci53YXJuaW5nKG1lc3NhZ2UsIHRpdGxlKTtcbiAgICAgICAgICAgICRsb2cud2FybignTGV0IG9wOiAnICsgbWVzc2FnZSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZW1vdmVkKG1lc3NhZ2UsIGRhdGEsIHRpdGxlKSB7XG4gICAgICAgICAgICB0b2FzdHIud2FybmluZyhtZXNzYWdlLCB0aXRsZSk7XG4gICAgICAgICAgICAkbG9nLndhcm4oJ1ZlcndpamRlcmQ6ICcgKyBtZXNzYWdlLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNhdmVkKG1lc3NhZ2UsIGRhdGEsIHRpdGxlKSB7XG4gICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhtZXNzYWdlLCB0aXRsZSk7XG4gICAgICAgICAgICAkbG9nLmluZm8oJ0Jld2FhcmQ6ICcgKyBtZXNzYWdlLCBkYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7IiwiLyoqXG4gKiBub3Rvc3BsdXMucm91dGVyXG4gKiBGQUNUT1JZOiByb3V0ZWhlbHBlclxuICovXG5cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdibG9ja3Mucm91dGVyJylcbiAgICAgICAgLnByb3ZpZGVyKCdyb3V0ZWhlbHBlckNvbmZpZycsIHJvdXRlaGVscGVyQ29uZmlnKVxuICAgICAgICAuZmFjdG9yeSgncm91dGVoZWxwZXInLCByb3V0ZWhlbHBlcik7XG5cbiAgICByb3V0ZWhlbHBlci4kaW5qZWN0ID0gWydyb3V0ZWhlbHBlckNvbmZpZycsICckcm9vdFNjb3BlJywgJyRzdGF0ZSddO1xuXG4gICAgZnVuY3Rpb24gcm91dGVoZWxwZXJDb25maWcoKSB7XG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgICB0aGlzLmNvbmZpZyA9IHt9O1xuXG4gICAgICAgIHRoaXMuJGdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByb3V0ZWhlbHBlcihyb3V0ZWhlbHBlckNvbmZpZywgJHJvb3RTY29wZSwgJHN0YXRlKSB7XG4gICAgICAgIHZhciAkdXJsUm91dGVyUHJvdmlkZXIgPSByb3V0ZWhlbHBlckNvbmZpZy5jb25maWcuJHVybFJvdXRlclByb3ZpZGVyO1xuICAgICAgICB2YXIgJHN0YXRlUHJvdmlkZXIgPSByb3V0ZWhlbHBlckNvbmZpZy5jb25maWcuJHN0YXRlUHJvdmlkZXI7XG5cbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICAgICAgICBjb25maWd1cmVTdGF0ZXM6IGNvbmZpZ3VyZVN0YXRlcyxcbiAgICAgICAgICAgIHN0YXRlczogc3RhdGVzLFxuICAgICAgICAgICAgZ2V0OiBnZXRcbiAgICAgICAgfTtcblxuICAgICAgICBpbml0KCk7XG5cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIGNvbmZpZ3VyZVN0YXRlcyhzdGF0ZXMpIHtcbiAgICAgICAgICAgIHN0YXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5jb25maWcudGl0bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuY29uZmlnLm5jeUJyZWFkY3J1bWIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogc3RhdGUuY29uZmlnLnRpdGxlLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKHN0YXRlLnN0YXRlLCBzdGF0ZS5jb25maWcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzdGF0ZXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gJHN0YXRlLmdldCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0KHBhdHRlcm4pIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgc3RhdGVzKCkuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUubmFtZSA9PT0gcGF0dGVybikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBzdGF0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgICB1cGRhdGVEb2NUaXRsZSgpO1xuICAgICAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL2luZGV4L2Rhc2hib2FyZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRG9jVGl0bGUoKSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3VjY2VzcycsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGV2ZW50LCBjdXJyZW50LCBwcmV2aW91cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSByb3V0ZWhlbHBlckNvbmZpZy5jb25maWcudGl0bGUgKyAoY3VycmVudC50aXRsZSA/ICcgfCAnICsgY3VycmVudC50aXRsZSA6ICcnKTtcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS50aXRsZSA9IHRpdGxlOyAvLyBkYXRhIGJpbmQgdG8gPHRpdGxlPlxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRzdGF0ZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgfVxufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=